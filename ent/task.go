// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ai-gallery/ent/task"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Task is the model entity for the Task schema.
type Task struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 删除时间
	DeleteTime *time.Time `json:"delete_time,omitempty"`
	// 提示词
	Prompt string `json:"prompt,omitempty"`
	// 反向提示词
	NegativePrompt string `json:"negative_prompt,omitempty"`
	// 类型: txt2img, img2img
	Category string `json:"category,omitempty"`
	// 长度
	Weight float32 `json:"weight,omitempty"`
	// 宽度
	Height float32 `json:"height,omitempty"`
	// 图片比例
	ImgSize string `json:"img_size,omitempty"`
	// 随机数
	Seed string `json:"seed,omitempty"`
	// 采样器
	SamplerName string `json:"sampler_name,omitempty"`
	// 采样步数
	Steps int `json:"steps,omitempty"`
	// 引导系数
	CfgScale int `json:"cfg_scale,omitempty"`
	// 批次
	BatchSize int `json:"batch_size,omitempty"`
	// 总量
	Total int `json:"total,omitempty"`
	// 模型名称
	SdModelName string `json:"sd_model_name,omitempty"`
	// 模型hash值
	SdModelHash string `json:"sd_model_hash,omitempty"`
	// VAE名称
	SdVaeName string `json:"sd_vae_name,omitempty"`
	// VAE hash值
	SdVaeHash string `json:"sd_vae_hash,omitempty"`
	// 任务时间
	JobTimestamp time.Time `json:"job_timestamp,omitempty"`
	// SD 版本号
	Version string `json:"version,omitempty"`
	// 网格图片地址
	GridImageURL string `json:"grid_image_url,omitempty"`
	// 状态：INIT, PROCESS, COMPLETE, EXCEPTION
	Status string `json:"status,omitempty"`
	// 作者ID
	AuthorID int `json:"author_id,omitempty"`
	// 作者名称
	AuthorName string `json:"author_name,omitempty"`
	// 参考图片
	RefImages []string `json:"ref_images,omitempty"`
	// 服务存储名称
	Store string `json:"store,omitempty"`
	// 实际作品数量
	Count int `json:"count,omitempty"`
	// 是否存在优秀作品
	HasExcellent bool `json:"has_excellent,omitempty"`
	// 扩展信息
	Extra        string `json:"extra,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Task) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case task.FieldRefImages:
			values[i] = new([]byte)
		case task.FieldHasExcellent:
			values[i] = new(sql.NullBool)
		case task.FieldWeight, task.FieldHeight:
			values[i] = new(sql.NullFloat64)
		case task.FieldID, task.FieldSteps, task.FieldCfgScale, task.FieldBatchSize, task.FieldTotal, task.FieldAuthorID, task.FieldCount:
			values[i] = new(sql.NullInt64)
		case task.FieldPrompt, task.FieldNegativePrompt, task.FieldCategory, task.FieldImgSize, task.FieldSeed, task.FieldSamplerName, task.FieldSdModelName, task.FieldSdModelHash, task.FieldSdVaeName, task.FieldSdVaeHash, task.FieldVersion, task.FieldGridImageURL, task.FieldStatus, task.FieldAuthorName, task.FieldStore, task.FieldExtra:
			values[i] = new(sql.NullString)
		case task.FieldCreateTime, task.FieldUpdateTime, task.FieldDeleteTime, task.FieldJobTimestamp:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Task fields.
func (t *Task) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case task.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case task.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				t.CreateTime = value.Time
			}
		case task.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				t.UpdateTime = value.Time
			}
		case task.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				t.DeleteTime = new(time.Time)
				*t.DeleteTime = value.Time
			}
		case task.FieldPrompt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prompt", values[i])
			} else if value.Valid {
				t.Prompt = value.String
			}
		case task.FieldNegativePrompt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field negative_prompt", values[i])
			} else if value.Valid {
				t.NegativePrompt = value.String
			}
		case task.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				t.Category = value.String
			}
		case task.FieldWeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				t.Weight = float32(value.Float64)
			}
		case task.FieldHeight:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				t.Height = float32(value.Float64)
			}
		case task.FieldImgSize:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field img_size", values[i])
			} else if value.Valid {
				t.ImgSize = value.String
			}
		case task.FieldSeed:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field seed", values[i])
			} else if value.Valid {
				t.Seed = value.String
			}
		case task.FieldSamplerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sampler_name", values[i])
			} else if value.Valid {
				t.SamplerName = value.String
			}
		case task.FieldSteps:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field steps", values[i])
			} else if value.Valid {
				t.Steps = int(value.Int64)
			}
		case task.FieldCfgScale:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cfg_scale", values[i])
			} else if value.Valid {
				t.CfgScale = int(value.Int64)
			}
		case task.FieldBatchSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field batch_size", values[i])
			} else if value.Valid {
				t.BatchSize = int(value.Int64)
			}
		case task.FieldTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total", values[i])
			} else if value.Valid {
				t.Total = int(value.Int64)
			}
		case task.FieldSdModelName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sd_model_name", values[i])
			} else if value.Valid {
				t.SdModelName = value.String
			}
		case task.FieldSdModelHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sd_model_hash", values[i])
			} else if value.Valid {
				t.SdModelHash = value.String
			}
		case task.FieldSdVaeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sd_vae_name", values[i])
			} else if value.Valid {
				t.SdVaeName = value.String
			}
		case task.FieldSdVaeHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sd_vae_hash", values[i])
			} else if value.Valid {
				t.SdVaeHash = value.String
			}
		case task.FieldJobTimestamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field job_timestamp", values[i])
			} else if value.Valid {
				t.JobTimestamp = value.Time
			}
		case task.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				t.Version = value.String
			}
		case task.FieldGridImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field grid_image_url", values[i])
			} else if value.Valid {
				t.GridImageURL = value.String
			}
		case task.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = value.String
			}
		case task.FieldAuthorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field author_id", values[i])
			} else if value.Valid {
				t.AuthorID = int(value.Int64)
			}
		case task.FieldAuthorName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author_name", values[i])
			} else if value.Valid {
				t.AuthorName = value.String
			}
		case task.FieldRefImages:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field ref_images", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.RefImages); err != nil {
					return fmt.Errorf("unmarshal field ref_images: %w", err)
				}
			}
		case task.FieldStore:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field store", values[i])
			} else if value.Valid {
				t.Store = value.String
			}
		case task.FieldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count", values[i])
			} else if value.Valid {
				t.Count = int(value.Int64)
			}
		case task.FieldHasExcellent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_excellent", values[i])
			} else if value.Valid {
				t.HasExcellent = value.Bool
			}
		case task.FieldExtra:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extra", values[i])
			} else if value.Valid {
				t.Extra = value.String
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Task.
// This includes values selected through modifiers, order, etc.
func (t *Task) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// Update returns a builder for updating this Task.
// Note that you need to call Task.Unwrap() before calling this method if this Task
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Task) Update() *TaskUpdateOne {
	return NewTaskClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Task entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Task) Unwrap() *Task {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Task is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Task) String() string {
	var builder strings.Builder
	builder.WriteString("Task(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("create_time=")
	builder.WriteString(t.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(t.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := t.DeleteTime; v != nil {
		builder.WriteString("delete_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("prompt=")
	builder.WriteString(t.Prompt)
	builder.WriteString(", ")
	builder.WriteString("negative_prompt=")
	builder.WriteString(t.NegativePrompt)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(t.Category)
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(fmt.Sprintf("%v", t.Weight))
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(fmt.Sprintf("%v", t.Height))
	builder.WriteString(", ")
	builder.WriteString("img_size=")
	builder.WriteString(t.ImgSize)
	builder.WriteString(", ")
	builder.WriteString("seed=")
	builder.WriteString(t.Seed)
	builder.WriteString(", ")
	builder.WriteString("sampler_name=")
	builder.WriteString(t.SamplerName)
	builder.WriteString(", ")
	builder.WriteString("steps=")
	builder.WriteString(fmt.Sprintf("%v", t.Steps))
	builder.WriteString(", ")
	builder.WriteString("cfg_scale=")
	builder.WriteString(fmt.Sprintf("%v", t.CfgScale))
	builder.WriteString(", ")
	builder.WriteString("batch_size=")
	builder.WriteString(fmt.Sprintf("%v", t.BatchSize))
	builder.WriteString(", ")
	builder.WriteString("total=")
	builder.WriteString(fmt.Sprintf("%v", t.Total))
	builder.WriteString(", ")
	builder.WriteString("sd_model_name=")
	builder.WriteString(t.SdModelName)
	builder.WriteString(", ")
	builder.WriteString("sd_model_hash=")
	builder.WriteString(t.SdModelHash)
	builder.WriteString(", ")
	builder.WriteString("sd_vae_name=")
	builder.WriteString(t.SdVaeName)
	builder.WriteString(", ")
	builder.WriteString("sd_vae_hash=")
	builder.WriteString(t.SdVaeHash)
	builder.WriteString(", ")
	builder.WriteString("job_timestamp=")
	builder.WriteString(t.JobTimestamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(t.Version)
	builder.WriteString(", ")
	builder.WriteString("grid_image_url=")
	builder.WriteString(t.GridImageURL)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(t.Status)
	builder.WriteString(", ")
	builder.WriteString("author_id=")
	builder.WriteString(fmt.Sprintf("%v", t.AuthorID))
	builder.WriteString(", ")
	builder.WriteString("author_name=")
	builder.WriteString(t.AuthorName)
	builder.WriteString(", ")
	builder.WriteString("ref_images=")
	builder.WriteString(fmt.Sprintf("%v", t.RefImages))
	builder.WriteString(", ")
	builder.WriteString("store=")
	builder.WriteString(t.Store)
	builder.WriteString(", ")
	builder.WriteString("count=")
	builder.WriteString(fmt.Sprintf("%v", t.Count))
	builder.WriteString(", ")
	builder.WriteString("has_excellent=")
	builder.WriteString(fmt.Sprintf("%v", t.HasExcellent))
	builder.WriteString(", ")
	builder.WriteString("extra=")
	builder.WriteString(t.Extra)
	builder.WriteByte(')')
	return builder.String()
}

// Tasks is a parsable slice of Task.
type Tasks []*Task
