// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ai-gallery/ent/baseschema"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BaseSchemaCreate is the builder for creating a BaseSchema entity.
type BaseSchemaCreate struct {
	config
	mutation *BaseSchemaMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (bsc *BaseSchemaCreate) SetCreateTime(t time.Time) *BaseSchemaCreate {
	bsc.mutation.SetCreateTime(t)
	return bsc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (bsc *BaseSchemaCreate) SetNillableCreateTime(t *time.Time) *BaseSchemaCreate {
	if t != nil {
		bsc.SetCreateTime(*t)
	}
	return bsc
}

// SetUpdateTime sets the "update_time" field.
func (bsc *BaseSchemaCreate) SetUpdateTime(t time.Time) *BaseSchemaCreate {
	bsc.mutation.SetUpdateTime(t)
	return bsc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (bsc *BaseSchemaCreate) SetNillableUpdateTime(t *time.Time) *BaseSchemaCreate {
	if t != nil {
		bsc.SetUpdateTime(*t)
	}
	return bsc
}

// SetDeleteTime sets the "delete_time" field.
func (bsc *BaseSchemaCreate) SetDeleteTime(t time.Time) *BaseSchemaCreate {
	bsc.mutation.SetDeleteTime(t)
	return bsc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (bsc *BaseSchemaCreate) SetNillableDeleteTime(t *time.Time) *BaseSchemaCreate {
	if t != nil {
		bsc.SetDeleteTime(*t)
	}
	return bsc
}

// Mutation returns the BaseSchemaMutation object of the builder.
func (bsc *BaseSchemaCreate) Mutation() *BaseSchemaMutation {
	return bsc.mutation
}

// Save creates the BaseSchema in the database.
func (bsc *BaseSchemaCreate) Save(ctx context.Context) (*BaseSchema, error) {
	bsc.defaults()
	return withHooks(ctx, bsc.sqlSave, bsc.mutation, bsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bsc *BaseSchemaCreate) SaveX(ctx context.Context) *BaseSchema {
	v, err := bsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bsc *BaseSchemaCreate) Exec(ctx context.Context) error {
	_, err := bsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsc *BaseSchemaCreate) ExecX(ctx context.Context) {
	if err := bsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bsc *BaseSchemaCreate) defaults() {
	if _, ok := bsc.mutation.CreateTime(); !ok {
		v := baseschema.DefaultCreateTime()
		bsc.mutation.SetCreateTime(v)
	}
	if _, ok := bsc.mutation.UpdateTime(); !ok {
		v := baseschema.DefaultUpdateTime()
		bsc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bsc *BaseSchemaCreate) check() error {
	if _, ok := bsc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "BaseSchema.create_time"`)}
	}
	if _, ok := bsc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "BaseSchema.update_time"`)}
	}
	return nil
}

func (bsc *BaseSchemaCreate) sqlSave(ctx context.Context) (*BaseSchema, error) {
	if err := bsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bsc.mutation.id = &_node.ID
	bsc.mutation.done = true
	return _node, nil
}

func (bsc *BaseSchemaCreate) createSpec() (*BaseSchema, *sqlgraph.CreateSpec) {
	var (
		_node = &BaseSchema{config: bsc.config}
		_spec = sqlgraph.NewCreateSpec(baseschema.Table, sqlgraph.NewFieldSpec(baseschema.FieldID, field.TypeInt))
	)
	_spec.OnConflict = bsc.conflict
	if value, ok := bsc.mutation.CreateTime(); ok {
		_spec.SetField(baseschema.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := bsc.mutation.UpdateTime(); ok {
		_spec.SetField(baseschema.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := bsc.mutation.DeleteTime(); ok {
		_spec.SetField(baseschema.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BaseSchema.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BaseSchemaUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (bsc *BaseSchemaCreate) OnConflict(opts ...sql.ConflictOption) *BaseSchemaUpsertOne {
	bsc.conflict = opts
	return &BaseSchemaUpsertOne{
		create: bsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BaseSchema.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bsc *BaseSchemaCreate) OnConflictColumns(columns ...string) *BaseSchemaUpsertOne {
	bsc.conflict = append(bsc.conflict, sql.ConflictColumns(columns...))
	return &BaseSchemaUpsertOne{
		create: bsc,
	}
}

type (
	// BaseSchemaUpsertOne is the builder for "upsert"-ing
	//  one BaseSchema node.
	BaseSchemaUpsertOne struct {
		create *BaseSchemaCreate
	}

	// BaseSchemaUpsert is the "OnConflict" setter.
	BaseSchemaUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *BaseSchemaUpsert) SetUpdateTime(v time.Time) *BaseSchemaUpsert {
	u.Set(baseschema.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BaseSchemaUpsert) UpdateUpdateTime() *BaseSchemaUpsert {
	u.SetExcluded(baseschema.FieldUpdateTime)
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *BaseSchemaUpsert) SetDeleteTime(v time.Time) *BaseSchemaUpsert {
	u.Set(baseschema.FieldDeleteTime, v)
	return u
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *BaseSchemaUpsert) UpdateDeleteTime() *BaseSchemaUpsert {
	u.SetExcluded(baseschema.FieldDeleteTime)
	return u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *BaseSchemaUpsert) ClearDeleteTime() *BaseSchemaUpsert {
	u.SetNull(baseschema.FieldDeleteTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BaseSchema.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BaseSchemaUpsertOne) UpdateNewValues() *BaseSchemaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(baseschema.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BaseSchema.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BaseSchemaUpsertOne) Ignore() *BaseSchemaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BaseSchemaUpsertOne) DoNothing() *BaseSchemaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BaseSchemaCreate.OnConflict
// documentation for more info.
func (u *BaseSchemaUpsertOne) Update(set func(*BaseSchemaUpsert)) *BaseSchemaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BaseSchemaUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *BaseSchemaUpsertOne) SetUpdateTime(v time.Time) *BaseSchemaUpsertOne {
	return u.Update(func(s *BaseSchemaUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BaseSchemaUpsertOne) UpdateUpdateTime() *BaseSchemaUpsertOne {
	return u.Update(func(s *BaseSchemaUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *BaseSchemaUpsertOne) SetDeleteTime(v time.Time) *BaseSchemaUpsertOne {
	return u.Update(func(s *BaseSchemaUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *BaseSchemaUpsertOne) UpdateDeleteTime() *BaseSchemaUpsertOne {
	return u.Update(func(s *BaseSchemaUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *BaseSchemaUpsertOne) ClearDeleteTime() *BaseSchemaUpsertOne {
	return u.Update(func(s *BaseSchemaUpsert) {
		s.ClearDeleteTime()
	})
}

// Exec executes the query.
func (u *BaseSchemaUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BaseSchemaCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BaseSchemaUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BaseSchemaUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BaseSchemaUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BaseSchemaCreateBulk is the builder for creating many BaseSchema entities in bulk.
type BaseSchemaCreateBulk struct {
	config
	err      error
	builders []*BaseSchemaCreate
	conflict []sql.ConflictOption
}

// Save creates the BaseSchema entities in the database.
func (bscb *BaseSchemaCreateBulk) Save(ctx context.Context) ([]*BaseSchema, error) {
	if bscb.err != nil {
		return nil, bscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bscb.builders))
	nodes := make([]*BaseSchema, len(bscb.builders))
	mutators := make([]Mutator, len(bscb.builders))
	for i := range bscb.builders {
		func(i int, root context.Context) {
			builder := bscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BaseSchemaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bscb *BaseSchemaCreateBulk) SaveX(ctx context.Context) []*BaseSchema {
	v, err := bscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bscb *BaseSchemaCreateBulk) Exec(ctx context.Context) error {
	_, err := bscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bscb *BaseSchemaCreateBulk) ExecX(ctx context.Context) {
	if err := bscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BaseSchema.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BaseSchemaUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (bscb *BaseSchemaCreateBulk) OnConflict(opts ...sql.ConflictOption) *BaseSchemaUpsertBulk {
	bscb.conflict = opts
	return &BaseSchemaUpsertBulk{
		create: bscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BaseSchema.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bscb *BaseSchemaCreateBulk) OnConflictColumns(columns ...string) *BaseSchemaUpsertBulk {
	bscb.conflict = append(bscb.conflict, sql.ConflictColumns(columns...))
	return &BaseSchemaUpsertBulk{
		create: bscb,
	}
}

// BaseSchemaUpsertBulk is the builder for "upsert"-ing
// a bulk of BaseSchema nodes.
type BaseSchemaUpsertBulk struct {
	create *BaseSchemaCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BaseSchema.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BaseSchemaUpsertBulk) UpdateNewValues() *BaseSchemaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(baseschema.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BaseSchema.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BaseSchemaUpsertBulk) Ignore() *BaseSchemaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BaseSchemaUpsertBulk) DoNothing() *BaseSchemaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BaseSchemaCreateBulk.OnConflict
// documentation for more info.
func (u *BaseSchemaUpsertBulk) Update(set func(*BaseSchemaUpsert)) *BaseSchemaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BaseSchemaUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *BaseSchemaUpsertBulk) SetUpdateTime(v time.Time) *BaseSchemaUpsertBulk {
	return u.Update(func(s *BaseSchemaUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BaseSchemaUpsertBulk) UpdateUpdateTime() *BaseSchemaUpsertBulk {
	return u.Update(func(s *BaseSchemaUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *BaseSchemaUpsertBulk) SetDeleteTime(v time.Time) *BaseSchemaUpsertBulk {
	return u.Update(func(s *BaseSchemaUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *BaseSchemaUpsertBulk) UpdateDeleteTime() *BaseSchemaUpsertBulk {
	return u.Update(func(s *BaseSchemaUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *BaseSchemaUpsertBulk) ClearDeleteTime() *BaseSchemaUpsertBulk {
	return u.Update(func(s *BaseSchemaUpsert) {
		s.ClearDeleteTime()
	})
}

// Exec executes the query.
func (u *BaseSchemaUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BaseSchemaCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BaseSchemaCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BaseSchemaUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
