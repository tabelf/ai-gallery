// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ai-gallery/ent/predicate"
	"ai-gallery/ent/task"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdateTime sets the "update_time" field.
func (tu *TaskUpdate) SetUpdateTime(t time.Time) *TaskUpdate {
	tu.mutation.SetUpdateTime(t)
	return tu
}

// SetDeleteTime sets the "delete_time" field.
func (tu *TaskUpdate) SetDeleteTime(t time.Time) *TaskUpdate {
	tu.mutation.SetDeleteTime(t)
	return tu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDeleteTime(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetDeleteTime(*t)
	}
	return tu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (tu *TaskUpdate) ClearDeleteTime() *TaskUpdate {
	tu.mutation.ClearDeleteTime()
	return tu
}

// SetPrompt sets the "prompt" field.
func (tu *TaskUpdate) SetPrompt(s string) *TaskUpdate {
	tu.mutation.SetPrompt(s)
	return tu
}

// SetNillablePrompt sets the "prompt" field if the given value is not nil.
func (tu *TaskUpdate) SetNillablePrompt(s *string) *TaskUpdate {
	if s != nil {
		tu.SetPrompt(*s)
	}
	return tu
}

// ClearPrompt clears the value of the "prompt" field.
func (tu *TaskUpdate) ClearPrompt() *TaskUpdate {
	tu.mutation.ClearPrompt()
	return tu
}

// SetNegativePrompt sets the "negative_prompt" field.
func (tu *TaskUpdate) SetNegativePrompt(s string) *TaskUpdate {
	tu.mutation.SetNegativePrompt(s)
	return tu
}

// SetNillableNegativePrompt sets the "negative_prompt" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableNegativePrompt(s *string) *TaskUpdate {
	if s != nil {
		tu.SetNegativePrompt(*s)
	}
	return tu
}

// ClearNegativePrompt clears the value of the "negative_prompt" field.
func (tu *TaskUpdate) ClearNegativePrompt() *TaskUpdate {
	tu.mutation.ClearNegativePrompt()
	return tu
}

// SetCategory sets the "category" field.
func (tu *TaskUpdate) SetCategory(s string) *TaskUpdate {
	tu.mutation.SetCategory(s)
	return tu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCategory(s *string) *TaskUpdate {
	if s != nil {
		tu.SetCategory(*s)
	}
	return tu
}

// ClearCategory clears the value of the "category" field.
func (tu *TaskUpdate) ClearCategory() *TaskUpdate {
	tu.mutation.ClearCategory()
	return tu
}

// SetWeight sets the "weight" field.
func (tu *TaskUpdate) SetWeight(f float32) *TaskUpdate {
	tu.mutation.ResetWeight()
	tu.mutation.SetWeight(f)
	return tu
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableWeight(f *float32) *TaskUpdate {
	if f != nil {
		tu.SetWeight(*f)
	}
	return tu
}

// AddWeight adds f to the "weight" field.
func (tu *TaskUpdate) AddWeight(f float32) *TaskUpdate {
	tu.mutation.AddWeight(f)
	return tu
}

// ClearWeight clears the value of the "weight" field.
func (tu *TaskUpdate) ClearWeight() *TaskUpdate {
	tu.mutation.ClearWeight()
	return tu
}

// SetHeight sets the "height" field.
func (tu *TaskUpdate) SetHeight(f float32) *TaskUpdate {
	tu.mutation.ResetHeight()
	tu.mutation.SetHeight(f)
	return tu
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableHeight(f *float32) *TaskUpdate {
	if f != nil {
		tu.SetHeight(*f)
	}
	return tu
}

// AddHeight adds f to the "height" field.
func (tu *TaskUpdate) AddHeight(f float32) *TaskUpdate {
	tu.mutation.AddHeight(f)
	return tu
}

// ClearHeight clears the value of the "height" field.
func (tu *TaskUpdate) ClearHeight() *TaskUpdate {
	tu.mutation.ClearHeight()
	return tu
}

// SetImgSize sets the "img_size" field.
func (tu *TaskUpdate) SetImgSize(s string) *TaskUpdate {
	tu.mutation.SetImgSize(s)
	return tu
}

// SetNillableImgSize sets the "img_size" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableImgSize(s *string) *TaskUpdate {
	if s != nil {
		tu.SetImgSize(*s)
	}
	return tu
}

// ClearImgSize clears the value of the "img_size" field.
func (tu *TaskUpdate) ClearImgSize() *TaskUpdate {
	tu.mutation.ClearImgSize()
	return tu
}

// SetSeed sets the "seed" field.
func (tu *TaskUpdate) SetSeed(s string) *TaskUpdate {
	tu.mutation.SetSeed(s)
	return tu
}

// SetNillableSeed sets the "seed" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableSeed(s *string) *TaskUpdate {
	if s != nil {
		tu.SetSeed(*s)
	}
	return tu
}

// ClearSeed clears the value of the "seed" field.
func (tu *TaskUpdate) ClearSeed() *TaskUpdate {
	tu.mutation.ClearSeed()
	return tu
}

// SetSamplerName sets the "sampler_name" field.
func (tu *TaskUpdate) SetSamplerName(s string) *TaskUpdate {
	tu.mutation.SetSamplerName(s)
	return tu
}

// SetNillableSamplerName sets the "sampler_name" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableSamplerName(s *string) *TaskUpdate {
	if s != nil {
		tu.SetSamplerName(*s)
	}
	return tu
}

// ClearSamplerName clears the value of the "sampler_name" field.
func (tu *TaskUpdate) ClearSamplerName() *TaskUpdate {
	tu.mutation.ClearSamplerName()
	return tu
}

// SetSteps sets the "steps" field.
func (tu *TaskUpdate) SetSteps(i int) *TaskUpdate {
	tu.mutation.ResetSteps()
	tu.mutation.SetSteps(i)
	return tu
}

// SetNillableSteps sets the "steps" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableSteps(i *int) *TaskUpdate {
	if i != nil {
		tu.SetSteps(*i)
	}
	return tu
}

// AddSteps adds i to the "steps" field.
func (tu *TaskUpdate) AddSteps(i int) *TaskUpdate {
	tu.mutation.AddSteps(i)
	return tu
}

// ClearSteps clears the value of the "steps" field.
func (tu *TaskUpdate) ClearSteps() *TaskUpdate {
	tu.mutation.ClearSteps()
	return tu
}

// SetCfgScale sets the "cfg_scale" field.
func (tu *TaskUpdate) SetCfgScale(i int) *TaskUpdate {
	tu.mutation.ResetCfgScale()
	tu.mutation.SetCfgScale(i)
	return tu
}

// SetNillableCfgScale sets the "cfg_scale" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCfgScale(i *int) *TaskUpdate {
	if i != nil {
		tu.SetCfgScale(*i)
	}
	return tu
}

// AddCfgScale adds i to the "cfg_scale" field.
func (tu *TaskUpdate) AddCfgScale(i int) *TaskUpdate {
	tu.mutation.AddCfgScale(i)
	return tu
}

// ClearCfgScale clears the value of the "cfg_scale" field.
func (tu *TaskUpdate) ClearCfgScale() *TaskUpdate {
	tu.mutation.ClearCfgScale()
	return tu
}

// SetBatchSize sets the "batch_size" field.
func (tu *TaskUpdate) SetBatchSize(i int) *TaskUpdate {
	tu.mutation.ResetBatchSize()
	tu.mutation.SetBatchSize(i)
	return tu
}

// SetNillableBatchSize sets the "batch_size" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableBatchSize(i *int) *TaskUpdate {
	if i != nil {
		tu.SetBatchSize(*i)
	}
	return tu
}

// AddBatchSize adds i to the "batch_size" field.
func (tu *TaskUpdate) AddBatchSize(i int) *TaskUpdate {
	tu.mutation.AddBatchSize(i)
	return tu
}

// ClearBatchSize clears the value of the "batch_size" field.
func (tu *TaskUpdate) ClearBatchSize() *TaskUpdate {
	tu.mutation.ClearBatchSize()
	return tu
}

// SetTotal sets the "total" field.
func (tu *TaskUpdate) SetTotal(i int) *TaskUpdate {
	tu.mutation.ResetTotal()
	tu.mutation.SetTotal(i)
	return tu
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTotal(i *int) *TaskUpdate {
	if i != nil {
		tu.SetTotal(*i)
	}
	return tu
}

// AddTotal adds i to the "total" field.
func (tu *TaskUpdate) AddTotal(i int) *TaskUpdate {
	tu.mutation.AddTotal(i)
	return tu
}

// ClearTotal clears the value of the "total" field.
func (tu *TaskUpdate) ClearTotal() *TaskUpdate {
	tu.mutation.ClearTotal()
	return tu
}

// SetSdModelName sets the "sd_model_name" field.
func (tu *TaskUpdate) SetSdModelName(s string) *TaskUpdate {
	tu.mutation.SetSdModelName(s)
	return tu
}

// SetNillableSdModelName sets the "sd_model_name" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableSdModelName(s *string) *TaskUpdate {
	if s != nil {
		tu.SetSdModelName(*s)
	}
	return tu
}

// ClearSdModelName clears the value of the "sd_model_name" field.
func (tu *TaskUpdate) ClearSdModelName() *TaskUpdate {
	tu.mutation.ClearSdModelName()
	return tu
}

// SetSdModelHash sets the "sd_model_hash" field.
func (tu *TaskUpdate) SetSdModelHash(s string) *TaskUpdate {
	tu.mutation.SetSdModelHash(s)
	return tu
}

// SetNillableSdModelHash sets the "sd_model_hash" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableSdModelHash(s *string) *TaskUpdate {
	if s != nil {
		tu.SetSdModelHash(*s)
	}
	return tu
}

// ClearSdModelHash clears the value of the "sd_model_hash" field.
func (tu *TaskUpdate) ClearSdModelHash() *TaskUpdate {
	tu.mutation.ClearSdModelHash()
	return tu
}

// SetSdVaeName sets the "sd_vae_name" field.
func (tu *TaskUpdate) SetSdVaeName(s string) *TaskUpdate {
	tu.mutation.SetSdVaeName(s)
	return tu
}

// SetNillableSdVaeName sets the "sd_vae_name" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableSdVaeName(s *string) *TaskUpdate {
	if s != nil {
		tu.SetSdVaeName(*s)
	}
	return tu
}

// ClearSdVaeName clears the value of the "sd_vae_name" field.
func (tu *TaskUpdate) ClearSdVaeName() *TaskUpdate {
	tu.mutation.ClearSdVaeName()
	return tu
}

// SetSdVaeHash sets the "sd_vae_hash" field.
func (tu *TaskUpdate) SetSdVaeHash(s string) *TaskUpdate {
	tu.mutation.SetSdVaeHash(s)
	return tu
}

// SetNillableSdVaeHash sets the "sd_vae_hash" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableSdVaeHash(s *string) *TaskUpdate {
	if s != nil {
		tu.SetSdVaeHash(*s)
	}
	return tu
}

// ClearSdVaeHash clears the value of the "sd_vae_hash" field.
func (tu *TaskUpdate) ClearSdVaeHash() *TaskUpdate {
	tu.mutation.ClearSdVaeHash()
	return tu
}

// SetJobTimestamp sets the "job_timestamp" field.
func (tu *TaskUpdate) SetJobTimestamp(t time.Time) *TaskUpdate {
	tu.mutation.SetJobTimestamp(t)
	return tu
}

// SetNillableJobTimestamp sets the "job_timestamp" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableJobTimestamp(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetJobTimestamp(*t)
	}
	return tu
}

// ClearJobTimestamp clears the value of the "job_timestamp" field.
func (tu *TaskUpdate) ClearJobTimestamp() *TaskUpdate {
	tu.mutation.ClearJobTimestamp()
	return tu
}

// SetVersion sets the "version" field.
func (tu *TaskUpdate) SetVersion(s string) *TaskUpdate {
	tu.mutation.SetVersion(s)
	return tu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableVersion(s *string) *TaskUpdate {
	if s != nil {
		tu.SetVersion(*s)
	}
	return tu
}

// ClearVersion clears the value of the "version" field.
func (tu *TaskUpdate) ClearVersion() *TaskUpdate {
	tu.mutation.ClearVersion()
	return tu
}

// SetGridImageURL sets the "grid_image_url" field.
func (tu *TaskUpdate) SetGridImageURL(s string) *TaskUpdate {
	tu.mutation.SetGridImageURL(s)
	return tu
}

// SetNillableGridImageURL sets the "grid_image_url" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableGridImageURL(s *string) *TaskUpdate {
	if s != nil {
		tu.SetGridImageURL(*s)
	}
	return tu
}

// ClearGridImageURL clears the value of the "grid_image_url" field.
func (tu *TaskUpdate) ClearGridImageURL() *TaskUpdate {
	tu.mutation.ClearGridImageURL()
	return tu
}

// SetStatus sets the "status" field.
func (tu *TaskUpdate) SetStatus(s string) *TaskUpdate {
	tu.mutation.SetStatus(s)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableStatus(s *string) *TaskUpdate {
	if s != nil {
		tu.SetStatus(*s)
	}
	return tu
}

// ClearStatus clears the value of the "status" field.
func (tu *TaskUpdate) ClearStatus() *TaskUpdate {
	tu.mutation.ClearStatus()
	return tu
}

// SetAuthorID sets the "author_id" field.
func (tu *TaskUpdate) SetAuthorID(i int) *TaskUpdate {
	tu.mutation.ResetAuthorID()
	tu.mutation.SetAuthorID(i)
	return tu
}

// SetNillableAuthorID sets the "author_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableAuthorID(i *int) *TaskUpdate {
	if i != nil {
		tu.SetAuthorID(*i)
	}
	return tu
}

// AddAuthorID adds i to the "author_id" field.
func (tu *TaskUpdate) AddAuthorID(i int) *TaskUpdate {
	tu.mutation.AddAuthorID(i)
	return tu
}

// ClearAuthorID clears the value of the "author_id" field.
func (tu *TaskUpdate) ClearAuthorID() *TaskUpdate {
	tu.mutation.ClearAuthorID()
	return tu
}

// SetAuthorName sets the "author_name" field.
func (tu *TaskUpdate) SetAuthorName(s string) *TaskUpdate {
	tu.mutation.SetAuthorName(s)
	return tu
}

// SetNillableAuthorName sets the "author_name" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableAuthorName(s *string) *TaskUpdate {
	if s != nil {
		tu.SetAuthorName(*s)
	}
	return tu
}

// ClearAuthorName clears the value of the "author_name" field.
func (tu *TaskUpdate) ClearAuthorName() *TaskUpdate {
	tu.mutation.ClearAuthorName()
	return tu
}

// SetRefImages sets the "ref_images" field.
func (tu *TaskUpdate) SetRefImages(s []string) *TaskUpdate {
	tu.mutation.SetRefImages(s)
	return tu
}

// AppendRefImages appends s to the "ref_images" field.
func (tu *TaskUpdate) AppendRefImages(s []string) *TaskUpdate {
	tu.mutation.AppendRefImages(s)
	return tu
}

// ClearRefImages clears the value of the "ref_images" field.
func (tu *TaskUpdate) ClearRefImages() *TaskUpdate {
	tu.mutation.ClearRefImages()
	return tu
}

// SetStore sets the "store" field.
func (tu *TaskUpdate) SetStore(s string) *TaskUpdate {
	tu.mutation.SetStore(s)
	return tu
}

// SetNillableStore sets the "store" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableStore(s *string) *TaskUpdate {
	if s != nil {
		tu.SetStore(*s)
	}
	return tu
}

// ClearStore clears the value of the "store" field.
func (tu *TaskUpdate) ClearStore() *TaskUpdate {
	tu.mutation.ClearStore()
	return tu
}

// SetCount sets the "count" field.
func (tu *TaskUpdate) SetCount(i int) *TaskUpdate {
	tu.mutation.ResetCount()
	tu.mutation.SetCount(i)
	return tu
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCount(i *int) *TaskUpdate {
	if i != nil {
		tu.SetCount(*i)
	}
	return tu
}

// AddCount adds i to the "count" field.
func (tu *TaskUpdate) AddCount(i int) *TaskUpdate {
	tu.mutation.AddCount(i)
	return tu
}

// ClearCount clears the value of the "count" field.
func (tu *TaskUpdate) ClearCount() *TaskUpdate {
	tu.mutation.ClearCount()
	return tu
}

// SetHasExcellent sets the "has_excellent" field.
func (tu *TaskUpdate) SetHasExcellent(b bool) *TaskUpdate {
	tu.mutation.SetHasExcellent(b)
	return tu
}

// SetNillableHasExcellent sets the "has_excellent" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableHasExcellent(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetHasExcellent(*b)
	}
	return tu
}

// ClearHasExcellent clears the value of the "has_excellent" field.
func (tu *TaskUpdate) ClearHasExcellent() *TaskUpdate {
	tu.mutation.ClearHasExcellent()
	return tu
}

// SetExtra sets the "extra" field.
func (tu *TaskUpdate) SetExtra(s string) *TaskUpdate {
	tu.mutation.SetExtra(s)
	return tu
}

// SetNillableExtra sets the "extra" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableExtra(s *string) *TaskUpdate {
	if s != nil {
		tu.SetExtra(*s)
	}
	return tu
}

// ClearExtra clears the value of the "extra" field.
func (tu *TaskUpdate) ClearExtra() *TaskUpdate {
	tu.mutation.ClearExtra()
	return tu
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TaskUpdate) defaults() {
	if _, ok := tu.mutation.UpdateTime(); !ok {
		v := task.UpdateDefaultUpdateTime()
		tu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TaskUpdate) check() error {
	if v, ok := tu.mutation.Category(); ok {
		if err := task.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Task.category": %w`, err)}
		}
	}
	if v, ok := tu.mutation.ImgSize(); ok {
		if err := task.ImgSizeValidator(v); err != nil {
			return &ValidationError{Name: "img_size", err: fmt.Errorf(`ent: validator failed for field "Task.img_size": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Seed(); ok {
		if err := task.SeedValidator(v); err != nil {
			return &ValidationError{Name: "seed", err: fmt.Errorf(`ent: validator failed for field "Task.seed": %w`, err)}
		}
	}
	if v, ok := tu.mutation.SamplerName(); ok {
		if err := task.SamplerNameValidator(v); err != nil {
			return &ValidationError{Name: "sampler_name", err: fmt.Errorf(`ent: validator failed for field "Task.sampler_name": %w`, err)}
		}
	}
	if v, ok := tu.mutation.SdModelName(); ok {
		if err := task.SdModelNameValidator(v); err != nil {
			return &ValidationError{Name: "sd_model_name", err: fmt.Errorf(`ent: validator failed for field "Task.sd_model_name": %w`, err)}
		}
	}
	if v, ok := tu.mutation.SdModelHash(); ok {
		if err := task.SdModelHashValidator(v); err != nil {
			return &ValidationError{Name: "sd_model_hash", err: fmt.Errorf(`ent: validator failed for field "Task.sd_model_hash": %w`, err)}
		}
	}
	if v, ok := tu.mutation.SdVaeName(); ok {
		if err := task.SdVaeNameValidator(v); err != nil {
			return &ValidationError{Name: "sd_vae_name", err: fmt.Errorf(`ent: validator failed for field "Task.sd_vae_name": %w`, err)}
		}
	}
	if v, ok := tu.mutation.SdVaeHash(); ok {
		if err := task.SdVaeHashValidator(v); err != nil {
			return &ValidationError{Name: "sd_vae_hash", err: fmt.Errorf(`ent: validator failed for field "Task.sd_vae_hash": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Version(); ok {
		if err := task.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "Task.version": %w`, err)}
		}
	}
	if v, ok := tu.mutation.GridImageURL(); ok {
		if err := task.GridImageURLValidator(v); err != nil {
			return &ValidationError{Name: "grid_image_url", err: fmt.Errorf(`ent: validator failed for field "Task.grid_image_url": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Task.status": %w`, err)}
		}
	}
	if v, ok := tu.mutation.AuthorName(); ok {
		if err := task.AuthorNameValidator(v); err != nil {
			return &ValidationError{Name: "author_name", err: fmt.Errorf(`ent: validator failed for field "Task.author_name": %w`, err)}
		}
	}
	return nil
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.UpdateTime(); ok {
		_spec.SetField(task.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := tu.mutation.DeleteTime(); ok {
		_spec.SetField(task.FieldDeleteTime, field.TypeTime, value)
	}
	if tu.mutation.DeleteTimeCleared() {
		_spec.ClearField(task.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := tu.mutation.Prompt(); ok {
		_spec.SetField(task.FieldPrompt, field.TypeString, value)
	}
	if tu.mutation.PromptCleared() {
		_spec.ClearField(task.FieldPrompt, field.TypeString)
	}
	if value, ok := tu.mutation.NegativePrompt(); ok {
		_spec.SetField(task.FieldNegativePrompt, field.TypeString, value)
	}
	if tu.mutation.NegativePromptCleared() {
		_spec.ClearField(task.FieldNegativePrompt, field.TypeString)
	}
	if value, ok := tu.mutation.Category(); ok {
		_spec.SetField(task.FieldCategory, field.TypeString, value)
	}
	if tu.mutation.CategoryCleared() {
		_spec.ClearField(task.FieldCategory, field.TypeString)
	}
	if value, ok := tu.mutation.Weight(); ok {
		_spec.SetField(task.FieldWeight, field.TypeFloat32, value)
	}
	if value, ok := tu.mutation.AddedWeight(); ok {
		_spec.AddField(task.FieldWeight, field.TypeFloat32, value)
	}
	if tu.mutation.WeightCleared() {
		_spec.ClearField(task.FieldWeight, field.TypeFloat32)
	}
	if value, ok := tu.mutation.Height(); ok {
		_spec.SetField(task.FieldHeight, field.TypeFloat32, value)
	}
	if value, ok := tu.mutation.AddedHeight(); ok {
		_spec.AddField(task.FieldHeight, field.TypeFloat32, value)
	}
	if tu.mutation.HeightCleared() {
		_spec.ClearField(task.FieldHeight, field.TypeFloat32)
	}
	if value, ok := tu.mutation.ImgSize(); ok {
		_spec.SetField(task.FieldImgSize, field.TypeString, value)
	}
	if tu.mutation.ImgSizeCleared() {
		_spec.ClearField(task.FieldImgSize, field.TypeString)
	}
	if value, ok := tu.mutation.Seed(); ok {
		_spec.SetField(task.FieldSeed, field.TypeString, value)
	}
	if tu.mutation.SeedCleared() {
		_spec.ClearField(task.FieldSeed, field.TypeString)
	}
	if value, ok := tu.mutation.SamplerName(); ok {
		_spec.SetField(task.FieldSamplerName, field.TypeString, value)
	}
	if tu.mutation.SamplerNameCleared() {
		_spec.ClearField(task.FieldSamplerName, field.TypeString)
	}
	if value, ok := tu.mutation.Steps(); ok {
		_spec.SetField(task.FieldSteps, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedSteps(); ok {
		_spec.AddField(task.FieldSteps, field.TypeInt, value)
	}
	if tu.mutation.StepsCleared() {
		_spec.ClearField(task.FieldSteps, field.TypeInt)
	}
	if value, ok := tu.mutation.CfgScale(); ok {
		_spec.SetField(task.FieldCfgScale, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedCfgScale(); ok {
		_spec.AddField(task.FieldCfgScale, field.TypeInt, value)
	}
	if tu.mutation.CfgScaleCleared() {
		_spec.ClearField(task.FieldCfgScale, field.TypeInt)
	}
	if value, ok := tu.mutation.BatchSize(); ok {
		_spec.SetField(task.FieldBatchSize, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedBatchSize(); ok {
		_spec.AddField(task.FieldBatchSize, field.TypeInt, value)
	}
	if tu.mutation.BatchSizeCleared() {
		_spec.ClearField(task.FieldBatchSize, field.TypeInt)
	}
	if value, ok := tu.mutation.Total(); ok {
		_spec.SetField(task.FieldTotal, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedTotal(); ok {
		_spec.AddField(task.FieldTotal, field.TypeInt, value)
	}
	if tu.mutation.TotalCleared() {
		_spec.ClearField(task.FieldTotal, field.TypeInt)
	}
	if value, ok := tu.mutation.SdModelName(); ok {
		_spec.SetField(task.FieldSdModelName, field.TypeString, value)
	}
	if tu.mutation.SdModelNameCleared() {
		_spec.ClearField(task.FieldSdModelName, field.TypeString)
	}
	if value, ok := tu.mutation.SdModelHash(); ok {
		_spec.SetField(task.FieldSdModelHash, field.TypeString, value)
	}
	if tu.mutation.SdModelHashCleared() {
		_spec.ClearField(task.FieldSdModelHash, field.TypeString)
	}
	if value, ok := tu.mutation.SdVaeName(); ok {
		_spec.SetField(task.FieldSdVaeName, field.TypeString, value)
	}
	if tu.mutation.SdVaeNameCleared() {
		_spec.ClearField(task.FieldSdVaeName, field.TypeString)
	}
	if value, ok := tu.mutation.SdVaeHash(); ok {
		_spec.SetField(task.FieldSdVaeHash, field.TypeString, value)
	}
	if tu.mutation.SdVaeHashCleared() {
		_spec.ClearField(task.FieldSdVaeHash, field.TypeString)
	}
	if value, ok := tu.mutation.JobTimestamp(); ok {
		_spec.SetField(task.FieldJobTimestamp, field.TypeTime, value)
	}
	if tu.mutation.JobTimestampCleared() {
		_spec.ClearField(task.FieldJobTimestamp, field.TypeTime)
	}
	if value, ok := tu.mutation.Version(); ok {
		_spec.SetField(task.FieldVersion, field.TypeString, value)
	}
	if tu.mutation.VersionCleared() {
		_spec.ClearField(task.FieldVersion, field.TypeString)
	}
	if value, ok := tu.mutation.GridImageURL(); ok {
		_spec.SetField(task.FieldGridImageURL, field.TypeString, value)
	}
	if tu.mutation.GridImageURLCleared() {
		_spec.ClearField(task.FieldGridImageURL, field.TypeString)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeString, value)
	}
	if tu.mutation.StatusCleared() {
		_spec.ClearField(task.FieldStatus, field.TypeString)
	}
	if value, ok := tu.mutation.AuthorID(); ok {
		_spec.SetField(task.FieldAuthorID, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedAuthorID(); ok {
		_spec.AddField(task.FieldAuthorID, field.TypeInt, value)
	}
	if tu.mutation.AuthorIDCleared() {
		_spec.ClearField(task.FieldAuthorID, field.TypeInt)
	}
	if value, ok := tu.mutation.AuthorName(); ok {
		_spec.SetField(task.FieldAuthorName, field.TypeString, value)
	}
	if tu.mutation.AuthorNameCleared() {
		_spec.ClearField(task.FieldAuthorName, field.TypeString)
	}
	if value, ok := tu.mutation.RefImages(); ok {
		_spec.SetField(task.FieldRefImages, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedRefImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, task.FieldRefImages, value)
		})
	}
	if tu.mutation.RefImagesCleared() {
		_spec.ClearField(task.FieldRefImages, field.TypeJSON)
	}
	if value, ok := tu.mutation.Store(); ok {
		_spec.SetField(task.FieldStore, field.TypeString, value)
	}
	if tu.mutation.StoreCleared() {
		_spec.ClearField(task.FieldStore, field.TypeString)
	}
	if value, ok := tu.mutation.Count(); ok {
		_spec.SetField(task.FieldCount, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedCount(); ok {
		_spec.AddField(task.FieldCount, field.TypeInt, value)
	}
	if tu.mutation.CountCleared() {
		_spec.ClearField(task.FieldCount, field.TypeInt)
	}
	if value, ok := tu.mutation.HasExcellent(); ok {
		_spec.SetField(task.FieldHasExcellent, field.TypeBool, value)
	}
	if tu.mutation.HasExcellentCleared() {
		_spec.ClearField(task.FieldHasExcellent, field.TypeBool)
	}
	if value, ok := tu.mutation.Extra(); ok {
		_spec.SetField(task.FieldExtra, field.TypeString, value)
	}
	if tu.mutation.ExtraCleared() {
		_spec.ClearField(task.FieldExtra, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetUpdateTime sets the "update_time" field.
func (tuo *TaskUpdateOne) SetUpdateTime(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetUpdateTime(t)
	return tuo
}

// SetDeleteTime sets the "delete_time" field.
func (tuo *TaskUpdateOne) SetDeleteTime(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetDeleteTime(t)
	return tuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDeleteTime(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetDeleteTime(*t)
	}
	return tuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (tuo *TaskUpdateOne) ClearDeleteTime() *TaskUpdateOne {
	tuo.mutation.ClearDeleteTime()
	return tuo
}

// SetPrompt sets the "prompt" field.
func (tuo *TaskUpdateOne) SetPrompt(s string) *TaskUpdateOne {
	tuo.mutation.SetPrompt(s)
	return tuo
}

// SetNillablePrompt sets the "prompt" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillablePrompt(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetPrompt(*s)
	}
	return tuo
}

// ClearPrompt clears the value of the "prompt" field.
func (tuo *TaskUpdateOne) ClearPrompt() *TaskUpdateOne {
	tuo.mutation.ClearPrompt()
	return tuo
}

// SetNegativePrompt sets the "negative_prompt" field.
func (tuo *TaskUpdateOne) SetNegativePrompt(s string) *TaskUpdateOne {
	tuo.mutation.SetNegativePrompt(s)
	return tuo
}

// SetNillableNegativePrompt sets the "negative_prompt" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableNegativePrompt(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetNegativePrompt(*s)
	}
	return tuo
}

// ClearNegativePrompt clears the value of the "negative_prompt" field.
func (tuo *TaskUpdateOne) ClearNegativePrompt() *TaskUpdateOne {
	tuo.mutation.ClearNegativePrompt()
	return tuo
}

// SetCategory sets the "category" field.
func (tuo *TaskUpdateOne) SetCategory(s string) *TaskUpdateOne {
	tuo.mutation.SetCategory(s)
	return tuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCategory(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetCategory(*s)
	}
	return tuo
}

// ClearCategory clears the value of the "category" field.
func (tuo *TaskUpdateOne) ClearCategory() *TaskUpdateOne {
	tuo.mutation.ClearCategory()
	return tuo
}

// SetWeight sets the "weight" field.
func (tuo *TaskUpdateOne) SetWeight(f float32) *TaskUpdateOne {
	tuo.mutation.ResetWeight()
	tuo.mutation.SetWeight(f)
	return tuo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableWeight(f *float32) *TaskUpdateOne {
	if f != nil {
		tuo.SetWeight(*f)
	}
	return tuo
}

// AddWeight adds f to the "weight" field.
func (tuo *TaskUpdateOne) AddWeight(f float32) *TaskUpdateOne {
	tuo.mutation.AddWeight(f)
	return tuo
}

// ClearWeight clears the value of the "weight" field.
func (tuo *TaskUpdateOne) ClearWeight() *TaskUpdateOne {
	tuo.mutation.ClearWeight()
	return tuo
}

// SetHeight sets the "height" field.
func (tuo *TaskUpdateOne) SetHeight(f float32) *TaskUpdateOne {
	tuo.mutation.ResetHeight()
	tuo.mutation.SetHeight(f)
	return tuo
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableHeight(f *float32) *TaskUpdateOne {
	if f != nil {
		tuo.SetHeight(*f)
	}
	return tuo
}

// AddHeight adds f to the "height" field.
func (tuo *TaskUpdateOne) AddHeight(f float32) *TaskUpdateOne {
	tuo.mutation.AddHeight(f)
	return tuo
}

// ClearHeight clears the value of the "height" field.
func (tuo *TaskUpdateOne) ClearHeight() *TaskUpdateOne {
	tuo.mutation.ClearHeight()
	return tuo
}

// SetImgSize sets the "img_size" field.
func (tuo *TaskUpdateOne) SetImgSize(s string) *TaskUpdateOne {
	tuo.mutation.SetImgSize(s)
	return tuo
}

// SetNillableImgSize sets the "img_size" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableImgSize(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetImgSize(*s)
	}
	return tuo
}

// ClearImgSize clears the value of the "img_size" field.
func (tuo *TaskUpdateOne) ClearImgSize() *TaskUpdateOne {
	tuo.mutation.ClearImgSize()
	return tuo
}

// SetSeed sets the "seed" field.
func (tuo *TaskUpdateOne) SetSeed(s string) *TaskUpdateOne {
	tuo.mutation.SetSeed(s)
	return tuo
}

// SetNillableSeed sets the "seed" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableSeed(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetSeed(*s)
	}
	return tuo
}

// ClearSeed clears the value of the "seed" field.
func (tuo *TaskUpdateOne) ClearSeed() *TaskUpdateOne {
	tuo.mutation.ClearSeed()
	return tuo
}

// SetSamplerName sets the "sampler_name" field.
func (tuo *TaskUpdateOne) SetSamplerName(s string) *TaskUpdateOne {
	tuo.mutation.SetSamplerName(s)
	return tuo
}

// SetNillableSamplerName sets the "sampler_name" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableSamplerName(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetSamplerName(*s)
	}
	return tuo
}

// ClearSamplerName clears the value of the "sampler_name" field.
func (tuo *TaskUpdateOne) ClearSamplerName() *TaskUpdateOne {
	tuo.mutation.ClearSamplerName()
	return tuo
}

// SetSteps sets the "steps" field.
func (tuo *TaskUpdateOne) SetSteps(i int) *TaskUpdateOne {
	tuo.mutation.ResetSteps()
	tuo.mutation.SetSteps(i)
	return tuo
}

// SetNillableSteps sets the "steps" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableSteps(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetSteps(*i)
	}
	return tuo
}

// AddSteps adds i to the "steps" field.
func (tuo *TaskUpdateOne) AddSteps(i int) *TaskUpdateOne {
	tuo.mutation.AddSteps(i)
	return tuo
}

// ClearSteps clears the value of the "steps" field.
func (tuo *TaskUpdateOne) ClearSteps() *TaskUpdateOne {
	tuo.mutation.ClearSteps()
	return tuo
}

// SetCfgScale sets the "cfg_scale" field.
func (tuo *TaskUpdateOne) SetCfgScale(i int) *TaskUpdateOne {
	tuo.mutation.ResetCfgScale()
	tuo.mutation.SetCfgScale(i)
	return tuo
}

// SetNillableCfgScale sets the "cfg_scale" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCfgScale(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetCfgScale(*i)
	}
	return tuo
}

// AddCfgScale adds i to the "cfg_scale" field.
func (tuo *TaskUpdateOne) AddCfgScale(i int) *TaskUpdateOne {
	tuo.mutation.AddCfgScale(i)
	return tuo
}

// ClearCfgScale clears the value of the "cfg_scale" field.
func (tuo *TaskUpdateOne) ClearCfgScale() *TaskUpdateOne {
	tuo.mutation.ClearCfgScale()
	return tuo
}

// SetBatchSize sets the "batch_size" field.
func (tuo *TaskUpdateOne) SetBatchSize(i int) *TaskUpdateOne {
	tuo.mutation.ResetBatchSize()
	tuo.mutation.SetBatchSize(i)
	return tuo
}

// SetNillableBatchSize sets the "batch_size" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableBatchSize(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetBatchSize(*i)
	}
	return tuo
}

// AddBatchSize adds i to the "batch_size" field.
func (tuo *TaskUpdateOne) AddBatchSize(i int) *TaskUpdateOne {
	tuo.mutation.AddBatchSize(i)
	return tuo
}

// ClearBatchSize clears the value of the "batch_size" field.
func (tuo *TaskUpdateOne) ClearBatchSize() *TaskUpdateOne {
	tuo.mutation.ClearBatchSize()
	return tuo
}

// SetTotal sets the "total" field.
func (tuo *TaskUpdateOne) SetTotal(i int) *TaskUpdateOne {
	tuo.mutation.ResetTotal()
	tuo.mutation.SetTotal(i)
	return tuo
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTotal(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetTotal(*i)
	}
	return tuo
}

// AddTotal adds i to the "total" field.
func (tuo *TaskUpdateOne) AddTotal(i int) *TaskUpdateOne {
	tuo.mutation.AddTotal(i)
	return tuo
}

// ClearTotal clears the value of the "total" field.
func (tuo *TaskUpdateOne) ClearTotal() *TaskUpdateOne {
	tuo.mutation.ClearTotal()
	return tuo
}

// SetSdModelName sets the "sd_model_name" field.
func (tuo *TaskUpdateOne) SetSdModelName(s string) *TaskUpdateOne {
	tuo.mutation.SetSdModelName(s)
	return tuo
}

// SetNillableSdModelName sets the "sd_model_name" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableSdModelName(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetSdModelName(*s)
	}
	return tuo
}

// ClearSdModelName clears the value of the "sd_model_name" field.
func (tuo *TaskUpdateOne) ClearSdModelName() *TaskUpdateOne {
	tuo.mutation.ClearSdModelName()
	return tuo
}

// SetSdModelHash sets the "sd_model_hash" field.
func (tuo *TaskUpdateOne) SetSdModelHash(s string) *TaskUpdateOne {
	tuo.mutation.SetSdModelHash(s)
	return tuo
}

// SetNillableSdModelHash sets the "sd_model_hash" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableSdModelHash(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetSdModelHash(*s)
	}
	return tuo
}

// ClearSdModelHash clears the value of the "sd_model_hash" field.
func (tuo *TaskUpdateOne) ClearSdModelHash() *TaskUpdateOne {
	tuo.mutation.ClearSdModelHash()
	return tuo
}

// SetSdVaeName sets the "sd_vae_name" field.
func (tuo *TaskUpdateOne) SetSdVaeName(s string) *TaskUpdateOne {
	tuo.mutation.SetSdVaeName(s)
	return tuo
}

// SetNillableSdVaeName sets the "sd_vae_name" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableSdVaeName(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetSdVaeName(*s)
	}
	return tuo
}

// ClearSdVaeName clears the value of the "sd_vae_name" field.
func (tuo *TaskUpdateOne) ClearSdVaeName() *TaskUpdateOne {
	tuo.mutation.ClearSdVaeName()
	return tuo
}

// SetSdVaeHash sets the "sd_vae_hash" field.
func (tuo *TaskUpdateOne) SetSdVaeHash(s string) *TaskUpdateOne {
	tuo.mutation.SetSdVaeHash(s)
	return tuo
}

// SetNillableSdVaeHash sets the "sd_vae_hash" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableSdVaeHash(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetSdVaeHash(*s)
	}
	return tuo
}

// ClearSdVaeHash clears the value of the "sd_vae_hash" field.
func (tuo *TaskUpdateOne) ClearSdVaeHash() *TaskUpdateOne {
	tuo.mutation.ClearSdVaeHash()
	return tuo
}

// SetJobTimestamp sets the "job_timestamp" field.
func (tuo *TaskUpdateOne) SetJobTimestamp(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetJobTimestamp(t)
	return tuo
}

// SetNillableJobTimestamp sets the "job_timestamp" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableJobTimestamp(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetJobTimestamp(*t)
	}
	return tuo
}

// ClearJobTimestamp clears the value of the "job_timestamp" field.
func (tuo *TaskUpdateOne) ClearJobTimestamp() *TaskUpdateOne {
	tuo.mutation.ClearJobTimestamp()
	return tuo
}

// SetVersion sets the "version" field.
func (tuo *TaskUpdateOne) SetVersion(s string) *TaskUpdateOne {
	tuo.mutation.SetVersion(s)
	return tuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableVersion(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetVersion(*s)
	}
	return tuo
}

// ClearVersion clears the value of the "version" field.
func (tuo *TaskUpdateOne) ClearVersion() *TaskUpdateOne {
	tuo.mutation.ClearVersion()
	return tuo
}

// SetGridImageURL sets the "grid_image_url" field.
func (tuo *TaskUpdateOne) SetGridImageURL(s string) *TaskUpdateOne {
	tuo.mutation.SetGridImageURL(s)
	return tuo
}

// SetNillableGridImageURL sets the "grid_image_url" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableGridImageURL(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetGridImageURL(*s)
	}
	return tuo
}

// ClearGridImageURL clears the value of the "grid_image_url" field.
func (tuo *TaskUpdateOne) ClearGridImageURL() *TaskUpdateOne {
	tuo.mutation.ClearGridImageURL()
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TaskUpdateOne) SetStatus(s string) *TaskUpdateOne {
	tuo.mutation.SetStatus(s)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableStatus(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetStatus(*s)
	}
	return tuo
}

// ClearStatus clears the value of the "status" field.
func (tuo *TaskUpdateOne) ClearStatus() *TaskUpdateOne {
	tuo.mutation.ClearStatus()
	return tuo
}

// SetAuthorID sets the "author_id" field.
func (tuo *TaskUpdateOne) SetAuthorID(i int) *TaskUpdateOne {
	tuo.mutation.ResetAuthorID()
	tuo.mutation.SetAuthorID(i)
	return tuo
}

// SetNillableAuthorID sets the "author_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableAuthorID(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetAuthorID(*i)
	}
	return tuo
}

// AddAuthorID adds i to the "author_id" field.
func (tuo *TaskUpdateOne) AddAuthorID(i int) *TaskUpdateOne {
	tuo.mutation.AddAuthorID(i)
	return tuo
}

// ClearAuthorID clears the value of the "author_id" field.
func (tuo *TaskUpdateOne) ClearAuthorID() *TaskUpdateOne {
	tuo.mutation.ClearAuthorID()
	return tuo
}

// SetAuthorName sets the "author_name" field.
func (tuo *TaskUpdateOne) SetAuthorName(s string) *TaskUpdateOne {
	tuo.mutation.SetAuthorName(s)
	return tuo
}

// SetNillableAuthorName sets the "author_name" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableAuthorName(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetAuthorName(*s)
	}
	return tuo
}

// ClearAuthorName clears the value of the "author_name" field.
func (tuo *TaskUpdateOne) ClearAuthorName() *TaskUpdateOne {
	tuo.mutation.ClearAuthorName()
	return tuo
}

// SetRefImages sets the "ref_images" field.
func (tuo *TaskUpdateOne) SetRefImages(s []string) *TaskUpdateOne {
	tuo.mutation.SetRefImages(s)
	return tuo
}

// AppendRefImages appends s to the "ref_images" field.
func (tuo *TaskUpdateOne) AppendRefImages(s []string) *TaskUpdateOne {
	tuo.mutation.AppendRefImages(s)
	return tuo
}

// ClearRefImages clears the value of the "ref_images" field.
func (tuo *TaskUpdateOne) ClearRefImages() *TaskUpdateOne {
	tuo.mutation.ClearRefImages()
	return tuo
}

// SetStore sets the "store" field.
func (tuo *TaskUpdateOne) SetStore(s string) *TaskUpdateOne {
	tuo.mutation.SetStore(s)
	return tuo
}

// SetNillableStore sets the "store" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableStore(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetStore(*s)
	}
	return tuo
}

// ClearStore clears the value of the "store" field.
func (tuo *TaskUpdateOne) ClearStore() *TaskUpdateOne {
	tuo.mutation.ClearStore()
	return tuo
}

// SetCount sets the "count" field.
func (tuo *TaskUpdateOne) SetCount(i int) *TaskUpdateOne {
	tuo.mutation.ResetCount()
	tuo.mutation.SetCount(i)
	return tuo
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCount(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetCount(*i)
	}
	return tuo
}

// AddCount adds i to the "count" field.
func (tuo *TaskUpdateOne) AddCount(i int) *TaskUpdateOne {
	tuo.mutation.AddCount(i)
	return tuo
}

// ClearCount clears the value of the "count" field.
func (tuo *TaskUpdateOne) ClearCount() *TaskUpdateOne {
	tuo.mutation.ClearCount()
	return tuo
}

// SetHasExcellent sets the "has_excellent" field.
func (tuo *TaskUpdateOne) SetHasExcellent(b bool) *TaskUpdateOne {
	tuo.mutation.SetHasExcellent(b)
	return tuo
}

// SetNillableHasExcellent sets the "has_excellent" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableHasExcellent(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetHasExcellent(*b)
	}
	return tuo
}

// ClearHasExcellent clears the value of the "has_excellent" field.
func (tuo *TaskUpdateOne) ClearHasExcellent() *TaskUpdateOne {
	tuo.mutation.ClearHasExcellent()
	return tuo
}

// SetExtra sets the "extra" field.
func (tuo *TaskUpdateOne) SetExtra(s string) *TaskUpdateOne {
	tuo.mutation.SetExtra(s)
	return tuo
}

// SetNillableExtra sets the "extra" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableExtra(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetExtra(*s)
	}
	return tuo
}

// ClearExtra clears the value of the "extra" field.
func (tuo *TaskUpdateOne) ClearExtra() *TaskUpdateOne {
	tuo.mutation.ClearExtra()
	return tuo
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tuo *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TaskUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdateTime(); !ok {
		v := task.UpdateDefaultUpdateTime()
		tuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TaskUpdateOne) check() error {
	if v, ok := tuo.mutation.Category(); ok {
		if err := task.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Task.category": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.ImgSize(); ok {
		if err := task.ImgSizeValidator(v); err != nil {
			return &ValidationError{Name: "img_size", err: fmt.Errorf(`ent: validator failed for field "Task.img_size": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Seed(); ok {
		if err := task.SeedValidator(v); err != nil {
			return &ValidationError{Name: "seed", err: fmt.Errorf(`ent: validator failed for field "Task.seed": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.SamplerName(); ok {
		if err := task.SamplerNameValidator(v); err != nil {
			return &ValidationError{Name: "sampler_name", err: fmt.Errorf(`ent: validator failed for field "Task.sampler_name": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.SdModelName(); ok {
		if err := task.SdModelNameValidator(v); err != nil {
			return &ValidationError{Name: "sd_model_name", err: fmt.Errorf(`ent: validator failed for field "Task.sd_model_name": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.SdModelHash(); ok {
		if err := task.SdModelHashValidator(v); err != nil {
			return &ValidationError{Name: "sd_model_hash", err: fmt.Errorf(`ent: validator failed for field "Task.sd_model_hash": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.SdVaeName(); ok {
		if err := task.SdVaeNameValidator(v); err != nil {
			return &ValidationError{Name: "sd_vae_name", err: fmt.Errorf(`ent: validator failed for field "Task.sd_vae_name": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.SdVaeHash(); ok {
		if err := task.SdVaeHashValidator(v); err != nil {
			return &ValidationError{Name: "sd_vae_hash", err: fmt.Errorf(`ent: validator failed for field "Task.sd_vae_hash": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Version(); ok {
		if err := task.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "Task.version": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.GridImageURL(); ok {
		if err := task.GridImageURLValidator(v); err != nil {
			return &ValidationError{Name: "grid_image_url", err: fmt.Errorf(`ent: validator failed for field "Task.grid_image_url": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Task.status": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.AuthorName(); ok {
		if err := task.AuthorNameValidator(v); err != nil {
			return &ValidationError{Name: "author_name", err: fmt.Errorf(`ent: validator failed for field "Task.author_name": %w`, err)}
		}
	}
	return nil
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.UpdateTime(); ok {
		_spec.SetField(task.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.DeleteTime(); ok {
		_spec.SetField(task.FieldDeleteTime, field.TypeTime, value)
	}
	if tuo.mutation.DeleteTimeCleared() {
		_spec.ClearField(task.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := tuo.mutation.Prompt(); ok {
		_spec.SetField(task.FieldPrompt, field.TypeString, value)
	}
	if tuo.mutation.PromptCleared() {
		_spec.ClearField(task.FieldPrompt, field.TypeString)
	}
	if value, ok := tuo.mutation.NegativePrompt(); ok {
		_spec.SetField(task.FieldNegativePrompt, field.TypeString, value)
	}
	if tuo.mutation.NegativePromptCleared() {
		_spec.ClearField(task.FieldNegativePrompt, field.TypeString)
	}
	if value, ok := tuo.mutation.Category(); ok {
		_spec.SetField(task.FieldCategory, field.TypeString, value)
	}
	if tuo.mutation.CategoryCleared() {
		_spec.ClearField(task.FieldCategory, field.TypeString)
	}
	if value, ok := tuo.mutation.Weight(); ok {
		_spec.SetField(task.FieldWeight, field.TypeFloat32, value)
	}
	if value, ok := tuo.mutation.AddedWeight(); ok {
		_spec.AddField(task.FieldWeight, field.TypeFloat32, value)
	}
	if tuo.mutation.WeightCleared() {
		_spec.ClearField(task.FieldWeight, field.TypeFloat32)
	}
	if value, ok := tuo.mutation.Height(); ok {
		_spec.SetField(task.FieldHeight, field.TypeFloat32, value)
	}
	if value, ok := tuo.mutation.AddedHeight(); ok {
		_spec.AddField(task.FieldHeight, field.TypeFloat32, value)
	}
	if tuo.mutation.HeightCleared() {
		_spec.ClearField(task.FieldHeight, field.TypeFloat32)
	}
	if value, ok := tuo.mutation.ImgSize(); ok {
		_spec.SetField(task.FieldImgSize, field.TypeString, value)
	}
	if tuo.mutation.ImgSizeCleared() {
		_spec.ClearField(task.FieldImgSize, field.TypeString)
	}
	if value, ok := tuo.mutation.Seed(); ok {
		_spec.SetField(task.FieldSeed, field.TypeString, value)
	}
	if tuo.mutation.SeedCleared() {
		_spec.ClearField(task.FieldSeed, field.TypeString)
	}
	if value, ok := tuo.mutation.SamplerName(); ok {
		_spec.SetField(task.FieldSamplerName, field.TypeString, value)
	}
	if tuo.mutation.SamplerNameCleared() {
		_spec.ClearField(task.FieldSamplerName, field.TypeString)
	}
	if value, ok := tuo.mutation.Steps(); ok {
		_spec.SetField(task.FieldSteps, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedSteps(); ok {
		_spec.AddField(task.FieldSteps, field.TypeInt, value)
	}
	if tuo.mutation.StepsCleared() {
		_spec.ClearField(task.FieldSteps, field.TypeInt)
	}
	if value, ok := tuo.mutation.CfgScale(); ok {
		_spec.SetField(task.FieldCfgScale, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedCfgScale(); ok {
		_spec.AddField(task.FieldCfgScale, field.TypeInt, value)
	}
	if tuo.mutation.CfgScaleCleared() {
		_spec.ClearField(task.FieldCfgScale, field.TypeInt)
	}
	if value, ok := tuo.mutation.BatchSize(); ok {
		_spec.SetField(task.FieldBatchSize, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedBatchSize(); ok {
		_spec.AddField(task.FieldBatchSize, field.TypeInt, value)
	}
	if tuo.mutation.BatchSizeCleared() {
		_spec.ClearField(task.FieldBatchSize, field.TypeInt)
	}
	if value, ok := tuo.mutation.Total(); ok {
		_spec.SetField(task.FieldTotal, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedTotal(); ok {
		_spec.AddField(task.FieldTotal, field.TypeInt, value)
	}
	if tuo.mutation.TotalCleared() {
		_spec.ClearField(task.FieldTotal, field.TypeInt)
	}
	if value, ok := tuo.mutation.SdModelName(); ok {
		_spec.SetField(task.FieldSdModelName, field.TypeString, value)
	}
	if tuo.mutation.SdModelNameCleared() {
		_spec.ClearField(task.FieldSdModelName, field.TypeString)
	}
	if value, ok := tuo.mutation.SdModelHash(); ok {
		_spec.SetField(task.FieldSdModelHash, field.TypeString, value)
	}
	if tuo.mutation.SdModelHashCleared() {
		_spec.ClearField(task.FieldSdModelHash, field.TypeString)
	}
	if value, ok := tuo.mutation.SdVaeName(); ok {
		_spec.SetField(task.FieldSdVaeName, field.TypeString, value)
	}
	if tuo.mutation.SdVaeNameCleared() {
		_spec.ClearField(task.FieldSdVaeName, field.TypeString)
	}
	if value, ok := tuo.mutation.SdVaeHash(); ok {
		_spec.SetField(task.FieldSdVaeHash, field.TypeString, value)
	}
	if tuo.mutation.SdVaeHashCleared() {
		_spec.ClearField(task.FieldSdVaeHash, field.TypeString)
	}
	if value, ok := tuo.mutation.JobTimestamp(); ok {
		_spec.SetField(task.FieldJobTimestamp, field.TypeTime, value)
	}
	if tuo.mutation.JobTimestampCleared() {
		_spec.ClearField(task.FieldJobTimestamp, field.TypeTime)
	}
	if value, ok := tuo.mutation.Version(); ok {
		_spec.SetField(task.FieldVersion, field.TypeString, value)
	}
	if tuo.mutation.VersionCleared() {
		_spec.ClearField(task.FieldVersion, field.TypeString)
	}
	if value, ok := tuo.mutation.GridImageURL(); ok {
		_spec.SetField(task.FieldGridImageURL, field.TypeString, value)
	}
	if tuo.mutation.GridImageURLCleared() {
		_spec.ClearField(task.FieldGridImageURL, field.TypeString)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeString, value)
	}
	if tuo.mutation.StatusCleared() {
		_spec.ClearField(task.FieldStatus, field.TypeString)
	}
	if value, ok := tuo.mutation.AuthorID(); ok {
		_spec.SetField(task.FieldAuthorID, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedAuthorID(); ok {
		_spec.AddField(task.FieldAuthorID, field.TypeInt, value)
	}
	if tuo.mutation.AuthorIDCleared() {
		_spec.ClearField(task.FieldAuthorID, field.TypeInt)
	}
	if value, ok := tuo.mutation.AuthorName(); ok {
		_spec.SetField(task.FieldAuthorName, field.TypeString, value)
	}
	if tuo.mutation.AuthorNameCleared() {
		_spec.ClearField(task.FieldAuthorName, field.TypeString)
	}
	if value, ok := tuo.mutation.RefImages(); ok {
		_spec.SetField(task.FieldRefImages, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedRefImages(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, task.FieldRefImages, value)
		})
	}
	if tuo.mutation.RefImagesCleared() {
		_spec.ClearField(task.FieldRefImages, field.TypeJSON)
	}
	if value, ok := tuo.mutation.Store(); ok {
		_spec.SetField(task.FieldStore, field.TypeString, value)
	}
	if tuo.mutation.StoreCleared() {
		_spec.ClearField(task.FieldStore, field.TypeString)
	}
	if value, ok := tuo.mutation.Count(); ok {
		_spec.SetField(task.FieldCount, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedCount(); ok {
		_spec.AddField(task.FieldCount, field.TypeInt, value)
	}
	if tuo.mutation.CountCleared() {
		_spec.ClearField(task.FieldCount, field.TypeInt)
	}
	if value, ok := tuo.mutation.HasExcellent(); ok {
		_spec.SetField(task.FieldHasExcellent, field.TypeBool, value)
	}
	if tuo.mutation.HasExcellentCleared() {
		_spec.ClearField(task.FieldHasExcellent, field.TypeBool)
	}
	if value, ok := tuo.mutation.Extra(); ok {
		_spec.SetField(task.FieldExtra, field.TypeString, value)
	}
	if tuo.mutation.ExtraCleared() {
		_spec.ClearField(task.FieldExtra, field.TypeString)
	}
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
