// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ai-gallery/ent/predicate"
	"ai-gallery/ent/taskdetail"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskDetailUpdate is the builder for updating TaskDetail entities.
type TaskDetailUpdate struct {
	config
	hooks    []Hook
	mutation *TaskDetailMutation
}

// Where appends a list predicates to the TaskDetailUpdate builder.
func (tdu *TaskDetailUpdate) Where(ps ...predicate.TaskDetail) *TaskDetailUpdate {
	tdu.mutation.Where(ps...)
	return tdu
}

// SetUpdateTime sets the "update_time" field.
func (tdu *TaskDetailUpdate) SetUpdateTime(t time.Time) *TaskDetailUpdate {
	tdu.mutation.SetUpdateTime(t)
	return tdu
}

// SetDeleteTime sets the "delete_time" field.
func (tdu *TaskDetailUpdate) SetDeleteTime(t time.Time) *TaskDetailUpdate {
	tdu.mutation.SetDeleteTime(t)
	return tdu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (tdu *TaskDetailUpdate) SetNillableDeleteTime(t *time.Time) *TaskDetailUpdate {
	if t != nil {
		tdu.SetDeleteTime(*t)
	}
	return tdu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (tdu *TaskDetailUpdate) ClearDeleteTime() *TaskDetailUpdate {
	tdu.mutation.ClearDeleteTime()
	return tdu
}

// SetTaskID sets the "task_id" field.
func (tdu *TaskDetailUpdate) SetTaskID(i int) *TaskDetailUpdate {
	tdu.mutation.ResetTaskID()
	tdu.mutation.SetTaskID(i)
	return tdu
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (tdu *TaskDetailUpdate) SetNillableTaskID(i *int) *TaskDetailUpdate {
	if i != nil {
		tdu.SetTaskID(*i)
	}
	return tdu
}

// AddTaskID adds i to the "task_id" field.
func (tdu *TaskDetailUpdate) AddTaskID(i int) *TaskDetailUpdate {
	tdu.mutation.AddTaskID(i)
	return tdu
}

// ClearTaskID clears the value of the "task_id" field.
func (tdu *TaskDetailUpdate) ClearTaskID() *TaskDetailUpdate {
	tdu.mutation.ClearTaskID()
	return tdu
}

// SetImageURL sets the "image_url" field.
func (tdu *TaskDetailUpdate) SetImageURL(s string) *TaskDetailUpdate {
	tdu.mutation.SetImageURL(s)
	return tdu
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (tdu *TaskDetailUpdate) SetNillableImageURL(s *string) *TaskDetailUpdate {
	if s != nil {
		tdu.SetImageURL(*s)
	}
	return tdu
}

// ClearImageURL clears the value of the "image_url" field.
func (tdu *TaskDetailUpdate) ClearImageURL() *TaskDetailUpdate {
	tdu.mutation.ClearImageURL()
	return tdu
}

// SetHasExcellent sets the "has_excellent" field.
func (tdu *TaskDetailUpdate) SetHasExcellent(b bool) *TaskDetailUpdate {
	tdu.mutation.SetHasExcellent(b)
	return tdu
}

// SetNillableHasExcellent sets the "has_excellent" field if the given value is not nil.
func (tdu *TaskDetailUpdate) SetNillableHasExcellent(b *bool) *TaskDetailUpdate {
	if b != nil {
		tdu.SetHasExcellent(*b)
	}
	return tdu
}

// ClearHasExcellent clears the value of the "has_excellent" field.
func (tdu *TaskDetailUpdate) ClearHasExcellent() *TaskDetailUpdate {
	tdu.mutation.ClearHasExcellent()
	return tdu
}

// Mutation returns the TaskDetailMutation object of the builder.
func (tdu *TaskDetailUpdate) Mutation() *TaskDetailMutation {
	return tdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tdu *TaskDetailUpdate) Save(ctx context.Context) (int, error) {
	tdu.defaults()
	return withHooks(ctx, tdu.sqlSave, tdu.mutation, tdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tdu *TaskDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := tdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tdu *TaskDetailUpdate) Exec(ctx context.Context) error {
	_, err := tdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdu *TaskDetailUpdate) ExecX(ctx context.Context) {
	if err := tdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tdu *TaskDetailUpdate) defaults() {
	if _, ok := tdu.mutation.UpdateTime(); !ok {
		v := taskdetail.UpdateDefaultUpdateTime()
		tdu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tdu *TaskDetailUpdate) check() error {
	if v, ok := tdu.mutation.ImageURL(); ok {
		if err := taskdetail.ImageURLValidator(v); err != nil {
			return &ValidationError{Name: "image_url", err: fmt.Errorf(`ent: validator failed for field "TaskDetail.image_url": %w`, err)}
		}
	}
	return nil
}

func (tdu *TaskDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(taskdetail.Table, taskdetail.Columns, sqlgraph.NewFieldSpec(taskdetail.FieldID, field.TypeInt))
	if ps := tdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tdu.mutation.UpdateTime(); ok {
		_spec.SetField(taskdetail.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := tdu.mutation.DeleteTime(); ok {
		_spec.SetField(taskdetail.FieldDeleteTime, field.TypeTime, value)
	}
	if tdu.mutation.DeleteTimeCleared() {
		_spec.ClearField(taskdetail.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := tdu.mutation.TaskID(); ok {
		_spec.SetField(taskdetail.FieldTaskID, field.TypeInt, value)
	}
	if value, ok := tdu.mutation.AddedTaskID(); ok {
		_spec.AddField(taskdetail.FieldTaskID, field.TypeInt, value)
	}
	if tdu.mutation.TaskIDCleared() {
		_spec.ClearField(taskdetail.FieldTaskID, field.TypeInt)
	}
	if value, ok := tdu.mutation.ImageURL(); ok {
		_spec.SetField(taskdetail.FieldImageURL, field.TypeString, value)
	}
	if tdu.mutation.ImageURLCleared() {
		_spec.ClearField(taskdetail.FieldImageURL, field.TypeString)
	}
	if value, ok := tdu.mutation.HasExcellent(); ok {
		_spec.SetField(taskdetail.FieldHasExcellent, field.TypeBool, value)
	}
	if tdu.mutation.HasExcellentCleared() {
		_spec.ClearField(taskdetail.FieldHasExcellent, field.TypeBool)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tdu.mutation.done = true
	return n, nil
}

// TaskDetailUpdateOne is the builder for updating a single TaskDetail entity.
type TaskDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskDetailMutation
}

// SetUpdateTime sets the "update_time" field.
func (tduo *TaskDetailUpdateOne) SetUpdateTime(t time.Time) *TaskDetailUpdateOne {
	tduo.mutation.SetUpdateTime(t)
	return tduo
}

// SetDeleteTime sets the "delete_time" field.
func (tduo *TaskDetailUpdateOne) SetDeleteTime(t time.Time) *TaskDetailUpdateOne {
	tduo.mutation.SetDeleteTime(t)
	return tduo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (tduo *TaskDetailUpdateOne) SetNillableDeleteTime(t *time.Time) *TaskDetailUpdateOne {
	if t != nil {
		tduo.SetDeleteTime(*t)
	}
	return tduo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (tduo *TaskDetailUpdateOne) ClearDeleteTime() *TaskDetailUpdateOne {
	tduo.mutation.ClearDeleteTime()
	return tduo
}

// SetTaskID sets the "task_id" field.
func (tduo *TaskDetailUpdateOne) SetTaskID(i int) *TaskDetailUpdateOne {
	tduo.mutation.ResetTaskID()
	tduo.mutation.SetTaskID(i)
	return tduo
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (tduo *TaskDetailUpdateOne) SetNillableTaskID(i *int) *TaskDetailUpdateOne {
	if i != nil {
		tduo.SetTaskID(*i)
	}
	return tduo
}

// AddTaskID adds i to the "task_id" field.
func (tduo *TaskDetailUpdateOne) AddTaskID(i int) *TaskDetailUpdateOne {
	tduo.mutation.AddTaskID(i)
	return tduo
}

// ClearTaskID clears the value of the "task_id" field.
func (tduo *TaskDetailUpdateOne) ClearTaskID() *TaskDetailUpdateOne {
	tduo.mutation.ClearTaskID()
	return tduo
}

// SetImageURL sets the "image_url" field.
func (tduo *TaskDetailUpdateOne) SetImageURL(s string) *TaskDetailUpdateOne {
	tduo.mutation.SetImageURL(s)
	return tduo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (tduo *TaskDetailUpdateOne) SetNillableImageURL(s *string) *TaskDetailUpdateOne {
	if s != nil {
		tduo.SetImageURL(*s)
	}
	return tduo
}

// ClearImageURL clears the value of the "image_url" field.
func (tduo *TaskDetailUpdateOne) ClearImageURL() *TaskDetailUpdateOne {
	tduo.mutation.ClearImageURL()
	return tduo
}

// SetHasExcellent sets the "has_excellent" field.
func (tduo *TaskDetailUpdateOne) SetHasExcellent(b bool) *TaskDetailUpdateOne {
	tduo.mutation.SetHasExcellent(b)
	return tduo
}

// SetNillableHasExcellent sets the "has_excellent" field if the given value is not nil.
func (tduo *TaskDetailUpdateOne) SetNillableHasExcellent(b *bool) *TaskDetailUpdateOne {
	if b != nil {
		tduo.SetHasExcellent(*b)
	}
	return tduo
}

// ClearHasExcellent clears the value of the "has_excellent" field.
func (tduo *TaskDetailUpdateOne) ClearHasExcellent() *TaskDetailUpdateOne {
	tduo.mutation.ClearHasExcellent()
	return tduo
}

// Mutation returns the TaskDetailMutation object of the builder.
func (tduo *TaskDetailUpdateOne) Mutation() *TaskDetailMutation {
	return tduo.mutation
}

// Where appends a list predicates to the TaskDetailUpdate builder.
func (tduo *TaskDetailUpdateOne) Where(ps ...predicate.TaskDetail) *TaskDetailUpdateOne {
	tduo.mutation.Where(ps...)
	return tduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tduo *TaskDetailUpdateOne) Select(field string, fields ...string) *TaskDetailUpdateOne {
	tduo.fields = append([]string{field}, fields...)
	return tduo
}

// Save executes the query and returns the updated TaskDetail entity.
func (tduo *TaskDetailUpdateOne) Save(ctx context.Context) (*TaskDetail, error) {
	tduo.defaults()
	return withHooks(ctx, tduo.sqlSave, tduo.mutation, tduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tduo *TaskDetailUpdateOne) SaveX(ctx context.Context) *TaskDetail {
	node, err := tduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tduo *TaskDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := tduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tduo *TaskDetailUpdateOne) ExecX(ctx context.Context) {
	if err := tduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tduo *TaskDetailUpdateOne) defaults() {
	if _, ok := tduo.mutation.UpdateTime(); !ok {
		v := taskdetail.UpdateDefaultUpdateTime()
		tduo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tduo *TaskDetailUpdateOne) check() error {
	if v, ok := tduo.mutation.ImageURL(); ok {
		if err := taskdetail.ImageURLValidator(v); err != nil {
			return &ValidationError{Name: "image_url", err: fmt.Errorf(`ent: validator failed for field "TaskDetail.image_url": %w`, err)}
		}
	}
	return nil
}

func (tduo *TaskDetailUpdateOne) sqlSave(ctx context.Context) (_node *TaskDetail, err error) {
	if err := tduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(taskdetail.Table, taskdetail.Columns, sqlgraph.NewFieldSpec(taskdetail.FieldID, field.TypeInt))
	id, ok := tduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TaskDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taskdetail.FieldID)
		for _, f := range fields {
			if !taskdetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != taskdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tduo.mutation.UpdateTime(); ok {
		_spec.SetField(taskdetail.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := tduo.mutation.DeleteTime(); ok {
		_spec.SetField(taskdetail.FieldDeleteTime, field.TypeTime, value)
	}
	if tduo.mutation.DeleteTimeCleared() {
		_spec.ClearField(taskdetail.FieldDeleteTime, field.TypeTime)
	}
	if value, ok := tduo.mutation.TaskID(); ok {
		_spec.SetField(taskdetail.FieldTaskID, field.TypeInt, value)
	}
	if value, ok := tduo.mutation.AddedTaskID(); ok {
		_spec.AddField(taskdetail.FieldTaskID, field.TypeInt, value)
	}
	if tduo.mutation.TaskIDCleared() {
		_spec.ClearField(taskdetail.FieldTaskID, field.TypeInt)
	}
	if value, ok := tduo.mutation.ImageURL(); ok {
		_spec.SetField(taskdetail.FieldImageURL, field.TypeString, value)
	}
	if tduo.mutation.ImageURLCleared() {
		_spec.ClearField(taskdetail.FieldImageURL, field.TypeString)
	}
	if value, ok := tduo.mutation.HasExcellent(); ok {
		_spec.SetField(taskdetail.FieldHasExcellent, field.TypeBool, value)
	}
	if tduo.mutation.HasExcellentCleared() {
		_spec.ClearField(taskdetail.FieldHasExcellent, field.TypeBool)
	}
	_node = &TaskDetail{config: tduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tduo.mutation.done = true
	return _node, nil
}
