// Code generated by ent, DO NOT EDIT.

package setting

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the setting type in the database.
	Label = "setting"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldDeleteTime holds the string denoting the delete_time field in the database.
	FieldDeleteTime = "delete_time"
	// FieldConfigKey holds the string denoting the config_key field in the database.
	FieldConfigKey = "config_key"
	// FieldConfigValue holds the string denoting the config_value field in the database.
	FieldConfigValue = "config_value"
	// FieldMark holds the string denoting the mark field in the database.
	FieldMark = "mark"
	// FieldOperateID holds the string denoting the operate_id field in the database.
	FieldOperateID = "operate_id"
	// FieldOperateName holds the string denoting the operate_name field in the database.
	FieldOperateName = "operate_name"
	// Table holds the table name of the setting in the database.
	Table = "core_setting"
)

// Columns holds all SQL columns for setting fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldDeleteTime,
	FieldConfigKey,
	FieldConfigValue,
	FieldMark,
	FieldOperateID,
	FieldOperateName,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// ConfigKeyValidator is a validator for the "config_key" field. It is called by the builders before save.
	ConfigKeyValidator func(string) error
	// ConfigValueValidator is a validator for the "config_value" field. It is called by the builders before save.
	ConfigValueValidator func(string) error
	// MarkValidator is a validator for the "mark" field. It is called by the builders before save.
	MarkValidator func(string) error
	// OperateNameValidator is a validator for the "operate_name" field. It is called by the builders before save.
	OperateNameValidator func(string) error
)

// OrderOption defines the ordering options for the Setting queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByDeleteTime orders the results by the delete_time field.
func ByDeleteTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteTime, opts...).ToFunc()
}

// ByConfigKey orders the results by the config_key field.
func ByConfigKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfigKey, opts...).ToFunc()
}

// ByConfigValue orders the results by the config_value field.
func ByConfigValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfigValue, opts...).ToFunc()
}

// ByMark orders the results by the mark field.
func ByMark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMark, opts...).ToFunc()
}

// ByOperateID orders the results by the operate_id field.
func ByOperateID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperateID, opts...).ToFunc()
}

// ByOperateName orders the results by the operate_name field.
func ByOperateName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperateName, opts...).ToFunc()
}
