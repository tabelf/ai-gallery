// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ai-gallery/ent/task"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	mutation *TaskMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (tc *TaskCreate) SetCreateTime(t time.Time) *TaskCreate {
	tc.mutation.SetCreateTime(t)
	return tc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCreateTime(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetCreateTime(*t)
	}
	return tc
}

// SetUpdateTime sets the "update_time" field.
func (tc *TaskCreate) SetUpdateTime(t time.Time) *TaskCreate {
	tc.mutation.SetUpdateTime(t)
	return tc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (tc *TaskCreate) SetNillableUpdateTime(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetUpdateTime(*t)
	}
	return tc
}

// SetDeleteTime sets the "delete_time" field.
func (tc *TaskCreate) SetDeleteTime(t time.Time) *TaskCreate {
	tc.mutation.SetDeleteTime(t)
	return tc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (tc *TaskCreate) SetNillableDeleteTime(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetDeleteTime(*t)
	}
	return tc
}

// SetPrompt sets the "prompt" field.
func (tc *TaskCreate) SetPrompt(s string) *TaskCreate {
	tc.mutation.SetPrompt(s)
	return tc
}

// SetNillablePrompt sets the "prompt" field if the given value is not nil.
func (tc *TaskCreate) SetNillablePrompt(s *string) *TaskCreate {
	if s != nil {
		tc.SetPrompt(*s)
	}
	return tc
}

// SetNegativePrompt sets the "negative_prompt" field.
func (tc *TaskCreate) SetNegativePrompt(s string) *TaskCreate {
	tc.mutation.SetNegativePrompt(s)
	return tc
}

// SetNillableNegativePrompt sets the "negative_prompt" field if the given value is not nil.
func (tc *TaskCreate) SetNillableNegativePrompt(s *string) *TaskCreate {
	if s != nil {
		tc.SetNegativePrompt(*s)
	}
	return tc
}

// SetCategory sets the "category" field.
func (tc *TaskCreate) SetCategory(s string) *TaskCreate {
	tc.mutation.SetCategory(s)
	return tc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCategory(s *string) *TaskCreate {
	if s != nil {
		tc.SetCategory(*s)
	}
	return tc
}

// SetWeight sets the "weight" field.
func (tc *TaskCreate) SetWeight(f float32) *TaskCreate {
	tc.mutation.SetWeight(f)
	return tc
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (tc *TaskCreate) SetNillableWeight(f *float32) *TaskCreate {
	if f != nil {
		tc.SetWeight(*f)
	}
	return tc
}

// SetHeight sets the "height" field.
func (tc *TaskCreate) SetHeight(f float32) *TaskCreate {
	tc.mutation.SetHeight(f)
	return tc
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (tc *TaskCreate) SetNillableHeight(f *float32) *TaskCreate {
	if f != nil {
		tc.SetHeight(*f)
	}
	return tc
}

// SetImgSize sets the "img_size" field.
func (tc *TaskCreate) SetImgSize(s string) *TaskCreate {
	tc.mutation.SetImgSize(s)
	return tc
}

// SetNillableImgSize sets the "img_size" field if the given value is not nil.
func (tc *TaskCreate) SetNillableImgSize(s *string) *TaskCreate {
	if s != nil {
		tc.SetImgSize(*s)
	}
	return tc
}

// SetSeed sets the "seed" field.
func (tc *TaskCreate) SetSeed(s string) *TaskCreate {
	tc.mutation.SetSeed(s)
	return tc
}

// SetNillableSeed sets the "seed" field if the given value is not nil.
func (tc *TaskCreate) SetNillableSeed(s *string) *TaskCreate {
	if s != nil {
		tc.SetSeed(*s)
	}
	return tc
}

// SetSamplerName sets the "sampler_name" field.
func (tc *TaskCreate) SetSamplerName(s string) *TaskCreate {
	tc.mutation.SetSamplerName(s)
	return tc
}

// SetNillableSamplerName sets the "sampler_name" field if the given value is not nil.
func (tc *TaskCreate) SetNillableSamplerName(s *string) *TaskCreate {
	if s != nil {
		tc.SetSamplerName(*s)
	}
	return tc
}

// SetSteps sets the "steps" field.
func (tc *TaskCreate) SetSteps(i int) *TaskCreate {
	tc.mutation.SetSteps(i)
	return tc
}

// SetNillableSteps sets the "steps" field if the given value is not nil.
func (tc *TaskCreate) SetNillableSteps(i *int) *TaskCreate {
	if i != nil {
		tc.SetSteps(*i)
	}
	return tc
}

// SetCfgScale sets the "cfg_scale" field.
func (tc *TaskCreate) SetCfgScale(i int) *TaskCreate {
	tc.mutation.SetCfgScale(i)
	return tc
}

// SetNillableCfgScale sets the "cfg_scale" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCfgScale(i *int) *TaskCreate {
	if i != nil {
		tc.SetCfgScale(*i)
	}
	return tc
}

// SetBatchSize sets the "batch_size" field.
func (tc *TaskCreate) SetBatchSize(i int) *TaskCreate {
	tc.mutation.SetBatchSize(i)
	return tc
}

// SetNillableBatchSize sets the "batch_size" field if the given value is not nil.
func (tc *TaskCreate) SetNillableBatchSize(i *int) *TaskCreate {
	if i != nil {
		tc.SetBatchSize(*i)
	}
	return tc
}

// SetTotal sets the "total" field.
func (tc *TaskCreate) SetTotal(i int) *TaskCreate {
	tc.mutation.SetTotal(i)
	return tc
}

// SetNillableTotal sets the "total" field if the given value is not nil.
func (tc *TaskCreate) SetNillableTotal(i *int) *TaskCreate {
	if i != nil {
		tc.SetTotal(*i)
	}
	return tc
}

// SetSdModelName sets the "sd_model_name" field.
func (tc *TaskCreate) SetSdModelName(s string) *TaskCreate {
	tc.mutation.SetSdModelName(s)
	return tc
}

// SetNillableSdModelName sets the "sd_model_name" field if the given value is not nil.
func (tc *TaskCreate) SetNillableSdModelName(s *string) *TaskCreate {
	if s != nil {
		tc.SetSdModelName(*s)
	}
	return tc
}

// SetSdModelHash sets the "sd_model_hash" field.
func (tc *TaskCreate) SetSdModelHash(s string) *TaskCreate {
	tc.mutation.SetSdModelHash(s)
	return tc
}

// SetNillableSdModelHash sets the "sd_model_hash" field if the given value is not nil.
func (tc *TaskCreate) SetNillableSdModelHash(s *string) *TaskCreate {
	if s != nil {
		tc.SetSdModelHash(*s)
	}
	return tc
}

// SetSdVaeName sets the "sd_vae_name" field.
func (tc *TaskCreate) SetSdVaeName(s string) *TaskCreate {
	tc.mutation.SetSdVaeName(s)
	return tc
}

// SetNillableSdVaeName sets the "sd_vae_name" field if the given value is not nil.
func (tc *TaskCreate) SetNillableSdVaeName(s *string) *TaskCreate {
	if s != nil {
		tc.SetSdVaeName(*s)
	}
	return tc
}

// SetSdVaeHash sets the "sd_vae_hash" field.
func (tc *TaskCreate) SetSdVaeHash(s string) *TaskCreate {
	tc.mutation.SetSdVaeHash(s)
	return tc
}

// SetNillableSdVaeHash sets the "sd_vae_hash" field if the given value is not nil.
func (tc *TaskCreate) SetNillableSdVaeHash(s *string) *TaskCreate {
	if s != nil {
		tc.SetSdVaeHash(*s)
	}
	return tc
}

// SetJobTimestamp sets the "job_timestamp" field.
func (tc *TaskCreate) SetJobTimestamp(t time.Time) *TaskCreate {
	tc.mutation.SetJobTimestamp(t)
	return tc
}

// SetNillableJobTimestamp sets the "job_timestamp" field if the given value is not nil.
func (tc *TaskCreate) SetNillableJobTimestamp(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetJobTimestamp(*t)
	}
	return tc
}

// SetVersion sets the "version" field.
func (tc *TaskCreate) SetVersion(s string) *TaskCreate {
	tc.mutation.SetVersion(s)
	return tc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (tc *TaskCreate) SetNillableVersion(s *string) *TaskCreate {
	if s != nil {
		tc.SetVersion(*s)
	}
	return tc
}

// SetGridImageURL sets the "grid_image_url" field.
func (tc *TaskCreate) SetGridImageURL(s string) *TaskCreate {
	tc.mutation.SetGridImageURL(s)
	return tc
}

// SetNillableGridImageURL sets the "grid_image_url" field if the given value is not nil.
func (tc *TaskCreate) SetNillableGridImageURL(s *string) *TaskCreate {
	if s != nil {
		tc.SetGridImageURL(*s)
	}
	return tc
}

// SetStatus sets the "status" field.
func (tc *TaskCreate) SetStatus(s string) *TaskCreate {
	tc.mutation.SetStatus(s)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TaskCreate) SetNillableStatus(s *string) *TaskCreate {
	if s != nil {
		tc.SetStatus(*s)
	}
	return tc
}

// SetAuthorID sets the "author_id" field.
func (tc *TaskCreate) SetAuthorID(i int) *TaskCreate {
	tc.mutation.SetAuthorID(i)
	return tc
}

// SetNillableAuthorID sets the "author_id" field if the given value is not nil.
func (tc *TaskCreate) SetNillableAuthorID(i *int) *TaskCreate {
	if i != nil {
		tc.SetAuthorID(*i)
	}
	return tc
}

// SetAuthorName sets the "author_name" field.
func (tc *TaskCreate) SetAuthorName(s string) *TaskCreate {
	tc.mutation.SetAuthorName(s)
	return tc
}

// SetNillableAuthorName sets the "author_name" field if the given value is not nil.
func (tc *TaskCreate) SetNillableAuthorName(s *string) *TaskCreate {
	if s != nil {
		tc.SetAuthorName(*s)
	}
	return tc
}

// SetRefImages sets the "ref_images" field.
func (tc *TaskCreate) SetRefImages(s []string) *TaskCreate {
	tc.mutation.SetRefImages(s)
	return tc
}

// SetStore sets the "store" field.
func (tc *TaskCreate) SetStore(s string) *TaskCreate {
	tc.mutation.SetStore(s)
	return tc
}

// SetNillableStore sets the "store" field if the given value is not nil.
func (tc *TaskCreate) SetNillableStore(s *string) *TaskCreate {
	if s != nil {
		tc.SetStore(*s)
	}
	return tc
}

// SetCount sets the "count" field.
func (tc *TaskCreate) SetCount(i int) *TaskCreate {
	tc.mutation.SetCount(i)
	return tc
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCount(i *int) *TaskCreate {
	if i != nil {
		tc.SetCount(*i)
	}
	return tc
}

// SetHasExcellent sets the "has_excellent" field.
func (tc *TaskCreate) SetHasExcellent(b bool) *TaskCreate {
	tc.mutation.SetHasExcellent(b)
	return tc
}

// SetNillableHasExcellent sets the "has_excellent" field if the given value is not nil.
func (tc *TaskCreate) SetNillableHasExcellent(b *bool) *TaskCreate {
	if b != nil {
		tc.SetHasExcellent(*b)
	}
	return tc
}

// SetExtra sets the "extra" field.
func (tc *TaskCreate) SetExtra(s string) *TaskCreate {
	tc.mutation.SetExtra(s)
	return tc
}

// SetNillableExtra sets the "extra" field if the given value is not nil.
func (tc *TaskCreate) SetNillableExtra(s *string) *TaskCreate {
	if s != nil {
		tc.SetExtra(*s)
	}
	return tc
}

// Mutation returns the TaskMutation object of the builder.
func (tc *TaskCreate) Mutation() *TaskMutation {
	return tc.mutation
}

// Save creates the Task in the database.
func (tc *TaskCreate) Save(ctx context.Context) (*Task, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TaskCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TaskCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TaskCreate) defaults() {
	if _, ok := tc.mutation.CreateTime(); !ok {
		v := task.DefaultCreateTime()
		tc.mutation.SetCreateTime(v)
	}
	if _, ok := tc.mutation.UpdateTime(); !ok {
		v := task.DefaultUpdateTime()
		tc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TaskCreate) check() error {
	if _, ok := tc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Task.create_time"`)}
	}
	if _, ok := tc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Task.update_time"`)}
	}
	if v, ok := tc.mutation.Category(); ok {
		if err := task.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Task.category": %w`, err)}
		}
	}
	if v, ok := tc.mutation.ImgSize(); ok {
		if err := task.ImgSizeValidator(v); err != nil {
			return &ValidationError{Name: "img_size", err: fmt.Errorf(`ent: validator failed for field "Task.img_size": %w`, err)}
		}
	}
	if v, ok := tc.mutation.Seed(); ok {
		if err := task.SeedValidator(v); err != nil {
			return &ValidationError{Name: "seed", err: fmt.Errorf(`ent: validator failed for field "Task.seed": %w`, err)}
		}
	}
	if v, ok := tc.mutation.SamplerName(); ok {
		if err := task.SamplerNameValidator(v); err != nil {
			return &ValidationError{Name: "sampler_name", err: fmt.Errorf(`ent: validator failed for field "Task.sampler_name": %w`, err)}
		}
	}
	if v, ok := tc.mutation.SdModelName(); ok {
		if err := task.SdModelNameValidator(v); err != nil {
			return &ValidationError{Name: "sd_model_name", err: fmt.Errorf(`ent: validator failed for field "Task.sd_model_name": %w`, err)}
		}
	}
	if v, ok := tc.mutation.SdModelHash(); ok {
		if err := task.SdModelHashValidator(v); err != nil {
			return &ValidationError{Name: "sd_model_hash", err: fmt.Errorf(`ent: validator failed for field "Task.sd_model_hash": %w`, err)}
		}
	}
	if v, ok := tc.mutation.SdVaeName(); ok {
		if err := task.SdVaeNameValidator(v); err != nil {
			return &ValidationError{Name: "sd_vae_name", err: fmt.Errorf(`ent: validator failed for field "Task.sd_vae_name": %w`, err)}
		}
	}
	if v, ok := tc.mutation.SdVaeHash(); ok {
		if err := task.SdVaeHashValidator(v); err != nil {
			return &ValidationError{Name: "sd_vae_hash", err: fmt.Errorf(`ent: validator failed for field "Task.sd_vae_hash": %w`, err)}
		}
	}
	if v, ok := tc.mutation.Version(); ok {
		if err := task.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "Task.version": %w`, err)}
		}
	}
	if v, ok := tc.mutation.GridImageURL(); ok {
		if err := task.GridImageURLValidator(v); err != nil {
			return &ValidationError{Name: "grid_image_url", err: fmt.Errorf(`ent: validator failed for field "Task.grid_image_url": %w`, err)}
		}
	}
	if v, ok := tc.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Task.status": %w`, err)}
		}
	}
	if v, ok := tc.mutation.AuthorName(); ok {
		if err := task.AuthorNameValidator(v); err != nil {
			return &ValidationError{Name: "author_name", err: fmt.Errorf(`ent: validator failed for field "Task.author_name": %w`, err)}
		}
	}
	return nil
}

func (tc *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TaskCreate) createSpec() (*Task, *sqlgraph.CreateSpec) {
	var (
		_node = &Task{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(task.Table, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tc.conflict
	if value, ok := tc.mutation.CreateTime(); ok {
		_spec.SetField(task.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := tc.mutation.UpdateTime(); ok {
		_spec.SetField(task.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := tc.mutation.DeleteTime(); ok {
		_spec.SetField(task.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = &value
	}
	if value, ok := tc.mutation.Prompt(); ok {
		_spec.SetField(task.FieldPrompt, field.TypeString, value)
		_node.Prompt = value
	}
	if value, ok := tc.mutation.NegativePrompt(); ok {
		_spec.SetField(task.FieldNegativePrompt, field.TypeString, value)
		_node.NegativePrompt = value
	}
	if value, ok := tc.mutation.Category(); ok {
		_spec.SetField(task.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := tc.mutation.Weight(); ok {
		_spec.SetField(task.FieldWeight, field.TypeFloat32, value)
		_node.Weight = value
	}
	if value, ok := tc.mutation.Height(); ok {
		_spec.SetField(task.FieldHeight, field.TypeFloat32, value)
		_node.Height = value
	}
	if value, ok := tc.mutation.ImgSize(); ok {
		_spec.SetField(task.FieldImgSize, field.TypeString, value)
		_node.ImgSize = value
	}
	if value, ok := tc.mutation.Seed(); ok {
		_spec.SetField(task.FieldSeed, field.TypeString, value)
		_node.Seed = value
	}
	if value, ok := tc.mutation.SamplerName(); ok {
		_spec.SetField(task.FieldSamplerName, field.TypeString, value)
		_node.SamplerName = value
	}
	if value, ok := tc.mutation.Steps(); ok {
		_spec.SetField(task.FieldSteps, field.TypeInt, value)
		_node.Steps = value
	}
	if value, ok := tc.mutation.CfgScale(); ok {
		_spec.SetField(task.FieldCfgScale, field.TypeInt, value)
		_node.CfgScale = value
	}
	if value, ok := tc.mutation.BatchSize(); ok {
		_spec.SetField(task.FieldBatchSize, field.TypeInt, value)
		_node.BatchSize = value
	}
	if value, ok := tc.mutation.Total(); ok {
		_spec.SetField(task.FieldTotal, field.TypeInt, value)
		_node.Total = value
	}
	if value, ok := tc.mutation.SdModelName(); ok {
		_spec.SetField(task.FieldSdModelName, field.TypeString, value)
		_node.SdModelName = value
	}
	if value, ok := tc.mutation.SdModelHash(); ok {
		_spec.SetField(task.FieldSdModelHash, field.TypeString, value)
		_node.SdModelHash = value
	}
	if value, ok := tc.mutation.SdVaeName(); ok {
		_spec.SetField(task.FieldSdVaeName, field.TypeString, value)
		_node.SdVaeName = value
	}
	if value, ok := tc.mutation.SdVaeHash(); ok {
		_spec.SetField(task.FieldSdVaeHash, field.TypeString, value)
		_node.SdVaeHash = value
	}
	if value, ok := tc.mutation.JobTimestamp(); ok {
		_spec.SetField(task.FieldJobTimestamp, field.TypeTime, value)
		_node.JobTimestamp = value
	}
	if value, ok := tc.mutation.Version(); ok {
		_spec.SetField(task.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := tc.mutation.GridImageURL(); ok {
		_spec.SetField(task.FieldGridImageURL, field.TypeString, value)
		_node.GridImageURL = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(task.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := tc.mutation.AuthorID(); ok {
		_spec.SetField(task.FieldAuthorID, field.TypeInt, value)
		_node.AuthorID = value
	}
	if value, ok := tc.mutation.AuthorName(); ok {
		_spec.SetField(task.FieldAuthorName, field.TypeString, value)
		_node.AuthorName = value
	}
	if value, ok := tc.mutation.RefImages(); ok {
		_spec.SetField(task.FieldRefImages, field.TypeJSON, value)
		_node.RefImages = value
	}
	if value, ok := tc.mutation.Store(); ok {
		_spec.SetField(task.FieldStore, field.TypeString, value)
		_node.Store = value
	}
	if value, ok := tc.mutation.Count(); ok {
		_spec.SetField(task.FieldCount, field.TypeInt, value)
		_node.Count = value
	}
	if value, ok := tc.mutation.HasExcellent(); ok {
		_spec.SetField(task.FieldHasExcellent, field.TypeBool, value)
		_node.HasExcellent = value
	}
	if value, ok := tc.mutation.Extra(); ok {
		_spec.SetField(task.FieldExtra, field.TypeString, value)
		_node.Extra = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Task.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (tc *TaskCreate) OnConflict(opts ...sql.ConflictOption) *TaskUpsertOne {
	tc.conflict = opts
	return &TaskUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TaskCreate) OnConflictColumns(columns ...string) *TaskUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TaskUpsertOne{
		create: tc,
	}
}

type (
	// TaskUpsertOne is the builder for "upsert"-ing
	//  one Task node.
	TaskUpsertOne struct {
		create *TaskCreate
	}

	// TaskUpsert is the "OnConflict" setter.
	TaskUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *TaskUpsert) SetUpdateTime(v time.Time) *TaskUpsert {
	u.Set(task.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TaskUpsert) UpdateUpdateTime() *TaskUpsert {
	u.SetExcluded(task.FieldUpdateTime)
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *TaskUpsert) SetDeleteTime(v time.Time) *TaskUpsert {
	u.Set(task.FieldDeleteTime, v)
	return u
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *TaskUpsert) UpdateDeleteTime() *TaskUpsert {
	u.SetExcluded(task.FieldDeleteTime)
	return u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *TaskUpsert) ClearDeleteTime() *TaskUpsert {
	u.SetNull(task.FieldDeleteTime)
	return u
}

// SetPrompt sets the "prompt" field.
func (u *TaskUpsert) SetPrompt(v string) *TaskUpsert {
	u.Set(task.FieldPrompt, v)
	return u
}

// UpdatePrompt sets the "prompt" field to the value that was provided on create.
func (u *TaskUpsert) UpdatePrompt() *TaskUpsert {
	u.SetExcluded(task.FieldPrompt)
	return u
}

// ClearPrompt clears the value of the "prompt" field.
func (u *TaskUpsert) ClearPrompt() *TaskUpsert {
	u.SetNull(task.FieldPrompt)
	return u
}

// SetNegativePrompt sets the "negative_prompt" field.
func (u *TaskUpsert) SetNegativePrompt(v string) *TaskUpsert {
	u.Set(task.FieldNegativePrompt, v)
	return u
}

// UpdateNegativePrompt sets the "negative_prompt" field to the value that was provided on create.
func (u *TaskUpsert) UpdateNegativePrompt() *TaskUpsert {
	u.SetExcluded(task.FieldNegativePrompt)
	return u
}

// ClearNegativePrompt clears the value of the "negative_prompt" field.
func (u *TaskUpsert) ClearNegativePrompt() *TaskUpsert {
	u.SetNull(task.FieldNegativePrompt)
	return u
}

// SetCategory sets the "category" field.
func (u *TaskUpsert) SetCategory(v string) *TaskUpsert {
	u.Set(task.FieldCategory, v)
	return u
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *TaskUpsert) UpdateCategory() *TaskUpsert {
	u.SetExcluded(task.FieldCategory)
	return u
}

// ClearCategory clears the value of the "category" field.
func (u *TaskUpsert) ClearCategory() *TaskUpsert {
	u.SetNull(task.FieldCategory)
	return u
}

// SetWeight sets the "weight" field.
func (u *TaskUpsert) SetWeight(v float32) *TaskUpsert {
	u.Set(task.FieldWeight, v)
	return u
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *TaskUpsert) UpdateWeight() *TaskUpsert {
	u.SetExcluded(task.FieldWeight)
	return u
}

// AddWeight adds v to the "weight" field.
func (u *TaskUpsert) AddWeight(v float32) *TaskUpsert {
	u.Add(task.FieldWeight, v)
	return u
}

// ClearWeight clears the value of the "weight" field.
func (u *TaskUpsert) ClearWeight() *TaskUpsert {
	u.SetNull(task.FieldWeight)
	return u
}

// SetHeight sets the "height" field.
func (u *TaskUpsert) SetHeight(v float32) *TaskUpsert {
	u.Set(task.FieldHeight, v)
	return u
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *TaskUpsert) UpdateHeight() *TaskUpsert {
	u.SetExcluded(task.FieldHeight)
	return u
}

// AddHeight adds v to the "height" field.
func (u *TaskUpsert) AddHeight(v float32) *TaskUpsert {
	u.Add(task.FieldHeight, v)
	return u
}

// ClearHeight clears the value of the "height" field.
func (u *TaskUpsert) ClearHeight() *TaskUpsert {
	u.SetNull(task.FieldHeight)
	return u
}

// SetImgSize sets the "img_size" field.
func (u *TaskUpsert) SetImgSize(v string) *TaskUpsert {
	u.Set(task.FieldImgSize, v)
	return u
}

// UpdateImgSize sets the "img_size" field to the value that was provided on create.
func (u *TaskUpsert) UpdateImgSize() *TaskUpsert {
	u.SetExcluded(task.FieldImgSize)
	return u
}

// ClearImgSize clears the value of the "img_size" field.
func (u *TaskUpsert) ClearImgSize() *TaskUpsert {
	u.SetNull(task.FieldImgSize)
	return u
}

// SetSeed sets the "seed" field.
func (u *TaskUpsert) SetSeed(v string) *TaskUpsert {
	u.Set(task.FieldSeed, v)
	return u
}

// UpdateSeed sets the "seed" field to the value that was provided on create.
func (u *TaskUpsert) UpdateSeed() *TaskUpsert {
	u.SetExcluded(task.FieldSeed)
	return u
}

// ClearSeed clears the value of the "seed" field.
func (u *TaskUpsert) ClearSeed() *TaskUpsert {
	u.SetNull(task.FieldSeed)
	return u
}

// SetSamplerName sets the "sampler_name" field.
func (u *TaskUpsert) SetSamplerName(v string) *TaskUpsert {
	u.Set(task.FieldSamplerName, v)
	return u
}

// UpdateSamplerName sets the "sampler_name" field to the value that was provided on create.
func (u *TaskUpsert) UpdateSamplerName() *TaskUpsert {
	u.SetExcluded(task.FieldSamplerName)
	return u
}

// ClearSamplerName clears the value of the "sampler_name" field.
func (u *TaskUpsert) ClearSamplerName() *TaskUpsert {
	u.SetNull(task.FieldSamplerName)
	return u
}

// SetSteps sets the "steps" field.
func (u *TaskUpsert) SetSteps(v int) *TaskUpsert {
	u.Set(task.FieldSteps, v)
	return u
}

// UpdateSteps sets the "steps" field to the value that was provided on create.
func (u *TaskUpsert) UpdateSteps() *TaskUpsert {
	u.SetExcluded(task.FieldSteps)
	return u
}

// AddSteps adds v to the "steps" field.
func (u *TaskUpsert) AddSteps(v int) *TaskUpsert {
	u.Add(task.FieldSteps, v)
	return u
}

// ClearSteps clears the value of the "steps" field.
func (u *TaskUpsert) ClearSteps() *TaskUpsert {
	u.SetNull(task.FieldSteps)
	return u
}

// SetCfgScale sets the "cfg_scale" field.
func (u *TaskUpsert) SetCfgScale(v int) *TaskUpsert {
	u.Set(task.FieldCfgScale, v)
	return u
}

// UpdateCfgScale sets the "cfg_scale" field to the value that was provided on create.
func (u *TaskUpsert) UpdateCfgScale() *TaskUpsert {
	u.SetExcluded(task.FieldCfgScale)
	return u
}

// AddCfgScale adds v to the "cfg_scale" field.
func (u *TaskUpsert) AddCfgScale(v int) *TaskUpsert {
	u.Add(task.FieldCfgScale, v)
	return u
}

// ClearCfgScale clears the value of the "cfg_scale" field.
func (u *TaskUpsert) ClearCfgScale() *TaskUpsert {
	u.SetNull(task.FieldCfgScale)
	return u
}

// SetBatchSize sets the "batch_size" field.
func (u *TaskUpsert) SetBatchSize(v int) *TaskUpsert {
	u.Set(task.FieldBatchSize, v)
	return u
}

// UpdateBatchSize sets the "batch_size" field to the value that was provided on create.
func (u *TaskUpsert) UpdateBatchSize() *TaskUpsert {
	u.SetExcluded(task.FieldBatchSize)
	return u
}

// AddBatchSize adds v to the "batch_size" field.
func (u *TaskUpsert) AddBatchSize(v int) *TaskUpsert {
	u.Add(task.FieldBatchSize, v)
	return u
}

// ClearBatchSize clears the value of the "batch_size" field.
func (u *TaskUpsert) ClearBatchSize() *TaskUpsert {
	u.SetNull(task.FieldBatchSize)
	return u
}

// SetTotal sets the "total" field.
func (u *TaskUpsert) SetTotal(v int) *TaskUpsert {
	u.Set(task.FieldTotal, v)
	return u
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *TaskUpsert) UpdateTotal() *TaskUpsert {
	u.SetExcluded(task.FieldTotal)
	return u
}

// AddTotal adds v to the "total" field.
func (u *TaskUpsert) AddTotal(v int) *TaskUpsert {
	u.Add(task.FieldTotal, v)
	return u
}

// ClearTotal clears the value of the "total" field.
func (u *TaskUpsert) ClearTotal() *TaskUpsert {
	u.SetNull(task.FieldTotal)
	return u
}

// SetSdModelName sets the "sd_model_name" field.
func (u *TaskUpsert) SetSdModelName(v string) *TaskUpsert {
	u.Set(task.FieldSdModelName, v)
	return u
}

// UpdateSdModelName sets the "sd_model_name" field to the value that was provided on create.
func (u *TaskUpsert) UpdateSdModelName() *TaskUpsert {
	u.SetExcluded(task.FieldSdModelName)
	return u
}

// ClearSdModelName clears the value of the "sd_model_name" field.
func (u *TaskUpsert) ClearSdModelName() *TaskUpsert {
	u.SetNull(task.FieldSdModelName)
	return u
}

// SetSdModelHash sets the "sd_model_hash" field.
func (u *TaskUpsert) SetSdModelHash(v string) *TaskUpsert {
	u.Set(task.FieldSdModelHash, v)
	return u
}

// UpdateSdModelHash sets the "sd_model_hash" field to the value that was provided on create.
func (u *TaskUpsert) UpdateSdModelHash() *TaskUpsert {
	u.SetExcluded(task.FieldSdModelHash)
	return u
}

// ClearSdModelHash clears the value of the "sd_model_hash" field.
func (u *TaskUpsert) ClearSdModelHash() *TaskUpsert {
	u.SetNull(task.FieldSdModelHash)
	return u
}

// SetSdVaeName sets the "sd_vae_name" field.
func (u *TaskUpsert) SetSdVaeName(v string) *TaskUpsert {
	u.Set(task.FieldSdVaeName, v)
	return u
}

// UpdateSdVaeName sets the "sd_vae_name" field to the value that was provided on create.
func (u *TaskUpsert) UpdateSdVaeName() *TaskUpsert {
	u.SetExcluded(task.FieldSdVaeName)
	return u
}

// ClearSdVaeName clears the value of the "sd_vae_name" field.
func (u *TaskUpsert) ClearSdVaeName() *TaskUpsert {
	u.SetNull(task.FieldSdVaeName)
	return u
}

// SetSdVaeHash sets the "sd_vae_hash" field.
func (u *TaskUpsert) SetSdVaeHash(v string) *TaskUpsert {
	u.Set(task.FieldSdVaeHash, v)
	return u
}

// UpdateSdVaeHash sets the "sd_vae_hash" field to the value that was provided on create.
func (u *TaskUpsert) UpdateSdVaeHash() *TaskUpsert {
	u.SetExcluded(task.FieldSdVaeHash)
	return u
}

// ClearSdVaeHash clears the value of the "sd_vae_hash" field.
func (u *TaskUpsert) ClearSdVaeHash() *TaskUpsert {
	u.SetNull(task.FieldSdVaeHash)
	return u
}

// SetJobTimestamp sets the "job_timestamp" field.
func (u *TaskUpsert) SetJobTimestamp(v time.Time) *TaskUpsert {
	u.Set(task.FieldJobTimestamp, v)
	return u
}

// UpdateJobTimestamp sets the "job_timestamp" field to the value that was provided on create.
func (u *TaskUpsert) UpdateJobTimestamp() *TaskUpsert {
	u.SetExcluded(task.FieldJobTimestamp)
	return u
}

// ClearJobTimestamp clears the value of the "job_timestamp" field.
func (u *TaskUpsert) ClearJobTimestamp() *TaskUpsert {
	u.SetNull(task.FieldJobTimestamp)
	return u
}

// SetVersion sets the "version" field.
func (u *TaskUpsert) SetVersion(v string) *TaskUpsert {
	u.Set(task.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *TaskUpsert) UpdateVersion() *TaskUpsert {
	u.SetExcluded(task.FieldVersion)
	return u
}

// ClearVersion clears the value of the "version" field.
func (u *TaskUpsert) ClearVersion() *TaskUpsert {
	u.SetNull(task.FieldVersion)
	return u
}

// SetGridImageURL sets the "grid_image_url" field.
func (u *TaskUpsert) SetGridImageURL(v string) *TaskUpsert {
	u.Set(task.FieldGridImageURL, v)
	return u
}

// UpdateGridImageURL sets the "grid_image_url" field to the value that was provided on create.
func (u *TaskUpsert) UpdateGridImageURL() *TaskUpsert {
	u.SetExcluded(task.FieldGridImageURL)
	return u
}

// ClearGridImageURL clears the value of the "grid_image_url" field.
func (u *TaskUpsert) ClearGridImageURL() *TaskUpsert {
	u.SetNull(task.FieldGridImageURL)
	return u
}

// SetStatus sets the "status" field.
func (u *TaskUpsert) SetStatus(v string) *TaskUpsert {
	u.Set(task.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskUpsert) UpdateStatus() *TaskUpsert {
	u.SetExcluded(task.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *TaskUpsert) ClearStatus() *TaskUpsert {
	u.SetNull(task.FieldStatus)
	return u
}

// SetAuthorID sets the "author_id" field.
func (u *TaskUpsert) SetAuthorID(v int) *TaskUpsert {
	u.Set(task.FieldAuthorID, v)
	return u
}

// UpdateAuthorID sets the "author_id" field to the value that was provided on create.
func (u *TaskUpsert) UpdateAuthorID() *TaskUpsert {
	u.SetExcluded(task.FieldAuthorID)
	return u
}

// AddAuthorID adds v to the "author_id" field.
func (u *TaskUpsert) AddAuthorID(v int) *TaskUpsert {
	u.Add(task.FieldAuthorID, v)
	return u
}

// ClearAuthorID clears the value of the "author_id" field.
func (u *TaskUpsert) ClearAuthorID() *TaskUpsert {
	u.SetNull(task.FieldAuthorID)
	return u
}

// SetAuthorName sets the "author_name" field.
func (u *TaskUpsert) SetAuthorName(v string) *TaskUpsert {
	u.Set(task.FieldAuthorName, v)
	return u
}

// UpdateAuthorName sets the "author_name" field to the value that was provided on create.
func (u *TaskUpsert) UpdateAuthorName() *TaskUpsert {
	u.SetExcluded(task.FieldAuthorName)
	return u
}

// ClearAuthorName clears the value of the "author_name" field.
func (u *TaskUpsert) ClearAuthorName() *TaskUpsert {
	u.SetNull(task.FieldAuthorName)
	return u
}

// SetRefImages sets the "ref_images" field.
func (u *TaskUpsert) SetRefImages(v []string) *TaskUpsert {
	u.Set(task.FieldRefImages, v)
	return u
}

// UpdateRefImages sets the "ref_images" field to the value that was provided on create.
func (u *TaskUpsert) UpdateRefImages() *TaskUpsert {
	u.SetExcluded(task.FieldRefImages)
	return u
}

// ClearRefImages clears the value of the "ref_images" field.
func (u *TaskUpsert) ClearRefImages() *TaskUpsert {
	u.SetNull(task.FieldRefImages)
	return u
}

// SetStore sets the "store" field.
func (u *TaskUpsert) SetStore(v string) *TaskUpsert {
	u.Set(task.FieldStore, v)
	return u
}

// UpdateStore sets the "store" field to the value that was provided on create.
func (u *TaskUpsert) UpdateStore() *TaskUpsert {
	u.SetExcluded(task.FieldStore)
	return u
}

// ClearStore clears the value of the "store" field.
func (u *TaskUpsert) ClearStore() *TaskUpsert {
	u.SetNull(task.FieldStore)
	return u
}

// SetCount sets the "count" field.
func (u *TaskUpsert) SetCount(v int) *TaskUpsert {
	u.Set(task.FieldCount, v)
	return u
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *TaskUpsert) UpdateCount() *TaskUpsert {
	u.SetExcluded(task.FieldCount)
	return u
}

// AddCount adds v to the "count" field.
func (u *TaskUpsert) AddCount(v int) *TaskUpsert {
	u.Add(task.FieldCount, v)
	return u
}

// ClearCount clears the value of the "count" field.
func (u *TaskUpsert) ClearCount() *TaskUpsert {
	u.SetNull(task.FieldCount)
	return u
}

// SetHasExcellent sets the "has_excellent" field.
func (u *TaskUpsert) SetHasExcellent(v bool) *TaskUpsert {
	u.Set(task.FieldHasExcellent, v)
	return u
}

// UpdateHasExcellent sets the "has_excellent" field to the value that was provided on create.
func (u *TaskUpsert) UpdateHasExcellent() *TaskUpsert {
	u.SetExcluded(task.FieldHasExcellent)
	return u
}

// ClearHasExcellent clears the value of the "has_excellent" field.
func (u *TaskUpsert) ClearHasExcellent() *TaskUpsert {
	u.SetNull(task.FieldHasExcellent)
	return u
}

// SetExtra sets the "extra" field.
func (u *TaskUpsert) SetExtra(v string) *TaskUpsert {
	u.Set(task.FieldExtra, v)
	return u
}

// UpdateExtra sets the "extra" field to the value that was provided on create.
func (u *TaskUpsert) UpdateExtra() *TaskUpsert {
	u.SetExcluded(task.FieldExtra)
	return u
}

// ClearExtra clears the value of the "extra" field.
func (u *TaskUpsert) ClearExtra() *TaskUpsert {
	u.SetNull(task.FieldExtra)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TaskUpsertOne) UpdateNewValues() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(task.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TaskUpsertOne) Ignore() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskUpsertOne) DoNothing() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskCreate.OnConflict
// documentation for more info.
func (u *TaskUpsertOne) Update(set func(*TaskUpsert)) *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *TaskUpsertOne) SetUpdateTime(v time.Time) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateUpdateTime() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *TaskUpsertOne) SetDeleteTime(v time.Time) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateDeleteTime() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *TaskUpsertOne) ClearDeleteTime() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearDeleteTime()
	})
}

// SetPrompt sets the "prompt" field.
func (u *TaskUpsertOne) SetPrompt(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetPrompt(v)
	})
}

// UpdatePrompt sets the "prompt" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdatePrompt() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdatePrompt()
	})
}

// ClearPrompt clears the value of the "prompt" field.
func (u *TaskUpsertOne) ClearPrompt() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearPrompt()
	})
}

// SetNegativePrompt sets the "negative_prompt" field.
func (u *TaskUpsertOne) SetNegativePrompt(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetNegativePrompt(v)
	})
}

// UpdateNegativePrompt sets the "negative_prompt" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateNegativePrompt() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateNegativePrompt()
	})
}

// ClearNegativePrompt clears the value of the "negative_prompt" field.
func (u *TaskUpsertOne) ClearNegativePrompt() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearNegativePrompt()
	})
}

// SetCategory sets the "category" field.
func (u *TaskUpsertOne) SetCategory(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateCategory() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateCategory()
	})
}

// ClearCategory clears the value of the "category" field.
func (u *TaskUpsertOne) ClearCategory() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearCategory()
	})
}

// SetWeight sets the "weight" field.
func (u *TaskUpsertOne) SetWeight(v float32) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetWeight(v)
	})
}

// AddWeight adds v to the "weight" field.
func (u *TaskUpsertOne) AddWeight(v float32) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddWeight(v)
	})
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateWeight() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateWeight()
	})
}

// ClearWeight clears the value of the "weight" field.
func (u *TaskUpsertOne) ClearWeight() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearWeight()
	})
}

// SetHeight sets the "height" field.
func (u *TaskUpsertOne) SetHeight(v float32) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetHeight(v)
	})
}

// AddHeight adds v to the "height" field.
func (u *TaskUpsertOne) AddHeight(v float32) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddHeight(v)
	})
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateHeight() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateHeight()
	})
}

// ClearHeight clears the value of the "height" field.
func (u *TaskUpsertOne) ClearHeight() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearHeight()
	})
}

// SetImgSize sets the "img_size" field.
func (u *TaskUpsertOne) SetImgSize(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetImgSize(v)
	})
}

// UpdateImgSize sets the "img_size" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateImgSize() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateImgSize()
	})
}

// ClearImgSize clears the value of the "img_size" field.
func (u *TaskUpsertOne) ClearImgSize() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearImgSize()
	})
}

// SetSeed sets the "seed" field.
func (u *TaskUpsertOne) SetSeed(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetSeed(v)
	})
}

// UpdateSeed sets the "seed" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateSeed() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateSeed()
	})
}

// ClearSeed clears the value of the "seed" field.
func (u *TaskUpsertOne) ClearSeed() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearSeed()
	})
}

// SetSamplerName sets the "sampler_name" field.
func (u *TaskUpsertOne) SetSamplerName(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetSamplerName(v)
	})
}

// UpdateSamplerName sets the "sampler_name" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateSamplerName() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateSamplerName()
	})
}

// ClearSamplerName clears the value of the "sampler_name" field.
func (u *TaskUpsertOne) ClearSamplerName() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearSamplerName()
	})
}

// SetSteps sets the "steps" field.
func (u *TaskUpsertOne) SetSteps(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetSteps(v)
	})
}

// AddSteps adds v to the "steps" field.
func (u *TaskUpsertOne) AddSteps(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddSteps(v)
	})
}

// UpdateSteps sets the "steps" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateSteps() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateSteps()
	})
}

// ClearSteps clears the value of the "steps" field.
func (u *TaskUpsertOne) ClearSteps() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearSteps()
	})
}

// SetCfgScale sets the "cfg_scale" field.
func (u *TaskUpsertOne) SetCfgScale(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetCfgScale(v)
	})
}

// AddCfgScale adds v to the "cfg_scale" field.
func (u *TaskUpsertOne) AddCfgScale(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddCfgScale(v)
	})
}

// UpdateCfgScale sets the "cfg_scale" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateCfgScale() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateCfgScale()
	})
}

// ClearCfgScale clears the value of the "cfg_scale" field.
func (u *TaskUpsertOne) ClearCfgScale() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearCfgScale()
	})
}

// SetBatchSize sets the "batch_size" field.
func (u *TaskUpsertOne) SetBatchSize(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetBatchSize(v)
	})
}

// AddBatchSize adds v to the "batch_size" field.
func (u *TaskUpsertOne) AddBatchSize(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddBatchSize(v)
	})
}

// UpdateBatchSize sets the "batch_size" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateBatchSize() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateBatchSize()
	})
}

// ClearBatchSize clears the value of the "batch_size" field.
func (u *TaskUpsertOne) ClearBatchSize() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearBatchSize()
	})
}

// SetTotal sets the "total" field.
func (u *TaskUpsertOne) SetTotal(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetTotal(v)
	})
}

// AddTotal adds v to the "total" field.
func (u *TaskUpsertOne) AddTotal(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddTotal(v)
	})
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateTotal() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateTotal()
	})
}

// ClearTotal clears the value of the "total" field.
func (u *TaskUpsertOne) ClearTotal() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearTotal()
	})
}

// SetSdModelName sets the "sd_model_name" field.
func (u *TaskUpsertOne) SetSdModelName(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetSdModelName(v)
	})
}

// UpdateSdModelName sets the "sd_model_name" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateSdModelName() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateSdModelName()
	})
}

// ClearSdModelName clears the value of the "sd_model_name" field.
func (u *TaskUpsertOne) ClearSdModelName() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearSdModelName()
	})
}

// SetSdModelHash sets the "sd_model_hash" field.
func (u *TaskUpsertOne) SetSdModelHash(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetSdModelHash(v)
	})
}

// UpdateSdModelHash sets the "sd_model_hash" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateSdModelHash() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateSdModelHash()
	})
}

// ClearSdModelHash clears the value of the "sd_model_hash" field.
func (u *TaskUpsertOne) ClearSdModelHash() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearSdModelHash()
	})
}

// SetSdVaeName sets the "sd_vae_name" field.
func (u *TaskUpsertOne) SetSdVaeName(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetSdVaeName(v)
	})
}

// UpdateSdVaeName sets the "sd_vae_name" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateSdVaeName() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateSdVaeName()
	})
}

// ClearSdVaeName clears the value of the "sd_vae_name" field.
func (u *TaskUpsertOne) ClearSdVaeName() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearSdVaeName()
	})
}

// SetSdVaeHash sets the "sd_vae_hash" field.
func (u *TaskUpsertOne) SetSdVaeHash(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetSdVaeHash(v)
	})
}

// UpdateSdVaeHash sets the "sd_vae_hash" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateSdVaeHash() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateSdVaeHash()
	})
}

// ClearSdVaeHash clears the value of the "sd_vae_hash" field.
func (u *TaskUpsertOne) ClearSdVaeHash() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearSdVaeHash()
	})
}

// SetJobTimestamp sets the "job_timestamp" field.
func (u *TaskUpsertOne) SetJobTimestamp(v time.Time) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetJobTimestamp(v)
	})
}

// UpdateJobTimestamp sets the "job_timestamp" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateJobTimestamp() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateJobTimestamp()
	})
}

// ClearJobTimestamp clears the value of the "job_timestamp" field.
func (u *TaskUpsertOne) ClearJobTimestamp() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearJobTimestamp()
	})
}

// SetVersion sets the "version" field.
func (u *TaskUpsertOne) SetVersion(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateVersion() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateVersion()
	})
}

// ClearVersion clears the value of the "version" field.
func (u *TaskUpsertOne) ClearVersion() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearVersion()
	})
}

// SetGridImageURL sets the "grid_image_url" field.
func (u *TaskUpsertOne) SetGridImageURL(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetGridImageURL(v)
	})
}

// UpdateGridImageURL sets the "grid_image_url" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateGridImageURL() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateGridImageURL()
	})
}

// ClearGridImageURL clears the value of the "grid_image_url" field.
func (u *TaskUpsertOne) ClearGridImageURL() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearGridImageURL()
	})
}

// SetStatus sets the "status" field.
func (u *TaskUpsertOne) SetStatus(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateStatus() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *TaskUpsertOne) ClearStatus() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearStatus()
	})
}

// SetAuthorID sets the "author_id" field.
func (u *TaskUpsertOne) SetAuthorID(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetAuthorID(v)
	})
}

// AddAuthorID adds v to the "author_id" field.
func (u *TaskUpsertOne) AddAuthorID(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddAuthorID(v)
	})
}

// UpdateAuthorID sets the "author_id" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateAuthorID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateAuthorID()
	})
}

// ClearAuthorID clears the value of the "author_id" field.
func (u *TaskUpsertOne) ClearAuthorID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearAuthorID()
	})
}

// SetAuthorName sets the "author_name" field.
func (u *TaskUpsertOne) SetAuthorName(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetAuthorName(v)
	})
}

// UpdateAuthorName sets the "author_name" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateAuthorName() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateAuthorName()
	})
}

// ClearAuthorName clears the value of the "author_name" field.
func (u *TaskUpsertOne) ClearAuthorName() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearAuthorName()
	})
}

// SetRefImages sets the "ref_images" field.
func (u *TaskUpsertOne) SetRefImages(v []string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetRefImages(v)
	})
}

// UpdateRefImages sets the "ref_images" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateRefImages() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateRefImages()
	})
}

// ClearRefImages clears the value of the "ref_images" field.
func (u *TaskUpsertOne) ClearRefImages() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearRefImages()
	})
}

// SetStore sets the "store" field.
func (u *TaskUpsertOne) SetStore(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetStore(v)
	})
}

// UpdateStore sets the "store" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateStore() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateStore()
	})
}

// ClearStore clears the value of the "store" field.
func (u *TaskUpsertOne) ClearStore() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearStore()
	})
}

// SetCount sets the "count" field.
func (u *TaskUpsertOne) SetCount(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetCount(v)
	})
}

// AddCount adds v to the "count" field.
func (u *TaskUpsertOne) AddCount(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddCount(v)
	})
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateCount() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateCount()
	})
}

// ClearCount clears the value of the "count" field.
func (u *TaskUpsertOne) ClearCount() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearCount()
	})
}

// SetHasExcellent sets the "has_excellent" field.
func (u *TaskUpsertOne) SetHasExcellent(v bool) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetHasExcellent(v)
	})
}

// UpdateHasExcellent sets the "has_excellent" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateHasExcellent() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateHasExcellent()
	})
}

// ClearHasExcellent clears the value of the "has_excellent" field.
func (u *TaskUpsertOne) ClearHasExcellent() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearHasExcellent()
	})
}

// SetExtra sets the "extra" field.
func (u *TaskUpsertOne) SetExtra(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetExtra(v)
	})
}

// UpdateExtra sets the "extra" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateExtra() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateExtra()
	})
}

// ClearExtra clears the value of the "extra" field.
func (u *TaskUpsertOne) ClearExtra() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearExtra()
	})
}

// Exec executes the query.
func (u *TaskUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TaskUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TaskUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TaskCreateBulk is the builder for creating many Task entities in bulk.
type TaskCreateBulk struct {
	config
	err      error
	builders []*TaskCreate
	conflict []sql.ConflictOption
}

// Save creates the Task entities in the database.
func (tcb *TaskCreateBulk) Save(ctx context.Context) ([]*Task, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Task, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TaskCreateBulk) SaveX(ctx context.Context) []*Task {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TaskCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TaskCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Task.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (tcb *TaskCreateBulk) OnConflict(opts ...sql.ConflictOption) *TaskUpsertBulk {
	tcb.conflict = opts
	return &TaskUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TaskCreateBulk) OnConflictColumns(columns ...string) *TaskUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TaskUpsertBulk{
		create: tcb,
	}
}

// TaskUpsertBulk is the builder for "upsert"-ing
// a bulk of Task nodes.
type TaskUpsertBulk struct {
	create *TaskCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TaskUpsertBulk) UpdateNewValues() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(task.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TaskUpsertBulk) Ignore() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskUpsertBulk) DoNothing() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskCreateBulk.OnConflict
// documentation for more info.
func (u *TaskUpsertBulk) Update(set func(*TaskUpsert)) *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *TaskUpsertBulk) SetUpdateTime(v time.Time) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateUpdateTime() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *TaskUpsertBulk) SetDeleteTime(v time.Time) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateDeleteTime() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *TaskUpsertBulk) ClearDeleteTime() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearDeleteTime()
	})
}

// SetPrompt sets the "prompt" field.
func (u *TaskUpsertBulk) SetPrompt(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetPrompt(v)
	})
}

// UpdatePrompt sets the "prompt" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdatePrompt() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdatePrompt()
	})
}

// ClearPrompt clears the value of the "prompt" field.
func (u *TaskUpsertBulk) ClearPrompt() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearPrompt()
	})
}

// SetNegativePrompt sets the "negative_prompt" field.
func (u *TaskUpsertBulk) SetNegativePrompt(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetNegativePrompt(v)
	})
}

// UpdateNegativePrompt sets the "negative_prompt" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateNegativePrompt() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateNegativePrompt()
	})
}

// ClearNegativePrompt clears the value of the "negative_prompt" field.
func (u *TaskUpsertBulk) ClearNegativePrompt() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearNegativePrompt()
	})
}

// SetCategory sets the "category" field.
func (u *TaskUpsertBulk) SetCategory(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateCategory() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateCategory()
	})
}

// ClearCategory clears the value of the "category" field.
func (u *TaskUpsertBulk) ClearCategory() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearCategory()
	})
}

// SetWeight sets the "weight" field.
func (u *TaskUpsertBulk) SetWeight(v float32) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetWeight(v)
	})
}

// AddWeight adds v to the "weight" field.
func (u *TaskUpsertBulk) AddWeight(v float32) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddWeight(v)
	})
}

// UpdateWeight sets the "weight" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateWeight() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateWeight()
	})
}

// ClearWeight clears the value of the "weight" field.
func (u *TaskUpsertBulk) ClearWeight() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearWeight()
	})
}

// SetHeight sets the "height" field.
func (u *TaskUpsertBulk) SetHeight(v float32) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetHeight(v)
	})
}

// AddHeight adds v to the "height" field.
func (u *TaskUpsertBulk) AddHeight(v float32) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddHeight(v)
	})
}

// UpdateHeight sets the "height" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateHeight() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateHeight()
	})
}

// ClearHeight clears the value of the "height" field.
func (u *TaskUpsertBulk) ClearHeight() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearHeight()
	})
}

// SetImgSize sets the "img_size" field.
func (u *TaskUpsertBulk) SetImgSize(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetImgSize(v)
	})
}

// UpdateImgSize sets the "img_size" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateImgSize() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateImgSize()
	})
}

// ClearImgSize clears the value of the "img_size" field.
func (u *TaskUpsertBulk) ClearImgSize() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearImgSize()
	})
}

// SetSeed sets the "seed" field.
func (u *TaskUpsertBulk) SetSeed(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetSeed(v)
	})
}

// UpdateSeed sets the "seed" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateSeed() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateSeed()
	})
}

// ClearSeed clears the value of the "seed" field.
func (u *TaskUpsertBulk) ClearSeed() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearSeed()
	})
}

// SetSamplerName sets the "sampler_name" field.
func (u *TaskUpsertBulk) SetSamplerName(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetSamplerName(v)
	})
}

// UpdateSamplerName sets the "sampler_name" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateSamplerName() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateSamplerName()
	})
}

// ClearSamplerName clears the value of the "sampler_name" field.
func (u *TaskUpsertBulk) ClearSamplerName() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearSamplerName()
	})
}

// SetSteps sets the "steps" field.
func (u *TaskUpsertBulk) SetSteps(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetSteps(v)
	})
}

// AddSteps adds v to the "steps" field.
func (u *TaskUpsertBulk) AddSteps(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddSteps(v)
	})
}

// UpdateSteps sets the "steps" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateSteps() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateSteps()
	})
}

// ClearSteps clears the value of the "steps" field.
func (u *TaskUpsertBulk) ClearSteps() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearSteps()
	})
}

// SetCfgScale sets the "cfg_scale" field.
func (u *TaskUpsertBulk) SetCfgScale(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetCfgScale(v)
	})
}

// AddCfgScale adds v to the "cfg_scale" field.
func (u *TaskUpsertBulk) AddCfgScale(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddCfgScale(v)
	})
}

// UpdateCfgScale sets the "cfg_scale" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateCfgScale() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateCfgScale()
	})
}

// ClearCfgScale clears the value of the "cfg_scale" field.
func (u *TaskUpsertBulk) ClearCfgScale() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearCfgScale()
	})
}

// SetBatchSize sets the "batch_size" field.
func (u *TaskUpsertBulk) SetBatchSize(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetBatchSize(v)
	})
}

// AddBatchSize adds v to the "batch_size" field.
func (u *TaskUpsertBulk) AddBatchSize(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddBatchSize(v)
	})
}

// UpdateBatchSize sets the "batch_size" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateBatchSize() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateBatchSize()
	})
}

// ClearBatchSize clears the value of the "batch_size" field.
func (u *TaskUpsertBulk) ClearBatchSize() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearBatchSize()
	})
}

// SetTotal sets the "total" field.
func (u *TaskUpsertBulk) SetTotal(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetTotal(v)
	})
}

// AddTotal adds v to the "total" field.
func (u *TaskUpsertBulk) AddTotal(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddTotal(v)
	})
}

// UpdateTotal sets the "total" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateTotal() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateTotal()
	})
}

// ClearTotal clears the value of the "total" field.
func (u *TaskUpsertBulk) ClearTotal() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearTotal()
	})
}

// SetSdModelName sets the "sd_model_name" field.
func (u *TaskUpsertBulk) SetSdModelName(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetSdModelName(v)
	})
}

// UpdateSdModelName sets the "sd_model_name" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateSdModelName() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateSdModelName()
	})
}

// ClearSdModelName clears the value of the "sd_model_name" field.
func (u *TaskUpsertBulk) ClearSdModelName() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearSdModelName()
	})
}

// SetSdModelHash sets the "sd_model_hash" field.
func (u *TaskUpsertBulk) SetSdModelHash(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetSdModelHash(v)
	})
}

// UpdateSdModelHash sets the "sd_model_hash" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateSdModelHash() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateSdModelHash()
	})
}

// ClearSdModelHash clears the value of the "sd_model_hash" field.
func (u *TaskUpsertBulk) ClearSdModelHash() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearSdModelHash()
	})
}

// SetSdVaeName sets the "sd_vae_name" field.
func (u *TaskUpsertBulk) SetSdVaeName(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetSdVaeName(v)
	})
}

// UpdateSdVaeName sets the "sd_vae_name" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateSdVaeName() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateSdVaeName()
	})
}

// ClearSdVaeName clears the value of the "sd_vae_name" field.
func (u *TaskUpsertBulk) ClearSdVaeName() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearSdVaeName()
	})
}

// SetSdVaeHash sets the "sd_vae_hash" field.
func (u *TaskUpsertBulk) SetSdVaeHash(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetSdVaeHash(v)
	})
}

// UpdateSdVaeHash sets the "sd_vae_hash" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateSdVaeHash() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateSdVaeHash()
	})
}

// ClearSdVaeHash clears the value of the "sd_vae_hash" field.
func (u *TaskUpsertBulk) ClearSdVaeHash() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearSdVaeHash()
	})
}

// SetJobTimestamp sets the "job_timestamp" field.
func (u *TaskUpsertBulk) SetJobTimestamp(v time.Time) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetJobTimestamp(v)
	})
}

// UpdateJobTimestamp sets the "job_timestamp" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateJobTimestamp() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateJobTimestamp()
	})
}

// ClearJobTimestamp clears the value of the "job_timestamp" field.
func (u *TaskUpsertBulk) ClearJobTimestamp() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearJobTimestamp()
	})
}

// SetVersion sets the "version" field.
func (u *TaskUpsertBulk) SetVersion(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateVersion() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateVersion()
	})
}

// ClearVersion clears the value of the "version" field.
func (u *TaskUpsertBulk) ClearVersion() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearVersion()
	})
}

// SetGridImageURL sets the "grid_image_url" field.
func (u *TaskUpsertBulk) SetGridImageURL(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetGridImageURL(v)
	})
}

// UpdateGridImageURL sets the "grid_image_url" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateGridImageURL() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateGridImageURL()
	})
}

// ClearGridImageURL clears the value of the "grid_image_url" field.
func (u *TaskUpsertBulk) ClearGridImageURL() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearGridImageURL()
	})
}

// SetStatus sets the "status" field.
func (u *TaskUpsertBulk) SetStatus(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateStatus() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *TaskUpsertBulk) ClearStatus() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearStatus()
	})
}

// SetAuthorID sets the "author_id" field.
func (u *TaskUpsertBulk) SetAuthorID(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetAuthorID(v)
	})
}

// AddAuthorID adds v to the "author_id" field.
func (u *TaskUpsertBulk) AddAuthorID(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddAuthorID(v)
	})
}

// UpdateAuthorID sets the "author_id" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateAuthorID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateAuthorID()
	})
}

// ClearAuthorID clears the value of the "author_id" field.
func (u *TaskUpsertBulk) ClearAuthorID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearAuthorID()
	})
}

// SetAuthorName sets the "author_name" field.
func (u *TaskUpsertBulk) SetAuthorName(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetAuthorName(v)
	})
}

// UpdateAuthorName sets the "author_name" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateAuthorName() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateAuthorName()
	})
}

// ClearAuthorName clears the value of the "author_name" field.
func (u *TaskUpsertBulk) ClearAuthorName() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearAuthorName()
	})
}

// SetRefImages sets the "ref_images" field.
func (u *TaskUpsertBulk) SetRefImages(v []string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetRefImages(v)
	})
}

// UpdateRefImages sets the "ref_images" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateRefImages() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateRefImages()
	})
}

// ClearRefImages clears the value of the "ref_images" field.
func (u *TaskUpsertBulk) ClearRefImages() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearRefImages()
	})
}

// SetStore sets the "store" field.
func (u *TaskUpsertBulk) SetStore(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetStore(v)
	})
}

// UpdateStore sets the "store" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateStore() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateStore()
	})
}

// ClearStore clears the value of the "store" field.
func (u *TaskUpsertBulk) ClearStore() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearStore()
	})
}

// SetCount sets the "count" field.
func (u *TaskUpsertBulk) SetCount(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetCount(v)
	})
}

// AddCount adds v to the "count" field.
func (u *TaskUpsertBulk) AddCount(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddCount(v)
	})
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateCount() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateCount()
	})
}

// ClearCount clears the value of the "count" field.
func (u *TaskUpsertBulk) ClearCount() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearCount()
	})
}

// SetHasExcellent sets the "has_excellent" field.
func (u *TaskUpsertBulk) SetHasExcellent(v bool) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetHasExcellent(v)
	})
}

// UpdateHasExcellent sets the "has_excellent" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateHasExcellent() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateHasExcellent()
	})
}

// ClearHasExcellent clears the value of the "has_excellent" field.
func (u *TaskUpsertBulk) ClearHasExcellent() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearHasExcellent()
	})
}

// SetExtra sets the "extra" field.
func (u *TaskUpsertBulk) SetExtra(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetExtra(v)
	})
}

// UpdateExtra sets the "extra" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateExtra() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateExtra()
	})
}

// ClearExtra clears the value of the "extra" field.
func (u *TaskUpsertBulk) ClearExtra() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearExtra()
	})
}

// Exec executes the query.
func (u *TaskUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TaskCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
