// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ai-gallery/ent/taskdetail"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskDetailCreate is the builder for creating a TaskDetail entity.
type TaskDetailCreate struct {
	config
	mutation *TaskDetailMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (tdc *TaskDetailCreate) SetCreateTime(t time.Time) *TaskDetailCreate {
	tdc.mutation.SetCreateTime(t)
	return tdc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (tdc *TaskDetailCreate) SetNillableCreateTime(t *time.Time) *TaskDetailCreate {
	if t != nil {
		tdc.SetCreateTime(*t)
	}
	return tdc
}

// SetUpdateTime sets the "update_time" field.
func (tdc *TaskDetailCreate) SetUpdateTime(t time.Time) *TaskDetailCreate {
	tdc.mutation.SetUpdateTime(t)
	return tdc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (tdc *TaskDetailCreate) SetNillableUpdateTime(t *time.Time) *TaskDetailCreate {
	if t != nil {
		tdc.SetUpdateTime(*t)
	}
	return tdc
}

// SetDeleteTime sets the "delete_time" field.
func (tdc *TaskDetailCreate) SetDeleteTime(t time.Time) *TaskDetailCreate {
	tdc.mutation.SetDeleteTime(t)
	return tdc
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (tdc *TaskDetailCreate) SetNillableDeleteTime(t *time.Time) *TaskDetailCreate {
	if t != nil {
		tdc.SetDeleteTime(*t)
	}
	return tdc
}

// SetTaskID sets the "task_id" field.
func (tdc *TaskDetailCreate) SetTaskID(i int) *TaskDetailCreate {
	tdc.mutation.SetTaskID(i)
	return tdc
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (tdc *TaskDetailCreate) SetNillableTaskID(i *int) *TaskDetailCreate {
	if i != nil {
		tdc.SetTaskID(*i)
	}
	return tdc
}

// SetImageURL sets the "image_url" field.
func (tdc *TaskDetailCreate) SetImageURL(s string) *TaskDetailCreate {
	tdc.mutation.SetImageURL(s)
	return tdc
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (tdc *TaskDetailCreate) SetNillableImageURL(s *string) *TaskDetailCreate {
	if s != nil {
		tdc.SetImageURL(*s)
	}
	return tdc
}

// SetHasExcellent sets the "has_excellent" field.
func (tdc *TaskDetailCreate) SetHasExcellent(b bool) *TaskDetailCreate {
	tdc.mutation.SetHasExcellent(b)
	return tdc
}

// SetNillableHasExcellent sets the "has_excellent" field if the given value is not nil.
func (tdc *TaskDetailCreate) SetNillableHasExcellent(b *bool) *TaskDetailCreate {
	if b != nil {
		tdc.SetHasExcellent(*b)
	}
	return tdc
}

// Mutation returns the TaskDetailMutation object of the builder.
func (tdc *TaskDetailCreate) Mutation() *TaskDetailMutation {
	return tdc.mutation
}

// Save creates the TaskDetail in the database.
func (tdc *TaskDetailCreate) Save(ctx context.Context) (*TaskDetail, error) {
	tdc.defaults()
	return withHooks(ctx, tdc.sqlSave, tdc.mutation, tdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tdc *TaskDetailCreate) SaveX(ctx context.Context) *TaskDetail {
	v, err := tdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tdc *TaskDetailCreate) Exec(ctx context.Context) error {
	_, err := tdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdc *TaskDetailCreate) ExecX(ctx context.Context) {
	if err := tdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tdc *TaskDetailCreate) defaults() {
	if _, ok := tdc.mutation.CreateTime(); !ok {
		v := taskdetail.DefaultCreateTime()
		tdc.mutation.SetCreateTime(v)
	}
	if _, ok := tdc.mutation.UpdateTime(); !ok {
		v := taskdetail.DefaultUpdateTime()
		tdc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tdc *TaskDetailCreate) check() error {
	if _, ok := tdc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "TaskDetail.create_time"`)}
	}
	if _, ok := tdc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "TaskDetail.update_time"`)}
	}
	if v, ok := tdc.mutation.ImageURL(); ok {
		if err := taskdetail.ImageURLValidator(v); err != nil {
			return &ValidationError{Name: "image_url", err: fmt.Errorf(`ent: validator failed for field "TaskDetail.image_url": %w`, err)}
		}
	}
	return nil
}

func (tdc *TaskDetailCreate) sqlSave(ctx context.Context) (*TaskDetail, error) {
	if err := tdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tdc.mutation.id = &_node.ID
	tdc.mutation.done = true
	return _node, nil
}

func (tdc *TaskDetailCreate) createSpec() (*TaskDetail, *sqlgraph.CreateSpec) {
	var (
		_node = &TaskDetail{config: tdc.config}
		_spec = sqlgraph.NewCreateSpec(taskdetail.Table, sqlgraph.NewFieldSpec(taskdetail.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tdc.conflict
	if value, ok := tdc.mutation.CreateTime(); ok {
		_spec.SetField(taskdetail.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := tdc.mutation.UpdateTime(); ok {
		_spec.SetField(taskdetail.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := tdc.mutation.DeleteTime(); ok {
		_spec.SetField(taskdetail.FieldDeleteTime, field.TypeTime, value)
		_node.DeleteTime = &value
	}
	if value, ok := tdc.mutation.TaskID(); ok {
		_spec.SetField(taskdetail.FieldTaskID, field.TypeInt, value)
		_node.TaskID = value
	}
	if value, ok := tdc.mutation.ImageURL(); ok {
		_spec.SetField(taskdetail.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := tdc.mutation.HasExcellent(); ok {
		_spec.SetField(taskdetail.FieldHasExcellent, field.TypeBool, value)
		_node.HasExcellent = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TaskDetail.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskDetailUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (tdc *TaskDetailCreate) OnConflict(opts ...sql.ConflictOption) *TaskDetailUpsertOne {
	tdc.conflict = opts
	return &TaskDetailUpsertOne{
		create: tdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TaskDetail.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tdc *TaskDetailCreate) OnConflictColumns(columns ...string) *TaskDetailUpsertOne {
	tdc.conflict = append(tdc.conflict, sql.ConflictColumns(columns...))
	return &TaskDetailUpsertOne{
		create: tdc,
	}
}

type (
	// TaskDetailUpsertOne is the builder for "upsert"-ing
	//  one TaskDetail node.
	TaskDetailUpsertOne struct {
		create *TaskDetailCreate
	}

	// TaskDetailUpsert is the "OnConflict" setter.
	TaskDetailUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *TaskDetailUpsert) SetUpdateTime(v time.Time) *TaskDetailUpsert {
	u.Set(taskdetail.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TaskDetailUpsert) UpdateUpdateTime() *TaskDetailUpsert {
	u.SetExcluded(taskdetail.FieldUpdateTime)
	return u
}

// SetDeleteTime sets the "delete_time" field.
func (u *TaskDetailUpsert) SetDeleteTime(v time.Time) *TaskDetailUpsert {
	u.Set(taskdetail.FieldDeleteTime, v)
	return u
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *TaskDetailUpsert) UpdateDeleteTime() *TaskDetailUpsert {
	u.SetExcluded(taskdetail.FieldDeleteTime)
	return u
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *TaskDetailUpsert) ClearDeleteTime() *TaskDetailUpsert {
	u.SetNull(taskdetail.FieldDeleteTime)
	return u
}

// SetTaskID sets the "task_id" field.
func (u *TaskDetailUpsert) SetTaskID(v int) *TaskDetailUpsert {
	u.Set(taskdetail.FieldTaskID, v)
	return u
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *TaskDetailUpsert) UpdateTaskID() *TaskDetailUpsert {
	u.SetExcluded(taskdetail.FieldTaskID)
	return u
}

// AddTaskID adds v to the "task_id" field.
func (u *TaskDetailUpsert) AddTaskID(v int) *TaskDetailUpsert {
	u.Add(taskdetail.FieldTaskID, v)
	return u
}

// ClearTaskID clears the value of the "task_id" field.
func (u *TaskDetailUpsert) ClearTaskID() *TaskDetailUpsert {
	u.SetNull(taskdetail.FieldTaskID)
	return u
}

// SetImageURL sets the "image_url" field.
func (u *TaskDetailUpsert) SetImageURL(v string) *TaskDetailUpsert {
	u.Set(taskdetail.FieldImageURL, v)
	return u
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *TaskDetailUpsert) UpdateImageURL() *TaskDetailUpsert {
	u.SetExcluded(taskdetail.FieldImageURL)
	return u
}

// ClearImageURL clears the value of the "image_url" field.
func (u *TaskDetailUpsert) ClearImageURL() *TaskDetailUpsert {
	u.SetNull(taskdetail.FieldImageURL)
	return u
}

// SetHasExcellent sets the "has_excellent" field.
func (u *TaskDetailUpsert) SetHasExcellent(v bool) *TaskDetailUpsert {
	u.Set(taskdetail.FieldHasExcellent, v)
	return u
}

// UpdateHasExcellent sets the "has_excellent" field to the value that was provided on create.
func (u *TaskDetailUpsert) UpdateHasExcellent() *TaskDetailUpsert {
	u.SetExcluded(taskdetail.FieldHasExcellent)
	return u
}

// ClearHasExcellent clears the value of the "has_excellent" field.
func (u *TaskDetailUpsert) ClearHasExcellent() *TaskDetailUpsert {
	u.SetNull(taskdetail.FieldHasExcellent)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.TaskDetail.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TaskDetailUpsertOne) UpdateNewValues() *TaskDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(taskdetail.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TaskDetail.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TaskDetailUpsertOne) Ignore() *TaskDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskDetailUpsertOne) DoNothing() *TaskDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskDetailCreate.OnConflict
// documentation for more info.
func (u *TaskDetailUpsertOne) Update(set func(*TaskDetailUpsert)) *TaskDetailUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskDetailUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *TaskDetailUpsertOne) SetUpdateTime(v time.Time) *TaskDetailUpsertOne {
	return u.Update(func(s *TaskDetailUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TaskDetailUpsertOne) UpdateUpdateTime() *TaskDetailUpsertOne {
	return u.Update(func(s *TaskDetailUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *TaskDetailUpsertOne) SetDeleteTime(v time.Time) *TaskDetailUpsertOne {
	return u.Update(func(s *TaskDetailUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *TaskDetailUpsertOne) UpdateDeleteTime() *TaskDetailUpsertOne {
	return u.Update(func(s *TaskDetailUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *TaskDetailUpsertOne) ClearDeleteTime() *TaskDetailUpsertOne {
	return u.Update(func(s *TaskDetailUpsert) {
		s.ClearDeleteTime()
	})
}

// SetTaskID sets the "task_id" field.
func (u *TaskDetailUpsertOne) SetTaskID(v int) *TaskDetailUpsertOne {
	return u.Update(func(s *TaskDetailUpsert) {
		s.SetTaskID(v)
	})
}

// AddTaskID adds v to the "task_id" field.
func (u *TaskDetailUpsertOne) AddTaskID(v int) *TaskDetailUpsertOne {
	return u.Update(func(s *TaskDetailUpsert) {
		s.AddTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *TaskDetailUpsertOne) UpdateTaskID() *TaskDetailUpsertOne {
	return u.Update(func(s *TaskDetailUpsert) {
		s.UpdateTaskID()
	})
}

// ClearTaskID clears the value of the "task_id" field.
func (u *TaskDetailUpsertOne) ClearTaskID() *TaskDetailUpsertOne {
	return u.Update(func(s *TaskDetailUpsert) {
		s.ClearTaskID()
	})
}

// SetImageURL sets the "image_url" field.
func (u *TaskDetailUpsertOne) SetImageURL(v string) *TaskDetailUpsertOne {
	return u.Update(func(s *TaskDetailUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *TaskDetailUpsertOne) UpdateImageURL() *TaskDetailUpsertOne {
	return u.Update(func(s *TaskDetailUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *TaskDetailUpsertOne) ClearImageURL() *TaskDetailUpsertOne {
	return u.Update(func(s *TaskDetailUpsert) {
		s.ClearImageURL()
	})
}

// SetHasExcellent sets the "has_excellent" field.
func (u *TaskDetailUpsertOne) SetHasExcellent(v bool) *TaskDetailUpsertOne {
	return u.Update(func(s *TaskDetailUpsert) {
		s.SetHasExcellent(v)
	})
}

// UpdateHasExcellent sets the "has_excellent" field to the value that was provided on create.
func (u *TaskDetailUpsertOne) UpdateHasExcellent() *TaskDetailUpsertOne {
	return u.Update(func(s *TaskDetailUpsert) {
		s.UpdateHasExcellent()
	})
}

// ClearHasExcellent clears the value of the "has_excellent" field.
func (u *TaskDetailUpsertOne) ClearHasExcellent() *TaskDetailUpsertOne {
	return u.Update(func(s *TaskDetailUpsert) {
		s.ClearHasExcellent()
	})
}

// Exec executes the query.
func (u *TaskDetailUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskDetailCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskDetailUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TaskDetailUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TaskDetailUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TaskDetailCreateBulk is the builder for creating many TaskDetail entities in bulk.
type TaskDetailCreateBulk struct {
	config
	err      error
	builders []*TaskDetailCreate
	conflict []sql.ConflictOption
}

// Save creates the TaskDetail entities in the database.
func (tdcb *TaskDetailCreateBulk) Save(ctx context.Context) ([]*TaskDetail, error) {
	if tdcb.err != nil {
		return nil, tdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tdcb.builders))
	nodes := make([]*TaskDetail, len(tdcb.builders))
	mutators := make([]Mutator, len(tdcb.builders))
	for i := range tdcb.builders {
		func(i int, root context.Context) {
			builder := tdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskDetailMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tdcb *TaskDetailCreateBulk) SaveX(ctx context.Context) []*TaskDetail {
	v, err := tdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tdcb *TaskDetailCreateBulk) Exec(ctx context.Context) error {
	_, err := tdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tdcb *TaskDetailCreateBulk) ExecX(ctx context.Context) {
	if err := tdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TaskDetail.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskDetailUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (tdcb *TaskDetailCreateBulk) OnConflict(opts ...sql.ConflictOption) *TaskDetailUpsertBulk {
	tdcb.conflict = opts
	return &TaskDetailUpsertBulk{
		create: tdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TaskDetail.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tdcb *TaskDetailCreateBulk) OnConflictColumns(columns ...string) *TaskDetailUpsertBulk {
	tdcb.conflict = append(tdcb.conflict, sql.ConflictColumns(columns...))
	return &TaskDetailUpsertBulk{
		create: tdcb,
	}
}

// TaskDetailUpsertBulk is the builder for "upsert"-ing
// a bulk of TaskDetail nodes.
type TaskDetailUpsertBulk struct {
	create *TaskDetailCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TaskDetail.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TaskDetailUpsertBulk) UpdateNewValues() *TaskDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(taskdetail.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TaskDetail.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TaskDetailUpsertBulk) Ignore() *TaskDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskDetailUpsertBulk) DoNothing() *TaskDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskDetailCreateBulk.OnConflict
// documentation for more info.
func (u *TaskDetailUpsertBulk) Update(set func(*TaskDetailUpsert)) *TaskDetailUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskDetailUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *TaskDetailUpsertBulk) SetUpdateTime(v time.Time) *TaskDetailUpsertBulk {
	return u.Update(func(s *TaskDetailUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *TaskDetailUpsertBulk) UpdateUpdateTime() *TaskDetailUpsertBulk {
	return u.Update(func(s *TaskDetailUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetDeleteTime sets the "delete_time" field.
func (u *TaskDetailUpsertBulk) SetDeleteTime(v time.Time) *TaskDetailUpsertBulk {
	return u.Update(func(s *TaskDetailUpsert) {
		s.SetDeleteTime(v)
	})
}

// UpdateDeleteTime sets the "delete_time" field to the value that was provided on create.
func (u *TaskDetailUpsertBulk) UpdateDeleteTime() *TaskDetailUpsertBulk {
	return u.Update(func(s *TaskDetailUpsert) {
		s.UpdateDeleteTime()
	})
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (u *TaskDetailUpsertBulk) ClearDeleteTime() *TaskDetailUpsertBulk {
	return u.Update(func(s *TaskDetailUpsert) {
		s.ClearDeleteTime()
	})
}

// SetTaskID sets the "task_id" field.
func (u *TaskDetailUpsertBulk) SetTaskID(v int) *TaskDetailUpsertBulk {
	return u.Update(func(s *TaskDetailUpsert) {
		s.SetTaskID(v)
	})
}

// AddTaskID adds v to the "task_id" field.
func (u *TaskDetailUpsertBulk) AddTaskID(v int) *TaskDetailUpsertBulk {
	return u.Update(func(s *TaskDetailUpsert) {
		s.AddTaskID(v)
	})
}

// UpdateTaskID sets the "task_id" field to the value that was provided on create.
func (u *TaskDetailUpsertBulk) UpdateTaskID() *TaskDetailUpsertBulk {
	return u.Update(func(s *TaskDetailUpsert) {
		s.UpdateTaskID()
	})
}

// ClearTaskID clears the value of the "task_id" field.
func (u *TaskDetailUpsertBulk) ClearTaskID() *TaskDetailUpsertBulk {
	return u.Update(func(s *TaskDetailUpsert) {
		s.ClearTaskID()
	})
}

// SetImageURL sets the "image_url" field.
func (u *TaskDetailUpsertBulk) SetImageURL(v string) *TaskDetailUpsertBulk {
	return u.Update(func(s *TaskDetailUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *TaskDetailUpsertBulk) UpdateImageURL() *TaskDetailUpsertBulk {
	return u.Update(func(s *TaskDetailUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *TaskDetailUpsertBulk) ClearImageURL() *TaskDetailUpsertBulk {
	return u.Update(func(s *TaskDetailUpsert) {
		s.ClearImageURL()
	})
}

// SetHasExcellent sets the "has_excellent" field.
func (u *TaskDetailUpsertBulk) SetHasExcellent(v bool) *TaskDetailUpsertBulk {
	return u.Update(func(s *TaskDetailUpsert) {
		s.SetHasExcellent(v)
	})
}

// UpdateHasExcellent sets the "has_excellent" field to the value that was provided on create.
func (u *TaskDetailUpsertBulk) UpdateHasExcellent() *TaskDetailUpsertBulk {
	return u.Update(func(s *TaskDetailUpsert) {
		s.UpdateHasExcellent()
	})
}

// ClearHasExcellent clears the value of the "has_excellent" field.
func (u *TaskDetailUpsertBulk) ClearHasExcellent() *TaskDetailUpsertBulk {
	return u.Update(func(s *TaskDetailUpsert) {
		s.ClearHasExcellent()
	})
}

// Exec executes the query.
func (u *TaskDetailUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TaskDetailCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskDetailCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskDetailUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
