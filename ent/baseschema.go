// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ai-gallery/ent/baseschema"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// BaseSchema is the model entity for the BaseSchema schema.
type BaseSchema struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 删除时间
	DeleteTime   *time.Time `json:"delete_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BaseSchema) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case baseschema.FieldID:
			values[i] = new(sql.NullInt64)
		case baseschema.FieldCreateTime, baseschema.FieldUpdateTime, baseschema.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BaseSchema fields.
func (bs *BaseSchema) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case baseschema.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bs.ID = int(value.Int64)
		case baseschema.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				bs.CreateTime = value.Time
			}
		case baseschema.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				bs.UpdateTime = value.Time
			}
		case baseschema.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				bs.DeleteTime = new(time.Time)
				*bs.DeleteTime = value.Time
			}
		default:
			bs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BaseSchema.
// This includes values selected through modifiers, order, etc.
func (bs *BaseSchema) Value(name string) (ent.Value, error) {
	return bs.selectValues.Get(name)
}

// Update returns a builder for updating this BaseSchema.
// Note that you need to call BaseSchema.Unwrap() before calling this method if this BaseSchema
// was returned from a transaction, and the transaction was committed or rolled back.
func (bs *BaseSchema) Update() *BaseSchemaUpdateOne {
	return NewBaseSchemaClient(bs.config).UpdateOne(bs)
}

// Unwrap unwraps the BaseSchema entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bs *BaseSchema) Unwrap() *BaseSchema {
	_tx, ok := bs.config.driver.(*txDriver)
	if !ok {
		panic("ent: BaseSchema is not a transactional entity")
	}
	bs.config.driver = _tx.drv
	return bs
}

// String implements the fmt.Stringer.
func (bs *BaseSchema) String() string {
	var builder strings.Builder
	builder.WriteString("BaseSchema(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bs.ID))
	builder.WriteString("create_time=")
	builder.WriteString(bs.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(bs.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := bs.DeleteTime; v != nil {
		builder.WriteString("delete_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// BaseSchemas is a parsable slice of BaseSchema.
type BaseSchemas []*BaseSchema
