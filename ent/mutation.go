// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ai-gallery/ent/account"
	"ai-gallery/ent/baseschema"
	"ai-gallery/ent/predicate"
	"ai-gallery/ent/setting"
	"ai-gallery/ent/task"
	"ai-gallery/ent/taskdetail"
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAccount    = "Account"
	TypeBaseSchema = "BaseSchema"
	TypeSetting    = "Setting"
	TypeTask       = "Task"
	TypeTaskDetail = "TaskDetail"
)

// AccountMutation represents an operation that mutates the Account nodes in the graph.
type AccountMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	update_time   *time.Time
	delete_time   *time.Time
	username      *string
	password      *string
	nickname      *string
	role          *string
	status        *int
	addstatus     *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Account, error)
	predicates    []predicate.Account
}

var _ ent.Mutation = (*AccountMutation)(nil)

// accountOption allows management of the mutation configuration using functional options.
type accountOption func(*AccountMutation)

// newAccountMutation creates new mutation for the Account entity.
func newAccountMutation(c config, op Op, opts ...accountOption) *AccountMutation {
	m := &AccountMutation{
		config:        c,
		op:            op,
		typ:           TypeAccount,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAccountID sets the ID field of the mutation.
func withAccountID(id int) accountOption {
	return func(m *AccountMutation) {
		var (
			err   error
			once  sync.Once
			value *Account
		)
		m.oldValue = func(ctx context.Context) (*Account, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Account.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAccount sets the old Account of the mutation.
func withAccount(node *Account) accountOption {
	return func(m *AccountMutation) {
		m.oldValue = func(context.Context) (*Account, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AccountMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AccountMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AccountMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AccountMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Account.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *AccountMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *AccountMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *AccountMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *AccountMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *AccountMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *AccountMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDeleteTime sets the "delete_time" field.
func (m *AccountMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *AccountMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldDeleteTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *AccountMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[account.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *AccountMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[account.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *AccountMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, account.FieldDeleteTime)
}

// SetUsername sets the "username" field.
func (m *AccountMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *AccountMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ClearUsername clears the value of the "username" field.
func (m *AccountMutation) ClearUsername() {
	m.username = nil
	m.clearedFields[account.FieldUsername] = struct{}{}
}

// UsernameCleared returns if the "username" field was cleared in this mutation.
func (m *AccountMutation) UsernameCleared() bool {
	_, ok := m.clearedFields[account.FieldUsername]
	return ok
}

// ResetUsername resets all changes to the "username" field.
func (m *AccountMutation) ResetUsername() {
	m.username = nil
	delete(m.clearedFields, account.FieldUsername)
}

// SetPassword sets the "password" field.
func (m *AccountMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *AccountMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ClearPassword clears the value of the "password" field.
func (m *AccountMutation) ClearPassword() {
	m.password = nil
	m.clearedFields[account.FieldPassword] = struct{}{}
}

// PasswordCleared returns if the "password" field was cleared in this mutation.
func (m *AccountMutation) PasswordCleared() bool {
	_, ok := m.clearedFields[account.FieldPassword]
	return ok
}

// ResetPassword resets all changes to the "password" field.
func (m *AccountMutation) ResetPassword() {
	m.password = nil
	delete(m.clearedFields, account.FieldPassword)
}

// SetNickname sets the "nickname" field.
func (m *AccountMutation) SetNickname(s string) {
	m.nickname = &s
}

// Nickname returns the value of the "nickname" field in the mutation.
func (m *AccountMutation) Nickname() (r string, exists bool) {
	v := m.nickname
	if v == nil {
		return
	}
	return *v, true
}

// OldNickname returns the old "nickname" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldNickname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNickname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNickname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickname: %w", err)
	}
	return oldValue.Nickname, nil
}

// ClearNickname clears the value of the "nickname" field.
func (m *AccountMutation) ClearNickname() {
	m.nickname = nil
	m.clearedFields[account.FieldNickname] = struct{}{}
}

// NicknameCleared returns if the "nickname" field was cleared in this mutation.
func (m *AccountMutation) NicknameCleared() bool {
	_, ok := m.clearedFields[account.FieldNickname]
	return ok
}

// ResetNickname resets all changes to the "nickname" field.
func (m *AccountMutation) ResetNickname() {
	m.nickname = nil
	delete(m.clearedFields, account.FieldNickname)
}

// SetRole sets the "role" field.
func (m *AccountMutation) SetRole(s string) {
	m.role = &s
}

// Role returns the value of the "role" field in the mutation.
func (m *AccountMutation) Role() (r string, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldRole(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ClearRole clears the value of the "role" field.
func (m *AccountMutation) ClearRole() {
	m.role = nil
	m.clearedFields[account.FieldRole] = struct{}{}
}

// RoleCleared returns if the "role" field was cleared in this mutation.
func (m *AccountMutation) RoleCleared() bool {
	_, ok := m.clearedFields[account.FieldRole]
	return ok
}

// ResetRole resets all changes to the "role" field.
func (m *AccountMutation) ResetRole() {
	m.role = nil
	delete(m.clearedFields, account.FieldRole)
}

// SetStatus sets the "status" field.
func (m *AccountMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *AccountMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *AccountMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *AccountMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ClearStatus clears the value of the "status" field.
func (m *AccountMutation) ClearStatus() {
	m.status = nil
	m.addstatus = nil
	m.clearedFields[account.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *AccountMutation) StatusCleared() bool {
	_, ok := m.clearedFields[account.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *AccountMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
	delete(m.clearedFields, account.FieldStatus)
}

// Where appends a list predicates to the AccountMutation builder.
func (m *AccountMutation) Where(ps ...predicate.Account) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AccountMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AccountMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Account, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AccountMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AccountMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Account).
func (m *AccountMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AccountMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.create_time != nil {
		fields = append(fields, account.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, account.FieldUpdateTime)
	}
	if m.delete_time != nil {
		fields = append(fields, account.FieldDeleteTime)
	}
	if m.username != nil {
		fields = append(fields, account.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, account.FieldPassword)
	}
	if m.nickname != nil {
		fields = append(fields, account.FieldNickname)
	}
	if m.role != nil {
		fields = append(fields, account.FieldRole)
	}
	if m.status != nil {
		fields = append(fields, account.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AccountMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case account.FieldCreateTime:
		return m.CreateTime()
	case account.FieldUpdateTime:
		return m.UpdateTime()
	case account.FieldDeleteTime:
		return m.DeleteTime()
	case account.FieldUsername:
		return m.Username()
	case account.FieldPassword:
		return m.Password()
	case account.FieldNickname:
		return m.Nickname()
	case account.FieldRole:
		return m.Role()
	case account.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AccountMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case account.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case account.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case account.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case account.FieldUsername:
		return m.OldUsername(ctx)
	case account.FieldPassword:
		return m.OldPassword(ctx)
	case account.FieldNickname:
		return m.OldNickname(ctx)
	case account.FieldRole:
		return m.OldRole(ctx)
	case account.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown Account field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountMutation) SetField(name string, value ent.Value) error {
	switch name {
	case account.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case account.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case account.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case account.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case account.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case account.FieldNickname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickname(v)
		return nil
	case account.FieldRole:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case account.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Account field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AccountMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, account.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AccountMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case account.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountMutation) AddField(name string, value ent.Value) error {
	switch name {
	case account.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Account numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AccountMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(account.FieldDeleteTime) {
		fields = append(fields, account.FieldDeleteTime)
	}
	if m.FieldCleared(account.FieldUsername) {
		fields = append(fields, account.FieldUsername)
	}
	if m.FieldCleared(account.FieldPassword) {
		fields = append(fields, account.FieldPassword)
	}
	if m.FieldCleared(account.FieldNickname) {
		fields = append(fields, account.FieldNickname)
	}
	if m.FieldCleared(account.FieldRole) {
		fields = append(fields, account.FieldRole)
	}
	if m.FieldCleared(account.FieldStatus) {
		fields = append(fields, account.FieldStatus)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AccountMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AccountMutation) ClearField(name string) error {
	switch name {
	case account.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	case account.FieldUsername:
		m.ClearUsername()
		return nil
	case account.FieldPassword:
		m.ClearPassword()
		return nil
	case account.FieldNickname:
		m.ClearNickname()
		return nil
	case account.FieldRole:
		m.ClearRole()
		return nil
	case account.FieldStatus:
		m.ClearStatus()
		return nil
	}
	return fmt.Errorf("unknown Account nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AccountMutation) ResetField(name string) error {
	switch name {
	case account.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case account.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case account.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case account.FieldUsername:
		m.ResetUsername()
		return nil
	case account.FieldPassword:
		m.ResetPassword()
		return nil
	case account.FieldNickname:
		m.ResetNickname()
		return nil
	case account.FieldRole:
		m.ResetRole()
		return nil
	case account.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown Account field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AccountMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AccountMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AccountMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AccountMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AccountMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AccountMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AccountMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Account unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AccountMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Account edge %s", name)
}

// BaseSchemaMutation represents an operation that mutates the BaseSchema nodes in the graph.
type BaseSchemaMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	update_time   *time.Time
	delete_time   *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*BaseSchema, error)
	predicates    []predicate.BaseSchema
}

var _ ent.Mutation = (*BaseSchemaMutation)(nil)

// baseschemaOption allows management of the mutation configuration using functional options.
type baseschemaOption func(*BaseSchemaMutation)

// newBaseSchemaMutation creates new mutation for the BaseSchema entity.
func newBaseSchemaMutation(c config, op Op, opts ...baseschemaOption) *BaseSchemaMutation {
	m := &BaseSchemaMutation{
		config:        c,
		op:            op,
		typ:           TypeBaseSchema,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBaseSchemaID sets the ID field of the mutation.
func withBaseSchemaID(id int) baseschemaOption {
	return func(m *BaseSchemaMutation) {
		var (
			err   error
			once  sync.Once
			value *BaseSchema
		)
		m.oldValue = func(ctx context.Context) (*BaseSchema, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BaseSchema.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBaseSchema sets the old BaseSchema of the mutation.
func withBaseSchema(node *BaseSchema) baseschemaOption {
	return func(m *BaseSchemaMutation) {
		m.oldValue = func(context.Context) (*BaseSchema, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BaseSchemaMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BaseSchemaMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BaseSchemaMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BaseSchemaMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BaseSchema.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *BaseSchemaMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *BaseSchemaMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the BaseSchema entity.
// If the BaseSchema object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BaseSchemaMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *BaseSchemaMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *BaseSchemaMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *BaseSchemaMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the BaseSchema entity.
// If the BaseSchema object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BaseSchemaMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *BaseSchemaMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDeleteTime sets the "delete_time" field.
func (m *BaseSchemaMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *BaseSchemaMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the BaseSchema entity.
// If the BaseSchema object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BaseSchemaMutation) OldDeleteTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *BaseSchemaMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[baseschema.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *BaseSchemaMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[baseschema.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *BaseSchemaMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, baseschema.FieldDeleteTime)
}

// Where appends a list predicates to the BaseSchemaMutation builder.
func (m *BaseSchemaMutation) Where(ps ...predicate.BaseSchema) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BaseSchemaMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BaseSchemaMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BaseSchema, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BaseSchemaMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BaseSchemaMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BaseSchema).
func (m *BaseSchemaMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BaseSchemaMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.create_time != nil {
		fields = append(fields, baseschema.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, baseschema.FieldUpdateTime)
	}
	if m.delete_time != nil {
		fields = append(fields, baseschema.FieldDeleteTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BaseSchemaMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case baseschema.FieldCreateTime:
		return m.CreateTime()
	case baseschema.FieldUpdateTime:
		return m.UpdateTime()
	case baseschema.FieldDeleteTime:
		return m.DeleteTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BaseSchemaMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case baseschema.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case baseschema.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case baseschema.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	}
	return nil, fmt.Errorf("unknown BaseSchema field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BaseSchemaMutation) SetField(name string, value ent.Value) error {
	switch name {
	case baseschema.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case baseschema.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case baseschema.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	}
	return fmt.Errorf("unknown BaseSchema field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BaseSchemaMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BaseSchemaMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BaseSchemaMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown BaseSchema numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BaseSchemaMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(baseschema.FieldDeleteTime) {
		fields = append(fields, baseschema.FieldDeleteTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BaseSchemaMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BaseSchemaMutation) ClearField(name string) error {
	switch name {
	case baseschema.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	}
	return fmt.Errorf("unknown BaseSchema nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BaseSchemaMutation) ResetField(name string) error {
	switch name {
	case baseschema.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case baseschema.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case baseschema.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	}
	return fmt.Errorf("unknown BaseSchema field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BaseSchemaMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BaseSchemaMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BaseSchemaMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BaseSchemaMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BaseSchemaMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BaseSchemaMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BaseSchemaMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown BaseSchema unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BaseSchemaMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown BaseSchema edge %s", name)
}

// SettingMutation represents an operation that mutates the Setting nodes in the graph.
type SettingMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	update_time   *time.Time
	delete_time   *time.Time
	config_key    *string
	config_value  *string
	mark          *string
	operate_id    *int
	addoperate_id *int
	operate_name  *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Setting, error)
	predicates    []predicate.Setting
}

var _ ent.Mutation = (*SettingMutation)(nil)

// settingOption allows management of the mutation configuration using functional options.
type settingOption func(*SettingMutation)

// newSettingMutation creates new mutation for the Setting entity.
func newSettingMutation(c config, op Op, opts ...settingOption) *SettingMutation {
	m := &SettingMutation{
		config:        c,
		op:            op,
		typ:           TypeSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSettingID sets the ID field of the mutation.
func withSettingID(id int) settingOption {
	return func(m *SettingMutation) {
		var (
			err   error
			once  sync.Once
			value *Setting
		)
		m.oldValue = func(ctx context.Context) (*Setting, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Setting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSetting sets the old Setting of the mutation.
func withSetting(node *Setting) settingOption {
	return func(m *SettingMutation) {
		m.oldValue = func(context.Context) (*Setting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SettingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SettingMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Setting.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *SettingMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *SettingMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *SettingMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *SettingMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *SettingMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *SettingMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDeleteTime sets the "delete_time" field.
func (m *SettingMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *SettingMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldDeleteTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *SettingMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[setting.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *SettingMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[setting.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *SettingMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, setting.FieldDeleteTime)
}

// SetConfigKey sets the "config_key" field.
func (m *SettingMutation) SetConfigKey(s string) {
	m.config_key = &s
}

// ConfigKey returns the value of the "config_key" field in the mutation.
func (m *SettingMutation) ConfigKey() (r string, exists bool) {
	v := m.config_key
	if v == nil {
		return
	}
	return *v, true
}

// OldConfigKey returns the old "config_key" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldConfigKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfigKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfigKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfigKey: %w", err)
	}
	return oldValue.ConfigKey, nil
}

// ClearConfigKey clears the value of the "config_key" field.
func (m *SettingMutation) ClearConfigKey() {
	m.config_key = nil
	m.clearedFields[setting.FieldConfigKey] = struct{}{}
}

// ConfigKeyCleared returns if the "config_key" field was cleared in this mutation.
func (m *SettingMutation) ConfigKeyCleared() bool {
	_, ok := m.clearedFields[setting.FieldConfigKey]
	return ok
}

// ResetConfigKey resets all changes to the "config_key" field.
func (m *SettingMutation) ResetConfigKey() {
	m.config_key = nil
	delete(m.clearedFields, setting.FieldConfigKey)
}

// SetConfigValue sets the "config_value" field.
func (m *SettingMutation) SetConfigValue(s string) {
	m.config_value = &s
}

// ConfigValue returns the value of the "config_value" field in the mutation.
func (m *SettingMutation) ConfigValue() (r string, exists bool) {
	v := m.config_value
	if v == nil {
		return
	}
	return *v, true
}

// OldConfigValue returns the old "config_value" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldConfigValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfigValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfigValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfigValue: %w", err)
	}
	return oldValue.ConfigValue, nil
}

// ClearConfigValue clears the value of the "config_value" field.
func (m *SettingMutation) ClearConfigValue() {
	m.config_value = nil
	m.clearedFields[setting.FieldConfigValue] = struct{}{}
}

// ConfigValueCleared returns if the "config_value" field was cleared in this mutation.
func (m *SettingMutation) ConfigValueCleared() bool {
	_, ok := m.clearedFields[setting.FieldConfigValue]
	return ok
}

// ResetConfigValue resets all changes to the "config_value" field.
func (m *SettingMutation) ResetConfigValue() {
	m.config_value = nil
	delete(m.clearedFields, setting.FieldConfigValue)
}

// SetMark sets the "mark" field.
func (m *SettingMutation) SetMark(s string) {
	m.mark = &s
}

// Mark returns the value of the "mark" field in the mutation.
func (m *SettingMutation) Mark() (r string, exists bool) {
	v := m.mark
	if v == nil {
		return
	}
	return *v, true
}

// OldMark returns the old "mark" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldMark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMark: %w", err)
	}
	return oldValue.Mark, nil
}

// ClearMark clears the value of the "mark" field.
func (m *SettingMutation) ClearMark() {
	m.mark = nil
	m.clearedFields[setting.FieldMark] = struct{}{}
}

// MarkCleared returns if the "mark" field was cleared in this mutation.
func (m *SettingMutation) MarkCleared() bool {
	_, ok := m.clearedFields[setting.FieldMark]
	return ok
}

// ResetMark resets all changes to the "mark" field.
func (m *SettingMutation) ResetMark() {
	m.mark = nil
	delete(m.clearedFields, setting.FieldMark)
}

// SetOperateID sets the "operate_id" field.
func (m *SettingMutation) SetOperateID(i int) {
	m.operate_id = &i
	m.addoperate_id = nil
}

// OperateID returns the value of the "operate_id" field in the mutation.
func (m *SettingMutation) OperateID() (r int, exists bool) {
	v := m.operate_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOperateID returns the old "operate_id" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldOperateID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOperateID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOperateID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperateID: %w", err)
	}
	return oldValue.OperateID, nil
}

// AddOperateID adds i to the "operate_id" field.
func (m *SettingMutation) AddOperateID(i int) {
	if m.addoperate_id != nil {
		*m.addoperate_id += i
	} else {
		m.addoperate_id = &i
	}
}

// AddedOperateID returns the value that was added to the "operate_id" field in this mutation.
func (m *SettingMutation) AddedOperateID() (r int, exists bool) {
	v := m.addoperate_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearOperateID clears the value of the "operate_id" field.
func (m *SettingMutation) ClearOperateID() {
	m.operate_id = nil
	m.addoperate_id = nil
	m.clearedFields[setting.FieldOperateID] = struct{}{}
}

// OperateIDCleared returns if the "operate_id" field was cleared in this mutation.
func (m *SettingMutation) OperateIDCleared() bool {
	_, ok := m.clearedFields[setting.FieldOperateID]
	return ok
}

// ResetOperateID resets all changes to the "operate_id" field.
func (m *SettingMutation) ResetOperateID() {
	m.operate_id = nil
	m.addoperate_id = nil
	delete(m.clearedFields, setting.FieldOperateID)
}

// SetOperateName sets the "operate_name" field.
func (m *SettingMutation) SetOperateName(s string) {
	m.operate_name = &s
}

// OperateName returns the value of the "operate_name" field in the mutation.
func (m *SettingMutation) OperateName() (r string, exists bool) {
	v := m.operate_name
	if v == nil {
		return
	}
	return *v, true
}

// OldOperateName returns the old "operate_name" field's value of the Setting entity.
// If the Setting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SettingMutation) OldOperateName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOperateName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOperateName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperateName: %w", err)
	}
	return oldValue.OperateName, nil
}

// ClearOperateName clears the value of the "operate_name" field.
func (m *SettingMutation) ClearOperateName() {
	m.operate_name = nil
	m.clearedFields[setting.FieldOperateName] = struct{}{}
}

// OperateNameCleared returns if the "operate_name" field was cleared in this mutation.
func (m *SettingMutation) OperateNameCleared() bool {
	_, ok := m.clearedFields[setting.FieldOperateName]
	return ok
}

// ResetOperateName resets all changes to the "operate_name" field.
func (m *SettingMutation) ResetOperateName() {
	m.operate_name = nil
	delete(m.clearedFields, setting.FieldOperateName)
}

// Where appends a list predicates to the SettingMutation builder.
func (m *SettingMutation) Where(ps ...predicate.Setting) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SettingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SettingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Setting, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SettingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SettingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Setting).
func (m *SettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SettingMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.create_time != nil {
		fields = append(fields, setting.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, setting.FieldUpdateTime)
	}
	if m.delete_time != nil {
		fields = append(fields, setting.FieldDeleteTime)
	}
	if m.config_key != nil {
		fields = append(fields, setting.FieldConfigKey)
	}
	if m.config_value != nil {
		fields = append(fields, setting.FieldConfigValue)
	}
	if m.mark != nil {
		fields = append(fields, setting.FieldMark)
	}
	if m.operate_id != nil {
		fields = append(fields, setting.FieldOperateID)
	}
	if m.operate_name != nil {
		fields = append(fields, setting.FieldOperateName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case setting.FieldCreateTime:
		return m.CreateTime()
	case setting.FieldUpdateTime:
		return m.UpdateTime()
	case setting.FieldDeleteTime:
		return m.DeleteTime()
	case setting.FieldConfigKey:
		return m.ConfigKey()
	case setting.FieldConfigValue:
		return m.ConfigValue()
	case setting.FieldMark:
		return m.Mark()
	case setting.FieldOperateID:
		return m.OperateID()
	case setting.FieldOperateName:
		return m.OperateName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case setting.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case setting.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case setting.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case setting.FieldConfigKey:
		return m.OldConfigKey(ctx)
	case setting.FieldConfigValue:
		return m.OldConfigValue(ctx)
	case setting.FieldMark:
		return m.OldMark(ctx)
	case setting.FieldOperateID:
		return m.OldOperateID(ctx)
	case setting.FieldOperateName:
		return m.OldOperateName(ctx)
	}
	return nil, fmt.Errorf("unknown Setting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case setting.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case setting.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case setting.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case setting.FieldConfigKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfigKey(v)
		return nil
	case setting.FieldConfigValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfigValue(v)
		return nil
	case setting.FieldMark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMark(v)
		return nil
	case setting.FieldOperateID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperateID(v)
		return nil
	case setting.FieldOperateName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperateName(v)
		return nil
	}
	return fmt.Errorf("unknown Setting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SettingMutation) AddedFields() []string {
	var fields []string
	if m.addoperate_id != nil {
		fields = append(fields, setting.FieldOperateID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SettingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case setting.FieldOperateID:
		return m.AddedOperateID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case setting.FieldOperateID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOperateID(v)
		return nil
	}
	return fmt.Errorf("unknown Setting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SettingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(setting.FieldDeleteTime) {
		fields = append(fields, setting.FieldDeleteTime)
	}
	if m.FieldCleared(setting.FieldConfigKey) {
		fields = append(fields, setting.FieldConfigKey)
	}
	if m.FieldCleared(setting.FieldConfigValue) {
		fields = append(fields, setting.FieldConfigValue)
	}
	if m.FieldCleared(setting.FieldMark) {
		fields = append(fields, setting.FieldMark)
	}
	if m.FieldCleared(setting.FieldOperateID) {
		fields = append(fields, setting.FieldOperateID)
	}
	if m.FieldCleared(setting.FieldOperateName) {
		fields = append(fields, setting.FieldOperateName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SettingMutation) ClearField(name string) error {
	switch name {
	case setting.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	case setting.FieldConfigKey:
		m.ClearConfigKey()
		return nil
	case setting.FieldConfigValue:
		m.ClearConfigValue()
		return nil
	case setting.FieldMark:
		m.ClearMark()
		return nil
	case setting.FieldOperateID:
		m.ClearOperateID()
		return nil
	case setting.FieldOperateName:
		m.ClearOperateName()
		return nil
	}
	return fmt.Errorf("unknown Setting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SettingMutation) ResetField(name string) error {
	switch name {
	case setting.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case setting.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case setting.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case setting.FieldConfigKey:
		m.ResetConfigKey()
		return nil
	case setting.FieldConfigValue:
		m.ResetConfigValue()
		return nil
	case setting.FieldMark:
		m.ResetMark()
		return nil
	case setting.FieldOperateID:
		m.ResetOperateID()
		return nil
	case setting.FieldOperateName:
		m.ResetOperateName()
		return nil
	}
	return fmt.Errorf("unknown Setting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SettingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SettingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SettingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Setting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SettingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Setting edge %s", name)
}

// TaskMutation represents an operation that mutates the Task nodes in the graph.
type TaskMutation struct {
	config
	op               Op
	typ              string
	id               *int
	create_time      *time.Time
	update_time      *time.Time
	delete_time      *time.Time
	prompt           *string
	negative_prompt  *string
	category         *string
	weight           *float32
	addweight        *float32
	height           *float32
	addheight        *float32
	img_size         *string
	seed             *string
	sampler_name     *string
	steps            *int
	addsteps         *int
	cfg_scale        *int
	addcfg_scale     *int
	batch_size       *int
	addbatch_size    *int
	total            *int
	addtotal         *int
	sd_model_name    *string
	sd_model_hash    *string
	sd_vae_name      *string
	sd_vae_hash      *string
	job_timestamp    *time.Time
	version          *string
	grid_image_url   *string
	status           *string
	author_id        *int
	addauthor_id     *int
	author_name      *string
	ref_images       *[]string
	appendref_images []string
	store            *string
	count            *int
	addcount         *int
	has_excellent    *bool
	extra            *string
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*Task, error)
	predicates       []predicate.Task
}

var _ ent.Mutation = (*TaskMutation)(nil)

// taskOption allows management of the mutation configuration using functional options.
type taskOption func(*TaskMutation)

// newTaskMutation creates new mutation for the Task entity.
func newTaskMutation(c config, op Op, opts ...taskOption) *TaskMutation {
	m := &TaskMutation{
		config:        c,
		op:            op,
		typ:           TypeTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskID sets the ID field of the mutation.
func withTaskID(id int) taskOption {
	return func(m *TaskMutation) {
		var (
			err   error
			once  sync.Once
			value *Task
		)
		m.oldValue = func(ctx context.Context) (*Task, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Task.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTask sets the old Task of the mutation.
func withTask(node *Task) taskOption {
	return func(m *TaskMutation) {
		m.oldValue = func(context.Context) (*Task, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaskMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Task.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *TaskMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *TaskMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *TaskMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *TaskMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *TaskMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *TaskMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDeleteTime sets the "delete_time" field.
func (m *TaskMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *TaskMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldDeleteTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *TaskMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[task.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *TaskMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[task.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *TaskMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, task.FieldDeleteTime)
}

// SetPrompt sets the "prompt" field.
func (m *TaskMutation) SetPrompt(s string) {
	m.prompt = &s
}

// Prompt returns the value of the "prompt" field in the mutation.
func (m *TaskMutation) Prompt() (r string, exists bool) {
	v := m.prompt
	if v == nil {
		return
	}
	return *v, true
}

// OldPrompt returns the old "prompt" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldPrompt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrompt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrompt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrompt: %w", err)
	}
	return oldValue.Prompt, nil
}

// ClearPrompt clears the value of the "prompt" field.
func (m *TaskMutation) ClearPrompt() {
	m.prompt = nil
	m.clearedFields[task.FieldPrompt] = struct{}{}
}

// PromptCleared returns if the "prompt" field was cleared in this mutation.
func (m *TaskMutation) PromptCleared() bool {
	_, ok := m.clearedFields[task.FieldPrompt]
	return ok
}

// ResetPrompt resets all changes to the "prompt" field.
func (m *TaskMutation) ResetPrompt() {
	m.prompt = nil
	delete(m.clearedFields, task.FieldPrompt)
}

// SetNegativePrompt sets the "negative_prompt" field.
func (m *TaskMutation) SetNegativePrompt(s string) {
	m.negative_prompt = &s
}

// NegativePrompt returns the value of the "negative_prompt" field in the mutation.
func (m *TaskMutation) NegativePrompt() (r string, exists bool) {
	v := m.negative_prompt
	if v == nil {
		return
	}
	return *v, true
}

// OldNegativePrompt returns the old "negative_prompt" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldNegativePrompt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNegativePrompt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNegativePrompt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNegativePrompt: %w", err)
	}
	return oldValue.NegativePrompt, nil
}

// ClearNegativePrompt clears the value of the "negative_prompt" field.
func (m *TaskMutation) ClearNegativePrompt() {
	m.negative_prompt = nil
	m.clearedFields[task.FieldNegativePrompt] = struct{}{}
}

// NegativePromptCleared returns if the "negative_prompt" field was cleared in this mutation.
func (m *TaskMutation) NegativePromptCleared() bool {
	_, ok := m.clearedFields[task.FieldNegativePrompt]
	return ok
}

// ResetNegativePrompt resets all changes to the "negative_prompt" field.
func (m *TaskMutation) ResetNegativePrompt() {
	m.negative_prompt = nil
	delete(m.clearedFields, task.FieldNegativePrompt)
}

// SetCategory sets the "category" field.
func (m *TaskMutation) SetCategory(s string) {
	m.category = &s
}

// Category returns the value of the "category" field in the mutation.
func (m *TaskMutation) Category() (r string, exists bool) {
	v := m.category
	if v == nil {
		return
	}
	return *v, true
}

// OldCategory returns the old "category" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCategory(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategory: %w", err)
	}
	return oldValue.Category, nil
}

// ClearCategory clears the value of the "category" field.
func (m *TaskMutation) ClearCategory() {
	m.category = nil
	m.clearedFields[task.FieldCategory] = struct{}{}
}

// CategoryCleared returns if the "category" field was cleared in this mutation.
func (m *TaskMutation) CategoryCleared() bool {
	_, ok := m.clearedFields[task.FieldCategory]
	return ok
}

// ResetCategory resets all changes to the "category" field.
func (m *TaskMutation) ResetCategory() {
	m.category = nil
	delete(m.clearedFields, task.FieldCategory)
}

// SetWeight sets the "weight" field.
func (m *TaskMutation) SetWeight(f float32) {
	m.weight = &f
	m.addweight = nil
}

// Weight returns the value of the "weight" field in the mutation.
func (m *TaskMutation) Weight() (r float32, exists bool) {
	v := m.weight
	if v == nil {
		return
	}
	return *v, true
}

// OldWeight returns the old "weight" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldWeight(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeight: %w", err)
	}
	return oldValue.Weight, nil
}

// AddWeight adds f to the "weight" field.
func (m *TaskMutation) AddWeight(f float32) {
	if m.addweight != nil {
		*m.addweight += f
	} else {
		m.addweight = &f
	}
}

// AddedWeight returns the value that was added to the "weight" field in this mutation.
func (m *TaskMutation) AddedWeight() (r float32, exists bool) {
	v := m.addweight
	if v == nil {
		return
	}
	return *v, true
}

// ClearWeight clears the value of the "weight" field.
func (m *TaskMutation) ClearWeight() {
	m.weight = nil
	m.addweight = nil
	m.clearedFields[task.FieldWeight] = struct{}{}
}

// WeightCleared returns if the "weight" field was cleared in this mutation.
func (m *TaskMutation) WeightCleared() bool {
	_, ok := m.clearedFields[task.FieldWeight]
	return ok
}

// ResetWeight resets all changes to the "weight" field.
func (m *TaskMutation) ResetWeight() {
	m.weight = nil
	m.addweight = nil
	delete(m.clearedFields, task.FieldWeight)
}

// SetHeight sets the "height" field.
func (m *TaskMutation) SetHeight(f float32) {
	m.height = &f
	m.addheight = nil
}

// Height returns the value of the "height" field in the mutation.
func (m *TaskMutation) Height() (r float32, exists bool) {
	v := m.height
	if v == nil {
		return
	}
	return *v, true
}

// OldHeight returns the old "height" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldHeight(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeight: %w", err)
	}
	return oldValue.Height, nil
}

// AddHeight adds f to the "height" field.
func (m *TaskMutation) AddHeight(f float32) {
	if m.addheight != nil {
		*m.addheight += f
	} else {
		m.addheight = &f
	}
}

// AddedHeight returns the value that was added to the "height" field in this mutation.
func (m *TaskMutation) AddedHeight() (r float32, exists bool) {
	v := m.addheight
	if v == nil {
		return
	}
	return *v, true
}

// ClearHeight clears the value of the "height" field.
func (m *TaskMutation) ClearHeight() {
	m.height = nil
	m.addheight = nil
	m.clearedFields[task.FieldHeight] = struct{}{}
}

// HeightCleared returns if the "height" field was cleared in this mutation.
func (m *TaskMutation) HeightCleared() bool {
	_, ok := m.clearedFields[task.FieldHeight]
	return ok
}

// ResetHeight resets all changes to the "height" field.
func (m *TaskMutation) ResetHeight() {
	m.height = nil
	m.addheight = nil
	delete(m.clearedFields, task.FieldHeight)
}

// SetImgSize sets the "img_size" field.
func (m *TaskMutation) SetImgSize(s string) {
	m.img_size = &s
}

// ImgSize returns the value of the "img_size" field in the mutation.
func (m *TaskMutation) ImgSize() (r string, exists bool) {
	v := m.img_size
	if v == nil {
		return
	}
	return *v, true
}

// OldImgSize returns the old "img_size" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldImgSize(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImgSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImgSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImgSize: %w", err)
	}
	return oldValue.ImgSize, nil
}

// ClearImgSize clears the value of the "img_size" field.
func (m *TaskMutation) ClearImgSize() {
	m.img_size = nil
	m.clearedFields[task.FieldImgSize] = struct{}{}
}

// ImgSizeCleared returns if the "img_size" field was cleared in this mutation.
func (m *TaskMutation) ImgSizeCleared() bool {
	_, ok := m.clearedFields[task.FieldImgSize]
	return ok
}

// ResetImgSize resets all changes to the "img_size" field.
func (m *TaskMutation) ResetImgSize() {
	m.img_size = nil
	delete(m.clearedFields, task.FieldImgSize)
}

// SetSeed sets the "seed" field.
func (m *TaskMutation) SetSeed(s string) {
	m.seed = &s
}

// Seed returns the value of the "seed" field in the mutation.
func (m *TaskMutation) Seed() (r string, exists bool) {
	v := m.seed
	if v == nil {
		return
	}
	return *v, true
}

// OldSeed returns the old "seed" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldSeed(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSeed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSeed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSeed: %w", err)
	}
	return oldValue.Seed, nil
}

// ClearSeed clears the value of the "seed" field.
func (m *TaskMutation) ClearSeed() {
	m.seed = nil
	m.clearedFields[task.FieldSeed] = struct{}{}
}

// SeedCleared returns if the "seed" field was cleared in this mutation.
func (m *TaskMutation) SeedCleared() bool {
	_, ok := m.clearedFields[task.FieldSeed]
	return ok
}

// ResetSeed resets all changes to the "seed" field.
func (m *TaskMutation) ResetSeed() {
	m.seed = nil
	delete(m.clearedFields, task.FieldSeed)
}

// SetSamplerName sets the "sampler_name" field.
func (m *TaskMutation) SetSamplerName(s string) {
	m.sampler_name = &s
}

// SamplerName returns the value of the "sampler_name" field in the mutation.
func (m *TaskMutation) SamplerName() (r string, exists bool) {
	v := m.sampler_name
	if v == nil {
		return
	}
	return *v, true
}

// OldSamplerName returns the old "sampler_name" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldSamplerName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSamplerName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSamplerName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSamplerName: %w", err)
	}
	return oldValue.SamplerName, nil
}

// ClearSamplerName clears the value of the "sampler_name" field.
func (m *TaskMutation) ClearSamplerName() {
	m.sampler_name = nil
	m.clearedFields[task.FieldSamplerName] = struct{}{}
}

// SamplerNameCleared returns if the "sampler_name" field was cleared in this mutation.
func (m *TaskMutation) SamplerNameCleared() bool {
	_, ok := m.clearedFields[task.FieldSamplerName]
	return ok
}

// ResetSamplerName resets all changes to the "sampler_name" field.
func (m *TaskMutation) ResetSamplerName() {
	m.sampler_name = nil
	delete(m.clearedFields, task.FieldSamplerName)
}

// SetSteps sets the "steps" field.
func (m *TaskMutation) SetSteps(i int) {
	m.steps = &i
	m.addsteps = nil
}

// Steps returns the value of the "steps" field in the mutation.
func (m *TaskMutation) Steps() (r int, exists bool) {
	v := m.steps
	if v == nil {
		return
	}
	return *v, true
}

// OldSteps returns the old "steps" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldSteps(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSteps is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSteps requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSteps: %w", err)
	}
	return oldValue.Steps, nil
}

// AddSteps adds i to the "steps" field.
func (m *TaskMutation) AddSteps(i int) {
	if m.addsteps != nil {
		*m.addsteps += i
	} else {
		m.addsteps = &i
	}
}

// AddedSteps returns the value that was added to the "steps" field in this mutation.
func (m *TaskMutation) AddedSteps() (r int, exists bool) {
	v := m.addsteps
	if v == nil {
		return
	}
	return *v, true
}

// ClearSteps clears the value of the "steps" field.
func (m *TaskMutation) ClearSteps() {
	m.steps = nil
	m.addsteps = nil
	m.clearedFields[task.FieldSteps] = struct{}{}
}

// StepsCleared returns if the "steps" field was cleared in this mutation.
func (m *TaskMutation) StepsCleared() bool {
	_, ok := m.clearedFields[task.FieldSteps]
	return ok
}

// ResetSteps resets all changes to the "steps" field.
func (m *TaskMutation) ResetSteps() {
	m.steps = nil
	m.addsteps = nil
	delete(m.clearedFields, task.FieldSteps)
}

// SetCfgScale sets the "cfg_scale" field.
func (m *TaskMutation) SetCfgScale(i int) {
	m.cfg_scale = &i
	m.addcfg_scale = nil
}

// CfgScale returns the value of the "cfg_scale" field in the mutation.
func (m *TaskMutation) CfgScale() (r int, exists bool) {
	v := m.cfg_scale
	if v == nil {
		return
	}
	return *v, true
}

// OldCfgScale returns the old "cfg_scale" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCfgScale(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCfgScale is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCfgScale requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCfgScale: %w", err)
	}
	return oldValue.CfgScale, nil
}

// AddCfgScale adds i to the "cfg_scale" field.
func (m *TaskMutation) AddCfgScale(i int) {
	if m.addcfg_scale != nil {
		*m.addcfg_scale += i
	} else {
		m.addcfg_scale = &i
	}
}

// AddedCfgScale returns the value that was added to the "cfg_scale" field in this mutation.
func (m *TaskMutation) AddedCfgScale() (r int, exists bool) {
	v := m.addcfg_scale
	if v == nil {
		return
	}
	return *v, true
}

// ClearCfgScale clears the value of the "cfg_scale" field.
func (m *TaskMutation) ClearCfgScale() {
	m.cfg_scale = nil
	m.addcfg_scale = nil
	m.clearedFields[task.FieldCfgScale] = struct{}{}
}

// CfgScaleCleared returns if the "cfg_scale" field was cleared in this mutation.
func (m *TaskMutation) CfgScaleCleared() bool {
	_, ok := m.clearedFields[task.FieldCfgScale]
	return ok
}

// ResetCfgScale resets all changes to the "cfg_scale" field.
func (m *TaskMutation) ResetCfgScale() {
	m.cfg_scale = nil
	m.addcfg_scale = nil
	delete(m.clearedFields, task.FieldCfgScale)
}

// SetBatchSize sets the "batch_size" field.
func (m *TaskMutation) SetBatchSize(i int) {
	m.batch_size = &i
	m.addbatch_size = nil
}

// BatchSize returns the value of the "batch_size" field in the mutation.
func (m *TaskMutation) BatchSize() (r int, exists bool) {
	v := m.batch_size
	if v == nil {
		return
	}
	return *v, true
}

// OldBatchSize returns the old "batch_size" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldBatchSize(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBatchSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBatchSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBatchSize: %w", err)
	}
	return oldValue.BatchSize, nil
}

// AddBatchSize adds i to the "batch_size" field.
func (m *TaskMutation) AddBatchSize(i int) {
	if m.addbatch_size != nil {
		*m.addbatch_size += i
	} else {
		m.addbatch_size = &i
	}
}

// AddedBatchSize returns the value that was added to the "batch_size" field in this mutation.
func (m *TaskMutation) AddedBatchSize() (r int, exists bool) {
	v := m.addbatch_size
	if v == nil {
		return
	}
	return *v, true
}

// ClearBatchSize clears the value of the "batch_size" field.
func (m *TaskMutation) ClearBatchSize() {
	m.batch_size = nil
	m.addbatch_size = nil
	m.clearedFields[task.FieldBatchSize] = struct{}{}
}

// BatchSizeCleared returns if the "batch_size" field was cleared in this mutation.
func (m *TaskMutation) BatchSizeCleared() bool {
	_, ok := m.clearedFields[task.FieldBatchSize]
	return ok
}

// ResetBatchSize resets all changes to the "batch_size" field.
func (m *TaskMutation) ResetBatchSize() {
	m.batch_size = nil
	m.addbatch_size = nil
	delete(m.clearedFields, task.FieldBatchSize)
}

// SetTotal sets the "total" field.
func (m *TaskMutation) SetTotal(i int) {
	m.total = &i
	m.addtotal = nil
}

// Total returns the value of the "total" field in the mutation.
func (m *TaskMutation) Total() (r int, exists bool) {
	v := m.total
	if v == nil {
		return
	}
	return *v, true
}

// OldTotal returns the old "total" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldTotal(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotal: %w", err)
	}
	return oldValue.Total, nil
}

// AddTotal adds i to the "total" field.
func (m *TaskMutation) AddTotal(i int) {
	if m.addtotal != nil {
		*m.addtotal += i
	} else {
		m.addtotal = &i
	}
}

// AddedTotal returns the value that was added to the "total" field in this mutation.
func (m *TaskMutation) AddedTotal() (r int, exists bool) {
	v := m.addtotal
	if v == nil {
		return
	}
	return *v, true
}

// ClearTotal clears the value of the "total" field.
func (m *TaskMutation) ClearTotal() {
	m.total = nil
	m.addtotal = nil
	m.clearedFields[task.FieldTotal] = struct{}{}
}

// TotalCleared returns if the "total" field was cleared in this mutation.
func (m *TaskMutation) TotalCleared() bool {
	_, ok := m.clearedFields[task.FieldTotal]
	return ok
}

// ResetTotal resets all changes to the "total" field.
func (m *TaskMutation) ResetTotal() {
	m.total = nil
	m.addtotal = nil
	delete(m.clearedFields, task.FieldTotal)
}

// SetSdModelName sets the "sd_model_name" field.
func (m *TaskMutation) SetSdModelName(s string) {
	m.sd_model_name = &s
}

// SdModelName returns the value of the "sd_model_name" field in the mutation.
func (m *TaskMutation) SdModelName() (r string, exists bool) {
	v := m.sd_model_name
	if v == nil {
		return
	}
	return *v, true
}

// OldSdModelName returns the old "sd_model_name" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldSdModelName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSdModelName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSdModelName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSdModelName: %w", err)
	}
	return oldValue.SdModelName, nil
}

// ClearSdModelName clears the value of the "sd_model_name" field.
func (m *TaskMutation) ClearSdModelName() {
	m.sd_model_name = nil
	m.clearedFields[task.FieldSdModelName] = struct{}{}
}

// SdModelNameCleared returns if the "sd_model_name" field was cleared in this mutation.
func (m *TaskMutation) SdModelNameCleared() bool {
	_, ok := m.clearedFields[task.FieldSdModelName]
	return ok
}

// ResetSdModelName resets all changes to the "sd_model_name" field.
func (m *TaskMutation) ResetSdModelName() {
	m.sd_model_name = nil
	delete(m.clearedFields, task.FieldSdModelName)
}

// SetSdModelHash sets the "sd_model_hash" field.
func (m *TaskMutation) SetSdModelHash(s string) {
	m.sd_model_hash = &s
}

// SdModelHash returns the value of the "sd_model_hash" field in the mutation.
func (m *TaskMutation) SdModelHash() (r string, exists bool) {
	v := m.sd_model_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldSdModelHash returns the old "sd_model_hash" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldSdModelHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSdModelHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSdModelHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSdModelHash: %w", err)
	}
	return oldValue.SdModelHash, nil
}

// ClearSdModelHash clears the value of the "sd_model_hash" field.
func (m *TaskMutation) ClearSdModelHash() {
	m.sd_model_hash = nil
	m.clearedFields[task.FieldSdModelHash] = struct{}{}
}

// SdModelHashCleared returns if the "sd_model_hash" field was cleared in this mutation.
func (m *TaskMutation) SdModelHashCleared() bool {
	_, ok := m.clearedFields[task.FieldSdModelHash]
	return ok
}

// ResetSdModelHash resets all changes to the "sd_model_hash" field.
func (m *TaskMutation) ResetSdModelHash() {
	m.sd_model_hash = nil
	delete(m.clearedFields, task.FieldSdModelHash)
}

// SetSdVaeName sets the "sd_vae_name" field.
func (m *TaskMutation) SetSdVaeName(s string) {
	m.sd_vae_name = &s
}

// SdVaeName returns the value of the "sd_vae_name" field in the mutation.
func (m *TaskMutation) SdVaeName() (r string, exists bool) {
	v := m.sd_vae_name
	if v == nil {
		return
	}
	return *v, true
}

// OldSdVaeName returns the old "sd_vae_name" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldSdVaeName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSdVaeName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSdVaeName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSdVaeName: %w", err)
	}
	return oldValue.SdVaeName, nil
}

// ClearSdVaeName clears the value of the "sd_vae_name" field.
func (m *TaskMutation) ClearSdVaeName() {
	m.sd_vae_name = nil
	m.clearedFields[task.FieldSdVaeName] = struct{}{}
}

// SdVaeNameCleared returns if the "sd_vae_name" field was cleared in this mutation.
func (m *TaskMutation) SdVaeNameCleared() bool {
	_, ok := m.clearedFields[task.FieldSdVaeName]
	return ok
}

// ResetSdVaeName resets all changes to the "sd_vae_name" field.
func (m *TaskMutation) ResetSdVaeName() {
	m.sd_vae_name = nil
	delete(m.clearedFields, task.FieldSdVaeName)
}

// SetSdVaeHash sets the "sd_vae_hash" field.
func (m *TaskMutation) SetSdVaeHash(s string) {
	m.sd_vae_hash = &s
}

// SdVaeHash returns the value of the "sd_vae_hash" field in the mutation.
func (m *TaskMutation) SdVaeHash() (r string, exists bool) {
	v := m.sd_vae_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldSdVaeHash returns the old "sd_vae_hash" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldSdVaeHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSdVaeHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSdVaeHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSdVaeHash: %w", err)
	}
	return oldValue.SdVaeHash, nil
}

// ClearSdVaeHash clears the value of the "sd_vae_hash" field.
func (m *TaskMutation) ClearSdVaeHash() {
	m.sd_vae_hash = nil
	m.clearedFields[task.FieldSdVaeHash] = struct{}{}
}

// SdVaeHashCleared returns if the "sd_vae_hash" field was cleared in this mutation.
func (m *TaskMutation) SdVaeHashCleared() bool {
	_, ok := m.clearedFields[task.FieldSdVaeHash]
	return ok
}

// ResetSdVaeHash resets all changes to the "sd_vae_hash" field.
func (m *TaskMutation) ResetSdVaeHash() {
	m.sd_vae_hash = nil
	delete(m.clearedFields, task.FieldSdVaeHash)
}

// SetJobTimestamp sets the "job_timestamp" field.
func (m *TaskMutation) SetJobTimestamp(t time.Time) {
	m.job_timestamp = &t
}

// JobTimestamp returns the value of the "job_timestamp" field in the mutation.
func (m *TaskMutation) JobTimestamp() (r time.Time, exists bool) {
	v := m.job_timestamp
	if v == nil {
		return
	}
	return *v, true
}

// OldJobTimestamp returns the old "job_timestamp" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldJobTimestamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJobTimestamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJobTimestamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJobTimestamp: %w", err)
	}
	return oldValue.JobTimestamp, nil
}

// ClearJobTimestamp clears the value of the "job_timestamp" field.
func (m *TaskMutation) ClearJobTimestamp() {
	m.job_timestamp = nil
	m.clearedFields[task.FieldJobTimestamp] = struct{}{}
}

// JobTimestampCleared returns if the "job_timestamp" field was cleared in this mutation.
func (m *TaskMutation) JobTimestampCleared() bool {
	_, ok := m.clearedFields[task.FieldJobTimestamp]
	return ok
}

// ResetJobTimestamp resets all changes to the "job_timestamp" field.
func (m *TaskMutation) ResetJobTimestamp() {
	m.job_timestamp = nil
	delete(m.clearedFields, task.FieldJobTimestamp)
}

// SetVersion sets the "version" field.
func (m *TaskMutation) SetVersion(s string) {
	m.version = &s
}

// Version returns the value of the "version" field in the mutation.
func (m *TaskMutation) Version() (r string, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// ClearVersion clears the value of the "version" field.
func (m *TaskMutation) ClearVersion() {
	m.version = nil
	m.clearedFields[task.FieldVersion] = struct{}{}
}

// VersionCleared returns if the "version" field was cleared in this mutation.
func (m *TaskMutation) VersionCleared() bool {
	_, ok := m.clearedFields[task.FieldVersion]
	return ok
}

// ResetVersion resets all changes to the "version" field.
func (m *TaskMutation) ResetVersion() {
	m.version = nil
	delete(m.clearedFields, task.FieldVersion)
}

// SetGridImageURL sets the "grid_image_url" field.
func (m *TaskMutation) SetGridImageURL(s string) {
	m.grid_image_url = &s
}

// GridImageURL returns the value of the "grid_image_url" field in the mutation.
func (m *TaskMutation) GridImageURL() (r string, exists bool) {
	v := m.grid_image_url
	if v == nil {
		return
	}
	return *v, true
}

// OldGridImageURL returns the old "grid_image_url" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldGridImageURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGridImageURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGridImageURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGridImageURL: %w", err)
	}
	return oldValue.GridImageURL, nil
}

// ClearGridImageURL clears the value of the "grid_image_url" field.
func (m *TaskMutation) ClearGridImageURL() {
	m.grid_image_url = nil
	m.clearedFields[task.FieldGridImageURL] = struct{}{}
}

// GridImageURLCleared returns if the "grid_image_url" field was cleared in this mutation.
func (m *TaskMutation) GridImageURLCleared() bool {
	_, ok := m.clearedFields[task.FieldGridImageURL]
	return ok
}

// ResetGridImageURL resets all changes to the "grid_image_url" field.
func (m *TaskMutation) ResetGridImageURL() {
	m.grid_image_url = nil
	delete(m.clearedFields, task.FieldGridImageURL)
}

// SetStatus sets the "status" field.
func (m *TaskMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *TaskMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ClearStatus clears the value of the "status" field.
func (m *TaskMutation) ClearStatus() {
	m.status = nil
	m.clearedFields[task.FieldStatus] = struct{}{}
}

// StatusCleared returns if the "status" field was cleared in this mutation.
func (m *TaskMutation) StatusCleared() bool {
	_, ok := m.clearedFields[task.FieldStatus]
	return ok
}

// ResetStatus resets all changes to the "status" field.
func (m *TaskMutation) ResetStatus() {
	m.status = nil
	delete(m.clearedFields, task.FieldStatus)
}

// SetAuthorID sets the "author_id" field.
func (m *TaskMutation) SetAuthorID(i int) {
	m.author_id = &i
	m.addauthor_id = nil
}

// AuthorID returns the value of the "author_id" field in the mutation.
func (m *TaskMutation) AuthorID() (r int, exists bool) {
	v := m.author_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthorID returns the old "author_id" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldAuthorID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthorID: %w", err)
	}
	return oldValue.AuthorID, nil
}

// AddAuthorID adds i to the "author_id" field.
func (m *TaskMutation) AddAuthorID(i int) {
	if m.addauthor_id != nil {
		*m.addauthor_id += i
	} else {
		m.addauthor_id = &i
	}
}

// AddedAuthorID returns the value that was added to the "author_id" field in this mutation.
func (m *TaskMutation) AddedAuthorID() (r int, exists bool) {
	v := m.addauthor_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearAuthorID clears the value of the "author_id" field.
func (m *TaskMutation) ClearAuthorID() {
	m.author_id = nil
	m.addauthor_id = nil
	m.clearedFields[task.FieldAuthorID] = struct{}{}
}

// AuthorIDCleared returns if the "author_id" field was cleared in this mutation.
func (m *TaskMutation) AuthorIDCleared() bool {
	_, ok := m.clearedFields[task.FieldAuthorID]
	return ok
}

// ResetAuthorID resets all changes to the "author_id" field.
func (m *TaskMutation) ResetAuthorID() {
	m.author_id = nil
	m.addauthor_id = nil
	delete(m.clearedFields, task.FieldAuthorID)
}

// SetAuthorName sets the "author_name" field.
func (m *TaskMutation) SetAuthorName(s string) {
	m.author_name = &s
}

// AuthorName returns the value of the "author_name" field in the mutation.
func (m *TaskMutation) AuthorName() (r string, exists bool) {
	v := m.author_name
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthorName returns the old "author_name" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldAuthorName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthorName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthorName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthorName: %w", err)
	}
	return oldValue.AuthorName, nil
}

// ClearAuthorName clears the value of the "author_name" field.
func (m *TaskMutation) ClearAuthorName() {
	m.author_name = nil
	m.clearedFields[task.FieldAuthorName] = struct{}{}
}

// AuthorNameCleared returns if the "author_name" field was cleared in this mutation.
func (m *TaskMutation) AuthorNameCleared() bool {
	_, ok := m.clearedFields[task.FieldAuthorName]
	return ok
}

// ResetAuthorName resets all changes to the "author_name" field.
func (m *TaskMutation) ResetAuthorName() {
	m.author_name = nil
	delete(m.clearedFields, task.FieldAuthorName)
}

// SetRefImages sets the "ref_images" field.
func (m *TaskMutation) SetRefImages(s []string) {
	m.ref_images = &s
	m.appendref_images = nil
}

// RefImages returns the value of the "ref_images" field in the mutation.
func (m *TaskMutation) RefImages() (r []string, exists bool) {
	v := m.ref_images
	if v == nil {
		return
	}
	return *v, true
}

// OldRefImages returns the old "ref_images" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldRefImages(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefImages is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefImages requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefImages: %w", err)
	}
	return oldValue.RefImages, nil
}

// AppendRefImages adds s to the "ref_images" field.
func (m *TaskMutation) AppendRefImages(s []string) {
	m.appendref_images = append(m.appendref_images, s...)
}

// AppendedRefImages returns the list of values that were appended to the "ref_images" field in this mutation.
func (m *TaskMutation) AppendedRefImages() ([]string, bool) {
	if len(m.appendref_images) == 0 {
		return nil, false
	}
	return m.appendref_images, true
}

// ClearRefImages clears the value of the "ref_images" field.
func (m *TaskMutation) ClearRefImages() {
	m.ref_images = nil
	m.appendref_images = nil
	m.clearedFields[task.FieldRefImages] = struct{}{}
}

// RefImagesCleared returns if the "ref_images" field was cleared in this mutation.
func (m *TaskMutation) RefImagesCleared() bool {
	_, ok := m.clearedFields[task.FieldRefImages]
	return ok
}

// ResetRefImages resets all changes to the "ref_images" field.
func (m *TaskMutation) ResetRefImages() {
	m.ref_images = nil
	m.appendref_images = nil
	delete(m.clearedFields, task.FieldRefImages)
}

// SetStore sets the "store" field.
func (m *TaskMutation) SetStore(s string) {
	m.store = &s
}

// Store returns the value of the "store" field in the mutation.
func (m *TaskMutation) Store() (r string, exists bool) {
	v := m.store
	if v == nil {
		return
	}
	return *v, true
}

// OldStore returns the old "store" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldStore(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStore: %w", err)
	}
	return oldValue.Store, nil
}

// ClearStore clears the value of the "store" field.
func (m *TaskMutation) ClearStore() {
	m.store = nil
	m.clearedFields[task.FieldStore] = struct{}{}
}

// StoreCleared returns if the "store" field was cleared in this mutation.
func (m *TaskMutation) StoreCleared() bool {
	_, ok := m.clearedFields[task.FieldStore]
	return ok
}

// ResetStore resets all changes to the "store" field.
func (m *TaskMutation) ResetStore() {
	m.store = nil
	delete(m.clearedFields, task.FieldStore)
}

// SetCount sets the "count" field.
func (m *TaskMutation) SetCount(i int) {
	m.count = &i
	m.addcount = nil
}

// Count returns the value of the "count" field in the mutation.
func (m *TaskMutation) Count() (r int, exists bool) {
	v := m.count
	if v == nil {
		return
	}
	return *v, true
}

// OldCount returns the old "count" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCount: %w", err)
	}
	return oldValue.Count, nil
}

// AddCount adds i to the "count" field.
func (m *TaskMutation) AddCount(i int) {
	if m.addcount != nil {
		*m.addcount += i
	} else {
		m.addcount = &i
	}
}

// AddedCount returns the value that was added to the "count" field in this mutation.
func (m *TaskMutation) AddedCount() (r int, exists bool) {
	v := m.addcount
	if v == nil {
		return
	}
	return *v, true
}

// ClearCount clears the value of the "count" field.
func (m *TaskMutation) ClearCount() {
	m.count = nil
	m.addcount = nil
	m.clearedFields[task.FieldCount] = struct{}{}
}

// CountCleared returns if the "count" field was cleared in this mutation.
func (m *TaskMutation) CountCleared() bool {
	_, ok := m.clearedFields[task.FieldCount]
	return ok
}

// ResetCount resets all changes to the "count" field.
func (m *TaskMutation) ResetCount() {
	m.count = nil
	m.addcount = nil
	delete(m.clearedFields, task.FieldCount)
}

// SetHasExcellent sets the "has_excellent" field.
func (m *TaskMutation) SetHasExcellent(b bool) {
	m.has_excellent = &b
}

// HasExcellent returns the value of the "has_excellent" field in the mutation.
func (m *TaskMutation) HasExcellent() (r bool, exists bool) {
	v := m.has_excellent
	if v == nil {
		return
	}
	return *v, true
}

// OldHasExcellent returns the old "has_excellent" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldHasExcellent(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHasExcellent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHasExcellent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHasExcellent: %w", err)
	}
	return oldValue.HasExcellent, nil
}

// ClearHasExcellent clears the value of the "has_excellent" field.
func (m *TaskMutation) ClearHasExcellent() {
	m.has_excellent = nil
	m.clearedFields[task.FieldHasExcellent] = struct{}{}
}

// HasExcellentCleared returns if the "has_excellent" field was cleared in this mutation.
func (m *TaskMutation) HasExcellentCleared() bool {
	_, ok := m.clearedFields[task.FieldHasExcellent]
	return ok
}

// ResetHasExcellent resets all changes to the "has_excellent" field.
func (m *TaskMutation) ResetHasExcellent() {
	m.has_excellent = nil
	delete(m.clearedFields, task.FieldHasExcellent)
}

// SetExtra sets the "extra" field.
func (m *TaskMutation) SetExtra(s string) {
	m.extra = &s
}

// Extra returns the value of the "extra" field in the mutation.
func (m *TaskMutation) Extra() (r string, exists bool) {
	v := m.extra
	if v == nil {
		return
	}
	return *v, true
}

// OldExtra returns the old "extra" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldExtra(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtra is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtra requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtra: %w", err)
	}
	return oldValue.Extra, nil
}

// ClearExtra clears the value of the "extra" field.
func (m *TaskMutation) ClearExtra() {
	m.extra = nil
	m.clearedFields[task.FieldExtra] = struct{}{}
}

// ExtraCleared returns if the "extra" field was cleared in this mutation.
func (m *TaskMutation) ExtraCleared() bool {
	_, ok := m.clearedFields[task.FieldExtra]
	return ok
}

// ResetExtra resets all changes to the "extra" field.
func (m *TaskMutation) ResetExtra() {
	m.extra = nil
	delete(m.clearedFields, task.FieldExtra)
}

// Where appends a list predicates to the TaskMutation builder.
func (m *TaskMutation) Where(ps ...predicate.Task) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TaskMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TaskMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Task, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TaskMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TaskMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Task).
func (m *TaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskMutation) Fields() []string {
	fields := make([]string, 0, 30)
	if m.create_time != nil {
		fields = append(fields, task.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, task.FieldUpdateTime)
	}
	if m.delete_time != nil {
		fields = append(fields, task.FieldDeleteTime)
	}
	if m.prompt != nil {
		fields = append(fields, task.FieldPrompt)
	}
	if m.negative_prompt != nil {
		fields = append(fields, task.FieldNegativePrompt)
	}
	if m.category != nil {
		fields = append(fields, task.FieldCategory)
	}
	if m.weight != nil {
		fields = append(fields, task.FieldWeight)
	}
	if m.height != nil {
		fields = append(fields, task.FieldHeight)
	}
	if m.img_size != nil {
		fields = append(fields, task.FieldImgSize)
	}
	if m.seed != nil {
		fields = append(fields, task.FieldSeed)
	}
	if m.sampler_name != nil {
		fields = append(fields, task.FieldSamplerName)
	}
	if m.steps != nil {
		fields = append(fields, task.FieldSteps)
	}
	if m.cfg_scale != nil {
		fields = append(fields, task.FieldCfgScale)
	}
	if m.batch_size != nil {
		fields = append(fields, task.FieldBatchSize)
	}
	if m.total != nil {
		fields = append(fields, task.FieldTotal)
	}
	if m.sd_model_name != nil {
		fields = append(fields, task.FieldSdModelName)
	}
	if m.sd_model_hash != nil {
		fields = append(fields, task.FieldSdModelHash)
	}
	if m.sd_vae_name != nil {
		fields = append(fields, task.FieldSdVaeName)
	}
	if m.sd_vae_hash != nil {
		fields = append(fields, task.FieldSdVaeHash)
	}
	if m.job_timestamp != nil {
		fields = append(fields, task.FieldJobTimestamp)
	}
	if m.version != nil {
		fields = append(fields, task.FieldVersion)
	}
	if m.grid_image_url != nil {
		fields = append(fields, task.FieldGridImageURL)
	}
	if m.status != nil {
		fields = append(fields, task.FieldStatus)
	}
	if m.author_id != nil {
		fields = append(fields, task.FieldAuthorID)
	}
	if m.author_name != nil {
		fields = append(fields, task.FieldAuthorName)
	}
	if m.ref_images != nil {
		fields = append(fields, task.FieldRefImages)
	}
	if m.store != nil {
		fields = append(fields, task.FieldStore)
	}
	if m.count != nil {
		fields = append(fields, task.FieldCount)
	}
	if m.has_excellent != nil {
		fields = append(fields, task.FieldHasExcellent)
	}
	if m.extra != nil {
		fields = append(fields, task.FieldExtra)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case task.FieldCreateTime:
		return m.CreateTime()
	case task.FieldUpdateTime:
		return m.UpdateTime()
	case task.FieldDeleteTime:
		return m.DeleteTime()
	case task.FieldPrompt:
		return m.Prompt()
	case task.FieldNegativePrompt:
		return m.NegativePrompt()
	case task.FieldCategory:
		return m.Category()
	case task.FieldWeight:
		return m.Weight()
	case task.FieldHeight:
		return m.Height()
	case task.FieldImgSize:
		return m.ImgSize()
	case task.FieldSeed:
		return m.Seed()
	case task.FieldSamplerName:
		return m.SamplerName()
	case task.FieldSteps:
		return m.Steps()
	case task.FieldCfgScale:
		return m.CfgScale()
	case task.FieldBatchSize:
		return m.BatchSize()
	case task.FieldTotal:
		return m.Total()
	case task.FieldSdModelName:
		return m.SdModelName()
	case task.FieldSdModelHash:
		return m.SdModelHash()
	case task.FieldSdVaeName:
		return m.SdVaeName()
	case task.FieldSdVaeHash:
		return m.SdVaeHash()
	case task.FieldJobTimestamp:
		return m.JobTimestamp()
	case task.FieldVersion:
		return m.Version()
	case task.FieldGridImageURL:
		return m.GridImageURL()
	case task.FieldStatus:
		return m.Status()
	case task.FieldAuthorID:
		return m.AuthorID()
	case task.FieldAuthorName:
		return m.AuthorName()
	case task.FieldRefImages:
		return m.RefImages()
	case task.FieldStore:
		return m.Store()
	case task.FieldCount:
		return m.Count()
	case task.FieldHasExcellent:
		return m.HasExcellent()
	case task.FieldExtra:
		return m.Extra()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case task.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case task.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case task.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case task.FieldPrompt:
		return m.OldPrompt(ctx)
	case task.FieldNegativePrompt:
		return m.OldNegativePrompt(ctx)
	case task.FieldCategory:
		return m.OldCategory(ctx)
	case task.FieldWeight:
		return m.OldWeight(ctx)
	case task.FieldHeight:
		return m.OldHeight(ctx)
	case task.FieldImgSize:
		return m.OldImgSize(ctx)
	case task.FieldSeed:
		return m.OldSeed(ctx)
	case task.FieldSamplerName:
		return m.OldSamplerName(ctx)
	case task.FieldSteps:
		return m.OldSteps(ctx)
	case task.FieldCfgScale:
		return m.OldCfgScale(ctx)
	case task.FieldBatchSize:
		return m.OldBatchSize(ctx)
	case task.FieldTotal:
		return m.OldTotal(ctx)
	case task.FieldSdModelName:
		return m.OldSdModelName(ctx)
	case task.FieldSdModelHash:
		return m.OldSdModelHash(ctx)
	case task.FieldSdVaeName:
		return m.OldSdVaeName(ctx)
	case task.FieldSdVaeHash:
		return m.OldSdVaeHash(ctx)
	case task.FieldJobTimestamp:
		return m.OldJobTimestamp(ctx)
	case task.FieldVersion:
		return m.OldVersion(ctx)
	case task.FieldGridImageURL:
		return m.OldGridImageURL(ctx)
	case task.FieldStatus:
		return m.OldStatus(ctx)
	case task.FieldAuthorID:
		return m.OldAuthorID(ctx)
	case task.FieldAuthorName:
		return m.OldAuthorName(ctx)
	case task.FieldRefImages:
		return m.OldRefImages(ctx)
	case task.FieldStore:
		return m.OldStore(ctx)
	case task.FieldCount:
		return m.OldCount(ctx)
	case task.FieldHasExcellent:
		return m.OldHasExcellent(ctx)
	case task.FieldExtra:
		return m.OldExtra(ctx)
	}
	return nil, fmt.Errorf("unknown Task field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case task.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case task.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case task.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case task.FieldPrompt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrompt(v)
		return nil
	case task.FieldNegativePrompt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNegativePrompt(v)
		return nil
	case task.FieldCategory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategory(v)
		return nil
	case task.FieldWeight:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeight(v)
		return nil
	case task.FieldHeight:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeight(v)
		return nil
	case task.FieldImgSize:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImgSize(v)
		return nil
	case task.FieldSeed:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSeed(v)
		return nil
	case task.FieldSamplerName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSamplerName(v)
		return nil
	case task.FieldSteps:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSteps(v)
		return nil
	case task.FieldCfgScale:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCfgScale(v)
		return nil
	case task.FieldBatchSize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBatchSize(v)
		return nil
	case task.FieldTotal:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotal(v)
		return nil
	case task.FieldSdModelName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSdModelName(v)
		return nil
	case task.FieldSdModelHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSdModelHash(v)
		return nil
	case task.FieldSdVaeName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSdVaeName(v)
		return nil
	case task.FieldSdVaeHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSdVaeHash(v)
		return nil
	case task.FieldJobTimestamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJobTimestamp(v)
		return nil
	case task.FieldVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case task.FieldGridImageURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGridImageURL(v)
		return nil
	case task.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case task.FieldAuthorID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthorID(v)
		return nil
	case task.FieldAuthorName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthorName(v)
		return nil
	case task.FieldRefImages:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefImages(v)
		return nil
	case task.FieldStore:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStore(v)
		return nil
	case task.FieldCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCount(v)
		return nil
	case task.FieldHasExcellent:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHasExcellent(v)
		return nil
	case task.FieldExtra:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtra(v)
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskMutation) AddedFields() []string {
	var fields []string
	if m.addweight != nil {
		fields = append(fields, task.FieldWeight)
	}
	if m.addheight != nil {
		fields = append(fields, task.FieldHeight)
	}
	if m.addsteps != nil {
		fields = append(fields, task.FieldSteps)
	}
	if m.addcfg_scale != nil {
		fields = append(fields, task.FieldCfgScale)
	}
	if m.addbatch_size != nil {
		fields = append(fields, task.FieldBatchSize)
	}
	if m.addtotal != nil {
		fields = append(fields, task.FieldTotal)
	}
	if m.addauthor_id != nil {
		fields = append(fields, task.FieldAuthorID)
	}
	if m.addcount != nil {
		fields = append(fields, task.FieldCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case task.FieldWeight:
		return m.AddedWeight()
	case task.FieldHeight:
		return m.AddedHeight()
	case task.FieldSteps:
		return m.AddedSteps()
	case task.FieldCfgScale:
		return m.AddedCfgScale()
	case task.FieldBatchSize:
		return m.AddedBatchSize()
	case task.FieldTotal:
		return m.AddedTotal()
	case task.FieldAuthorID:
		return m.AddedAuthorID()
	case task.FieldCount:
		return m.AddedCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	case task.FieldWeight:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeight(v)
		return nil
	case task.FieldHeight:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHeight(v)
		return nil
	case task.FieldSteps:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSteps(v)
		return nil
	case task.FieldCfgScale:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCfgScale(v)
		return nil
	case task.FieldBatchSize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBatchSize(v)
		return nil
	case task.FieldTotal:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotal(v)
		return nil
	case task.FieldAuthorID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAuthorID(v)
		return nil
	case task.FieldCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCount(v)
		return nil
	}
	return fmt.Errorf("unknown Task numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(task.FieldDeleteTime) {
		fields = append(fields, task.FieldDeleteTime)
	}
	if m.FieldCleared(task.FieldPrompt) {
		fields = append(fields, task.FieldPrompt)
	}
	if m.FieldCleared(task.FieldNegativePrompt) {
		fields = append(fields, task.FieldNegativePrompt)
	}
	if m.FieldCleared(task.FieldCategory) {
		fields = append(fields, task.FieldCategory)
	}
	if m.FieldCleared(task.FieldWeight) {
		fields = append(fields, task.FieldWeight)
	}
	if m.FieldCleared(task.FieldHeight) {
		fields = append(fields, task.FieldHeight)
	}
	if m.FieldCleared(task.FieldImgSize) {
		fields = append(fields, task.FieldImgSize)
	}
	if m.FieldCleared(task.FieldSeed) {
		fields = append(fields, task.FieldSeed)
	}
	if m.FieldCleared(task.FieldSamplerName) {
		fields = append(fields, task.FieldSamplerName)
	}
	if m.FieldCleared(task.FieldSteps) {
		fields = append(fields, task.FieldSteps)
	}
	if m.FieldCleared(task.FieldCfgScale) {
		fields = append(fields, task.FieldCfgScale)
	}
	if m.FieldCleared(task.FieldBatchSize) {
		fields = append(fields, task.FieldBatchSize)
	}
	if m.FieldCleared(task.FieldTotal) {
		fields = append(fields, task.FieldTotal)
	}
	if m.FieldCleared(task.FieldSdModelName) {
		fields = append(fields, task.FieldSdModelName)
	}
	if m.FieldCleared(task.FieldSdModelHash) {
		fields = append(fields, task.FieldSdModelHash)
	}
	if m.FieldCleared(task.FieldSdVaeName) {
		fields = append(fields, task.FieldSdVaeName)
	}
	if m.FieldCleared(task.FieldSdVaeHash) {
		fields = append(fields, task.FieldSdVaeHash)
	}
	if m.FieldCleared(task.FieldJobTimestamp) {
		fields = append(fields, task.FieldJobTimestamp)
	}
	if m.FieldCleared(task.FieldVersion) {
		fields = append(fields, task.FieldVersion)
	}
	if m.FieldCleared(task.FieldGridImageURL) {
		fields = append(fields, task.FieldGridImageURL)
	}
	if m.FieldCleared(task.FieldStatus) {
		fields = append(fields, task.FieldStatus)
	}
	if m.FieldCleared(task.FieldAuthorID) {
		fields = append(fields, task.FieldAuthorID)
	}
	if m.FieldCleared(task.FieldAuthorName) {
		fields = append(fields, task.FieldAuthorName)
	}
	if m.FieldCleared(task.FieldRefImages) {
		fields = append(fields, task.FieldRefImages)
	}
	if m.FieldCleared(task.FieldStore) {
		fields = append(fields, task.FieldStore)
	}
	if m.FieldCleared(task.FieldCount) {
		fields = append(fields, task.FieldCount)
	}
	if m.FieldCleared(task.FieldHasExcellent) {
		fields = append(fields, task.FieldHasExcellent)
	}
	if m.FieldCleared(task.FieldExtra) {
		fields = append(fields, task.FieldExtra)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskMutation) ClearField(name string) error {
	switch name {
	case task.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	case task.FieldPrompt:
		m.ClearPrompt()
		return nil
	case task.FieldNegativePrompt:
		m.ClearNegativePrompt()
		return nil
	case task.FieldCategory:
		m.ClearCategory()
		return nil
	case task.FieldWeight:
		m.ClearWeight()
		return nil
	case task.FieldHeight:
		m.ClearHeight()
		return nil
	case task.FieldImgSize:
		m.ClearImgSize()
		return nil
	case task.FieldSeed:
		m.ClearSeed()
		return nil
	case task.FieldSamplerName:
		m.ClearSamplerName()
		return nil
	case task.FieldSteps:
		m.ClearSteps()
		return nil
	case task.FieldCfgScale:
		m.ClearCfgScale()
		return nil
	case task.FieldBatchSize:
		m.ClearBatchSize()
		return nil
	case task.FieldTotal:
		m.ClearTotal()
		return nil
	case task.FieldSdModelName:
		m.ClearSdModelName()
		return nil
	case task.FieldSdModelHash:
		m.ClearSdModelHash()
		return nil
	case task.FieldSdVaeName:
		m.ClearSdVaeName()
		return nil
	case task.FieldSdVaeHash:
		m.ClearSdVaeHash()
		return nil
	case task.FieldJobTimestamp:
		m.ClearJobTimestamp()
		return nil
	case task.FieldVersion:
		m.ClearVersion()
		return nil
	case task.FieldGridImageURL:
		m.ClearGridImageURL()
		return nil
	case task.FieldStatus:
		m.ClearStatus()
		return nil
	case task.FieldAuthorID:
		m.ClearAuthorID()
		return nil
	case task.FieldAuthorName:
		m.ClearAuthorName()
		return nil
	case task.FieldRefImages:
		m.ClearRefImages()
		return nil
	case task.FieldStore:
		m.ClearStore()
		return nil
	case task.FieldCount:
		m.ClearCount()
		return nil
	case task.FieldHasExcellent:
		m.ClearHasExcellent()
		return nil
	case task.FieldExtra:
		m.ClearExtra()
		return nil
	}
	return fmt.Errorf("unknown Task nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskMutation) ResetField(name string) error {
	switch name {
	case task.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case task.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case task.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case task.FieldPrompt:
		m.ResetPrompt()
		return nil
	case task.FieldNegativePrompt:
		m.ResetNegativePrompt()
		return nil
	case task.FieldCategory:
		m.ResetCategory()
		return nil
	case task.FieldWeight:
		m.ResetWeight()
		return nil
	case task.FieldHeight:
		m.ResetHeight()
		return nil
	case task.FieldImgSize:
		m.ResetImgSize()
		return nil
	case task.FieldSeed:
		m.ResetSeed()
		return nil
	case task.FieldSamplerName:
		m.ResetSamplerName()
		return nil
	case task.FieldSteps:
		m.ResetSteps()
		return nil
	case task.FieldCfgScale:
		m.ResetCfgScale()
		return nil
	case task.FieldBatchSize:
		m.ResetBatchSize()
		return nil
	case task.FieldTotal:
		m.ResetTotal()
		return nil
	case task.FieldSdModelName:
		m.ResetSdModelName()
		return nil
	case task.FieldSdModelHash:
		m.ResetSdModelHash()
		return nil
	case task.FieldSdVaeName:
		m.ResetSdVaeName()
		return nil
	case task.FieldSdVaeHash:
		m.ResetSdVaeHash()
		return nil
	case task.FieldJobTimestamp:
		m.ResetJobTimestamp()
		return nil
	case task.FieldVersion:
		m.ResetVersion()
		return nil
	case task.FieldGridImageURL:
		m.ResetGridImageURL()
		return nil
	case task.FieldStatus:
		m.ResetStatus()
		return nil
	case task.FieldAuthorID:
		m.ResetAuthorID()
		return nil
	case task.FieldAuthorName:
		m.ResetAuthorName()
		return nil
	case task.FieldRefImages:
		m.ResetRefImages()
		return nil
	case task.FieldStore:
		m.ResetStore()
		return nil
	case task.FieldCount:
		m.ResetCount()
		return nil
	case task.FieldHasExcellent:
		m.ResetHasExcellent()
		return nil
	case task.FieldExtra:
		m.ResetExtra()
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Task unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Task edge %s", name)
}

// TaskDetailMutation represents an operation that mutates the TaskDetail nodes in the graph.
type TaskDetailMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	update_time   *time.Time
	delete_time   *time.Time
	task_id       *int
	addtask_id    *int
	image_url     *string
	has_excellent *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TaskDetail, error)
	predicates    []predicate.TaskDetail
}

var _ ent.Mutation = (*TaskDetailMutation)(nil)

// taskdetailOption allows management of the mutation configuration using functional options.
type taskdetailOption func(*TaskDetailMutation)

// newTaskDetailMutation creates new mutation for the TaskDetail entity.
func newTaskDetailMutation(c config, op Op, opts ...taskdetailOption) *TaskDetailMutation {
	m := &TaskDetailMutation{
		config:        c,
		op:            op,
		typ:           TypeTaskDetail,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskDetailID sets the ID field of the mutation.
func withTaskDetailID(id int) taskdetailOption {
	return func(m *TaskDetailMutation) {
		var (
			err   error
			once  sync.Once
			value *TaskDetail
		)
		m.oldValue = func(ctx context.Context) (*TaskDetail, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TaskDetail.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTaskDetail sets the old TaskDetail of the mutation.
func withTaskDetail(node *TaskDetail) taskdetailOption {
	return func(m *TaskDetailMutation) {
		m.oldValue = func(context.Context) (*TaskDetail, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskDetailMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskDetailMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskDetailMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaskDetailMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TaskDetail.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *TaskDetailMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *TaskDetailMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the TaskDetail entity.
// If the TaskDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskDetailMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *TaskDetailMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *TaskDetailMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *TaskDetailMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the TaskDetail entity.
// If the TaskDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskDetailMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *TaskDetailMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetDeleteTime sets the "delete_time" field.
func (m *TaskDetailMutation) SetDeleteTime(t time.Time) {
	m.delete_time = &t
}

// DeleteTime returns the value of the "delete_time" field in the mutation.
func (m *TaskDetailMutation) DeleteTime() (r time.Time, exists bool) {
	v := m.delete_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteTime returns the old "delete_time" field's value of the TaskDetail entity.
// If the TaskDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskDetailMutation) OldDeleteTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteTime: %w", err)
	}
	return oldValue.DeleteTime, nil
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (m *TaskDetailMutation) ClearDeleteTime() {
	m.delete_time = nil
	m.clearedFields[taskdetail.FieldDeleteTime] = struct{}{}
}

// DeleteTimeCleared returns if the "delete_time" field was cleared in this mutation.
func (m *TaskDetailMutation) DeleteTimeCleared() bool {
	_, ok := m.clearedFields[taskdetail.FieldDeleteTime]
	return ok
}

// ResetDeleteTime resets all changes to the "delete_time" field.
func (m *TaskDetailMutation) ResetDeleteTime() {
	m.delete_time = nil
	delete(m.clearedFields, taskdetail.FieldDeleteTime)
}

// SetTaskID sets the "task_id" field.
func (m *TaskDetailMutation) SetTaskID(i int) {
	m.task_id = &i
	m.addtask_id = nil
}

// TaskID returns the value of the "task_id" field in the mutation.
func (m *TaskDetailMutation) TaskID() (r int, exists bool) {
	v := m.task_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskID returns the old "task_id" field's value of the TaskDetail entity.
// If the TaskDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskDetailMutation) OldTaskID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskID: %w", err)
	}
	return oldValue.TaskID, nil
}

// AddTaskID adds i to the "task_id" field.
func (m *TaskDetailMutation) AddTaskID(i int) {
	if m.addtask_id != nil {
		*m.addtask_id += i
	} else {
		m.addtask_id = &i
	}
}

// AddedTaskID returns the value that was added to the "task_id" field in this mutation.
func (m *TaskDetailMutation) AddedTaskID() (r int, exists bool) {
	v := m.addtask_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearTaskID clears the value of the "task_id" field.
func (m *TaskDetailMutation) ClearTaskID() {
	m.task_id = nil
	m.addtask_id = nil
	m.clearedFields[taskdetail.FieldTaskID] = struct{}{}
}

// TaskIDCleared returns if the "task_id" field was cleared in this mutation.
func (m *TaskDetailMutation) TaskIDCleared() bool {
	_, ok := m.clearedFields[taskdetail.FieldTaskID]
	return ok
}

// ResetTaskID resets all changes to the "task_id" field.
func (m *TaskDetailMutation) ResetTaskID() {
	m.task_id = nil
	m.addtask_id = nil
	delete(m.clearedFields, taskdetail.FieldTaskID)
}

// SetImageURL sets the "image_url" field.
func (m *TaskDetailMutation) SetImageURL(s string) {
	m.image_url = &s
}

// ImageURL returns the value of the "image_url" field in the mutation.
func (m *TaskDetailMutation) ImageURL() (r string, exists bool) {
	v := m.image_url
	if v == nil {
		return
	}
	return *v, true
}

// OldImageURL returns the old "image_url" field's value of the TaskDetail entity.
// If the TaskDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskDetailMutation) OldImageURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageURL: %w", err)
	}
	return oldValue.ImageURL, nil
}

// ClearImageURL clears the value of the "image_url" field.
func (m *TaskDetailMutation) ClearImageURL() {
	m.image_url = nil
	m.clearedFields[taskdetail.FieldImageURL] = struct{}{}
}

// ImageURLCleared returns if the "image_url" field was cleared in this mutation.
func (m *TaskDetailMutation) ImageURLCleared() bool {
	_, ok := m.clearedFields[taskdetail.FieldImageURL]
	return ok
}

// ResetImageURL resets all changes to the "image_url" field.
func (m *TaskDetailMutation) ResetImageURL() {
	m.image_url = nil
	delete(m.clearedFields, taskdetail.FieldImageURL)
}

// SetHasExcellent sets the "has_excellent" field.
func (m *TaskDetailMutation) SetHasExcellent(b bool) {
	m.has_excellent = &b
}

// HasExcellent returns the value of the "has_excellent" field in the mutation.
func (m *TaskDetailMutation) HasExcellent() (r bool, exists bool) {
	v := m.has_excellent
	if v == nil {
		return
	}
	return *v, true
}

// OldHasExcellent returns the old "has_excellent" field's value of the TaskDetail entity.
// If the TaskDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskDetailMutation) OldHasExcellent(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHasExcellent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHasExcellent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHasExcellent: %w", err)
	}
	return oldValue.HasExcellent, nil
}

// ClearHasExcellent clears the value of the "has_excellent" field.
func (m *TaskDetailMutation) ClearHasExcellent() {
	m.has_excellent = nil
	m.clearedFields[taskdetail.FieldHasExcellent] = struct{}{}
}

// HasExcellentCleared returns if the "has_excellent" field was cleared in this mutation.
func (m *TaskDetailMutation) HasExcellentCleared() bool {
	_, ok := m.clearedFields[taskdetail.FieldHasExcellent]
	return ok
}

// ResetHasExcellent resets all changes to the "has_excellent" field.
func (m *TaskDetailMutation) ResetHasExcellent() {
	m.has_excellent = nil
	delete(m.clearedFields, taskdetail.FieldHasExcellent)
}

// Where appends a list predicates to the TaskDetailMutation builder.
func (m *TaskDetailMutation) Where(ps ...predicate.TaskDetail) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TaskDetailMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TaskDetailMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TaskDetail, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TaskDetailMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TaskDetailMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TaskDetail).
func (m *TaskDetailMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskDetailMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.create_time != nil {
		fields = append(fields, taskdetail.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, taskdetail.FieldUpdateTime)
	}
	if m.delete_time != nil {
		fields = append(fields, taskdetail.FieldDeleteTime)
	}
	if m.task_id != nil {
		fields = append(fields, taskdetail.FieldTaskID)
	}
	if m.image_url != nil {
		fields = append(fields, taskdetail.FieldImageURL)
	}
	if m.has_excellent != nil {
		fields = append(fields, taskdetail.FieldHasExcellent)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskDetailMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case taskdetail.FieldCreateTime:
		return m.CreateTime()
	case taskdetail.FieldUpdateTime:
		return m.UpdateTime()
	case taskdetail.FieldDeleteTime:
		return m.DeleteTime()
	case taskdetail.FieldTaskID:
		return m.TaskID()
	case taskdetail.FieldImageURL:
		return m.ImageURL()
	case taskdetail.FieldHasExcellent:
		return m.HasExcellent()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskDetailMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case taskdetail.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case taskdetail.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case taskdetail.FieldDeleteTime:
		return m.OldDeleteTime(ctx)
	case taskdetail.FieldTaskID:
		return m.OldTaskID(ctx)
	case taskdetail.FieldImageURL:
		return m.OldImageURL(ctx)
	case taskdetail.FieldHasExcellent:
		return m.OldHasExcellent(ctx)
	}
	return nil, fmt.Errorf("unknown TaskDetail field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskDetailMutation) SetField(name string, value ent.Value) error {
	switch name {
	case taskdetail.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case taskdetail.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case taskdetail.FieldDeleteTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteTime(v)
		return nil
	case taskdetail.FieldTaskID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskID(v)
		return nil
	case taskdetail.FieldImageURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageURL(v)
		return nil
	case taskdetail.FieldHasExcellent:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHasExcellent(v)
		return nil
	}
	return fmt.Errorf("unknown TaskDetail field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskDetailMutation) AddedFields() []string {
	var fields []string
	if m.addtask_id != nil {
		fields = append(fields, taskdetail.FieldTaskID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskDetailMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case taskdetail.FieldTaskID:
		return m.AddedTaskID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskDetailMutation) AddField(name string, value ent.Value) error {
	switch name {
	case taskdetail.FieldTaskID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTaskID(v)
		return nil
	}
	return fmt.Errorf("unknown TaskDetail numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskDetailMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(taskdetail.FieldDeleteTime) {
		fields = append(fields, taskdetail.FieldDeleteTime)
	}
	if m.FieldCleared(taskdetail.FieldTaskID) {
		fields = append(fields, taskdetail.FieldTaskID)
	}
	if m.FieldCleared(taskdetail.FieldImageURL) {
		fields = append(fields, taskdetail.FieldImageURL)
	}
	if m.FieldCleared(taskdetail.FieldHasExcellent) {
		fields = append(fields, taskdetail.FieldHasExcellent)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskDetailMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskDetailMutation) ClearField(name string) error {
	switch name {
	case taskdetail.FieldDeleteTime:
		m.ClearDeleteTime()
		return nil
	case taskdetail.FieldTaskID:
		m.ClearTaskID()
		return nil
	case taskdetail.FieldImageURL:
		m.ClearImageURL()
		return nil
	case taskdetail.FieldHasExcellent:
		m.ClearHasExcellent()
		return nil
	}
	return fmt.Errorf("unknown TaskDetail nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskDetailMutation) ResetField(name string) error {
	switch name {
	case taskdetail.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case taskdetail.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case taskdetail.FieldDeleteTime:
		m.ResetDeleteTime()
		return nil
	case taskdetail.FieldTaskID:
		m.ResetTaskID()
		return nil
	case taskdetail.FieldImageURL:
		m.ResetImageURL()
		return nil
	case taskdetail.FieldHasExcellent:
		m.ResetHasExcellent()
		return nil
	}
	return fmt.Errorf("unknown TaskDetail field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskDetailMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskDetailMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskDetailMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskDetailMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskDetailMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskDetailMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskDetailMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TaskDetail unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskDetailMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TaskDetail edge %s", name)
}
