// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ai-gallery/ent/taskdetail"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TaskDetail is the model entity for the TaskDetail schema.
type TaskDetail struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 删除时间
	DeleteTime *time.Time `json:"delete_time,omitempty"`
	// 任务ID
	TaskID int `json:"task_id,omitempty"`
	// 图片地址
	ImageURL string `json:"image_url,omitempty"`
	// 是否为优秀作品
	HasExcellent bool `json:"has_excellent,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TaskDetail) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case taskdetail.FieldHasExcellent:
			values[i] = new(sql.NullBool)
		case taskdetail.FieldID, taskdetail.FieldTaskID:
			values[i] = new(sql.NullInt64)
		case taskdetail.FieldImageURL:
			values[i] = new(sql.NullString)
		case taskdetail.FieldCreateTime, taskdetail.FieldUpdateTime, taskdetail.FieldDeleteTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TaskDetail fields.
func (td *TaskDetail) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case taskdetail.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			td.ID = int(value.Int64)
		case taskdetail.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				td.CreateTime = value.Time
			}
		case taskdetail.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				td.UpdateTime = value.Time
			}
		case taskdetail.FieldDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field delete_time", values[i])
			} else if value.Valid {
				td.DeleteTime = new(time.Time)
				*td.DeleteTime = value.Time
			}
		case taskdetail.FieldTaskID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value.Valid {
				td.TaskID = int(value.Int64)
			}
		case taskdetail.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				td.ImageURL = value.String
			}
		case taskdetail.FieldHasExcellent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field has_excellent", values[i])
			} else if value.Valid {
				td.HasExcellent = value.Bool
			}
		default:
			td.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TaskDetail.
// This includes values selected through modifiers, order, etc.
func (td *TaskDetail) Value(name string) (ent.Value, error) {
	return td.selectValues.Get(name)
}

// Update returns a builder for updating this TaskDetail.
// Note that you need to call TaskDetail.Unwrap() before calling this method if this TaskDetail
// was returned from a transaction, and the transaction was committed or rolled back.
func (td *TaskDetail) Update() *TaskDetailUpdateOne {
	return NewTaskDetailClient(td.config).UpdateOne(td)
}

// Unwrap unwraps the TaskDetail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (td *TaskDetail) Unwrap() *TaskDetail {
	_tx, ok := td.config.driver.(*txDriver)
	if !ok {
		panic("ent: TaskDetail is not a transactional entity")
	}
	td.config.driver = _tx.drv
	return td
}

// String implements the fmt.Stringer.
func (td *TaskDetail) String() string {
	var builder strings.Builder
	builder.WriteString("TaskDetail(")
	builder.WriteString(fmt.Sprintf("id=%v, ", td.ID))
	builder.WriteString("create_time=")
	builder.WriteString(td.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(td.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := td.DeleteTime; v != nil {
		builder.WriteString("delete_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("task_id=")
	builder.WriteString(fmt.Sprintf("%v", td.TaskID))
	builder.WriteString(", ")
	builder.WriteString("image_url=")
	builder.WriteString(td.ImageURL)
	builder.WriteString(", ")
	builder.WriteString("has_excellent=")
	builder.WriteString(fmt.Sprintf("%v", td.HasExcellent))
	builder.WriteByte(')')
	return builder.String()
}

// TaskDetails is a parsable slice of TaskDetail.
type TaskDetails []*TaskDetail
