// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ai-gallery/ent/baseschema"
	"ai-gallery/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BaseSchemaUpdate is the builder for updating BaseSchema entities.
type BaseSchemaUpdate struct {
	config
	hooks    []Hook
	mutation *BaseSchemaMutation
}

// Where appends a list predicates to the BaseSchemaUpdate builder.
func (bsu *BaseSchemaUpdate) Where(ps ...predicate.BaseSchema) *BaseSchemaUpdate {
	bsu.mutation.Where(ps...)
	return bsu
}

// SetUpdateTime sets the "update_time" field.
func (bsu *BaseSchemaUpdate) SetUpdateTime(t time.Time) *BaseSchemaUpdate {
	bsu.mutation.SetUpdateTime(t)
	return bsu
}

// SetDeleteTime sets the "delete_time" field.
func (bsu *BaseSchemaUpdate) SetDeleteTime(t time.Time) *BaseSchemaUpdate {
	bsu.mutation.SetDeleteTime(t)
	return bsu
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (bsu *BaseSchemaUpdate) SetNillableDeleteTime(t *time.Time) *BaseSchemaUpdate {
	if t != nil {
		bsu.SetDeleteTime(*t)
	}
	return bsu
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (bsu *BaseSchemaUpdate) ClearDeleteTime() *BaseSchemaUpdate {
	bsu.mutation.ClearDeleteTime()
	return bsu
}

// Mutation returns the BaseSchemaMutation object of the builder.
func (bsu *BaseSchemaUpdate) Mutation() *BaseSchemaMutation {
	return bsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bsu *BaseSchemaUpdate) Save(ctx context.Context) (int, error) {
	bsu.defaults()
	return withHooks(ctx, bsu.sqlSave, bsu.mutation, bsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bsu *BaseSchemaUpdate) SaveX(ctx context.Context) int {
	affected, err := bsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bsu *BaseSchemaUpdate) Exec(ctx context.Context) error {
	_, err := bsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsu *BaseSchemaUpdate) ExecX(ctx context.Context) {
	if err := bsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bsu *BaseSchemaUpdate) defaults() {
	if _, ok := bsu.mutation.UpdateTime(); !ok {
		v := baseschema.UpdateDefaultUpdateTime()
		bsu.mutation.SetUpdateTime(v)
	}
}

func (bsu *BaseSchemaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(baseschema.Table, baseschema.Columns, sqlgraph.NewFieldSpec(baseschema.FieldID, field.TypeInt))
	if ps := bsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bsu.mutation.UpdateTime(); ok {
		_spec.SetField(baseschema.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := bsu.mutation.DeleteTime(); ok {
		_spec.SetField(baseschema.FieldDeleteTime, field.TypeTime, value)
	}
	if bsu.mutation.DeleteTimeCleared() {
		_spec.ClearField(baseschema.FieldDeleteTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{baseschema.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bsu.mutation.done = true
	return n, nil
}

// BaseSchemaUpdateOne is the builder for updating a single BaseSchema entity.
type BaseSchemaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BaseSchemaMutation
}

// SetUpdateTime sets the "update_time" field.
func (bsuo *BaseSchemaUpdateOne) SetUpdateTime(t time.Time) *BaseSchemaUpdateOne {
	bsuo.mutation.SetUpdateTime(t)
	return bsuo
}

// SetDeleteTime sets the "delete_time" field.
func (bsuo *BaseSchemaUpdateOne) SetDeleteTime(t time.Time) *BaseSchemaUpdateOne {
	bsuo.mutation.SetDeleteTime(t)
	return bsuo
}

// SetNillableDeleteTime sets the "delete_time" field if the given value is not nil.
func (bsuo *BaseSchemaUpdateOne) SetNillableDeleteTime(t *time.Time) *BaseSchemaUpdateOne {
	if t != nil {
		bsuo.SetDeleteTime(*t)
	}
	return bsuo
}

// ClearDeleteTime clears the value of the "delete_time" field.
func (bsuo *BaseSchemaUpdateOne) ClearDeleteTime() *BaseSchemaUpdateOne {
	bsuo.mutation.ClearDeleteTime()
	return bsuo
}

// Mutation returns the BaseSchemaMutation object of the builder.
func (bsuo *BaseSchemaUpdateOne) Mutation() *BaseSchemaMutation {
	return bsuo.mutation
}

// Where appends a list predicates to the BaseSchemaUpdate builder.
func (bsuo *BaseSchemaUpdateOne) Where(ps ...predicate.BaseSchema) *BaseSchemaUpdateOne {
	bsuo.mutation.Where(ps...)
	return bsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bsuo *BaseSchemaUpdateOne) Select(field string, fields ...string) *BaseSchemaUpdateOne {
	bsuo.fields = append([]string{field}, fields...)
	return bsuo
}

// Save executes the query and returns the updated BaseSchema entity.
func (bsuo *BaseSchemaUpdateOne) Save(ctx context.Context) (*BaseSchema, error) {
	bsuo.defaults()
	return withHooks(ctx, bsuo.sqlSave, bsuo.mutation, bsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bsuo *BaseSchemaUpdateOne) SaveX(ctx context.Context) *BaseSchema {
	node, err := bsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bsuo *BaseSchemaUpdateOne) Exec(ctx context.Context) error {
	_, err := bsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsuo *BaseSchemaUpdateOne) ExecX(ctx context.Context) {
	if err := bsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bsuo *BaseSchemaUpdateOne) defaults() {
	if _, ok := bsuo.mutation.UpdateTime(); !ok {
		v := baseschema.UpdateDefaultUpdateTime()
		bsuo.mutation.SetUpdateTime(v)
	}
}

func (bsuo *BaseSchemaUpdateOne) sqlSave(ctx context.Context) (_node *BaseSchema, err error) {
	_spec := sqlgraph.NewUpdateSpec(baseschema.Table, baseschema.Columns, sqlgraph.NewFieldSpec(baseschema.FieldID, field.TypeInt))
	id, ok := bsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BaseSchema.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, baseschema.FieldID)
		for _, f := range fields {
			if !baseschema.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != baseschema.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bsuo.mutation.UpdateTime(); ok {
		_spec.SetField(baseschema.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := bsuo.mutation.DeleteTime(); ok {
		_spec.SetField(baseschema.FieldDeleteTime, field.TypeTime, value)
	}
	if bsuo.mutation.DeleteTimeCleared() {
		_spec.ClearField(baseschema.FieldDeleteTime, field.TypeTime)
	}
	_node = &BaseSchema{config: bsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{baseschema.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bsuo.mutation.done = true
	return _node, nil
}
