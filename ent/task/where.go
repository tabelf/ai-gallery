// Code generated by ent, DO NOT EDIT.

package task

import (
	"ai-gallery/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUpdateTime, v))
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDeleteTime, v))
}

// Prompt applies equality check predicate on the "prompt" field. It's identical to PromptEQ.
func Prompt(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldPrompt, v))
}

// NegativePrompt applies equality check predicate on the "negative_prompt" field. It's identical to NegativePromptEQ.
func NegativePrompt(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldNegativePrompt, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCategory, v))
}

// Weight applies equality check predicate on the "weight" field. It's identical to WeightEQ.
func Weight(v float32) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldWeight, v))
}

// Height applies equality check predicate on the "height" field. It's identical to HeightEQ.
func Height(v float32) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldHeight, v))
}

// ImgSize applies equality check predicate on the "img_size" field. It's identical to ImgSizeEQ.
func ImgSize(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldImgSize, v))
}

// Seed applies equality check predicate on the "seed" field. It's identical to SeedEQ.
func Seed(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldSeed, v))
}

// SamplerName applies equality check predicate on the "sampler_name" field. It's identical to SamplerNameEQ.
func SamplerName(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldSamplerName, v))
}

// Steps applies equality check predicate on the "steps" field. It's identical to StepsEQ.
func Steps(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldSteps, v))
}

// CfgScale applies equality check predicate on the "cfg_scale" field. It's identical to CfgScaleEQ.
func CfgScale(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCfgScale, v))
}

// BatchSize applies equality check predicate on the "batch_size" field. It's identical to BatchSizeEQ.
func BatchSize(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldBatchSize, v))
}

// Total applies equality check predicate on the "total" field. It's identical to TotalEQ.
func Total(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTotal, v))
}

// SdModelName applies equality check predicate on the "sd_model_name" field. It's identical to SdModelNameEQ.
func SdModelName(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldSdModelName, v))
}

// SdModelHash applies equality check predicate on the "sd_model_hash" field. It's identical to SdModelHashEQ.
func SdModelHash(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldSdModelHash, v))
}

// SdVaeName applies equality check predicate on the "sd_vae_name" field. It's identical to SdVaeNameEQ.
func SdVaeName(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldSdVaeName, v))
}

// SdVaeHash applies equality check predicate on the "sd_vae_hash" field. It's identical to SdVaeHashEQ.
func SdVaeHash(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldSdVaeHash, v))
}

// JobTimestamp applies equality check predicate on the "job_timestamp" field. It's identical to JobTimestampEQ.
func JobTimestamp(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldJobTimestamp, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldVersion, v))
}

// GridImageURL applies equality check predicate on the "grid_image_url" field. It's identical to GridImageURLEQ.
func GridImageURL(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldGridImageURL, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldStatus, v))
}

// AuthorID applies equality check predicate on the "author_id" field. It's identical to AuthorIDEQ.
func AuthorID(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAuthorID, v))
}

// AuthorName applies equality check predicate on the "author_name" field. It's identical to AuthorNameEQ.
func AuthorName(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAuthorName, v))
}

// Store applies equality check predicate on the "store" field. It's identical to StoreEQ.
func Store(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldStore, v))
}

// Count applies equality check predicate on the "count" field. It's identical to CountEQ.
func Count(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCount, v))
}

// HasExcellent applies equality check predicate on the "has_excellent" field. It's identical to HasExcellentEQ.
func HasExcellent(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldHasExcellent, v))
}

// Extra applies equality check predicate on the "extra" field. It's identical to ExtraEQ.
func Extra(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldExtra, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldUpdateTime, v))
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDeleteTime, v))
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldDeleteTime, v))
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldDeleteTime, vs...))
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldDeleteTime, vs...))
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldDeleteTime, v))
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldDeleteTime, v))
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldDeleteTime, v))
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldDeleteTime, v))
}

// DeleteTimeIsNil applies the IsNil predicate on the "delete_time" field.
func DeleteTimeIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldDeleteTime))
}

// DeleteTimeNotNil applies the NotNil predicate on the "delete_time" field.
func DeleteTimeNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldDeleteTime))
}

// PromptEQ applies the EQ predicate on the "prompt" field.
func PromptEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldPrompt, v))
}

// PromptNEQ applies the NEQ predicate on the "prompt" field.
func PromptNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldPrompt, v))
}

// PromptIn applies the In predicate on the "prompt" field.
func PromptIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldPrompt, vs...))
}

// PromptNotIn applies the NotIn predicate on the "prompt" field.
func PromptNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldPrompt, vs...))
}

// PromptGT applies the GT predicate on the "prompt" field.
func PromptGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldPrompt, v))
}

// PromptGTE applies the GTE predicate on the "prompt" field.
func PromptGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldPrompt, v))
}

// PromptLT applies the LT predicate on the "prompt" field.
func PromptLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldPrompt, v))
}

// PromptLTE applies the LTE predicate on the "prompt" field.
func PromptLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldPrompt, v))
}

// PromptContains applies the Contains predicate on the "prompt" field.
func PromptContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldPrompt, v))
}

// PromptHasPrefix applies the HasPrefix predicate on the "prompt" field.
func PromptHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldPrompt, v))
}

// PromptHasSuffix applies the HasSuffix predicate on the "prompt" field.
func PromptHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldPrompt, v))
}

// PromptIsNil applies the IsNil predicate on the "prompt" field.
func PromptIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldPrompt))
}

// PromptNotNil applies the NotNil predicate on the "prompt" field.
func PromptNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldPrompt))
}

// PromptEqualFold applies the EqualFold predicate on the "prompt" field.
func PromptEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldPrompt, v))
}

// PromptContainsFold applies the ContainsFold predicate on the "prompt" field.
func PromptContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldPrompt, v))
}

// NegativePromptEQ applies the EQ predicate on the "negative_prompt" field.
func NegativePromptEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldNegativePrompt, v))
}

// NegativePromptNEQ applies the NEQ predicate on the "negative_prompt" field.
func NegativePromptNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldNegativePrompt, v))
}

// NegativePromptIn applies the In predicate on the "negative_prompt" field.
func NegativePromptIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldNegativePrompt, vs...))
}

// NegativePromptNotIn applies the NotIn predicate on the "negative_prompt" field.
func NegativePromptNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldNegativePrompt, vs...))
}

// NegativePromptGT applies the GT predicate on the "negative_prompt" field.
func NegativePromptGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldNegativePrompt, v))
}

// NegativePromptGTE applies the GTE predicate on the "negative_prompt" field.
func NegativePromptGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldNegativePrompt, v))
}

// NegativePromptLT applies the LT predicate on the "negative_prompt" field.
func NegativePromptLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldNegativePrompt, v))
}

// NegativePromptLTE applies the LTE predicate on the "negative_prompt" field.
func NegativePromptLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldNegativePrompt, v))
}

// NegativePromptContains applies the Contains predicate on the "negative_prompt" field.
func NegativePromptContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldNegativePrompt, v))
}

// NegativePromptHasPrefix applies the HasPrefix predicate on the "negative_prompt" field.
func NegativePromptHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldNegativePrompt, v))
}

// NegativePromptHasSuffix applies the HasSuffix predicate on the "negative_prompt" field.
func NegativePromptHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldNegativePrompt, v))
}

// NegativePromptIsNil applies the IsNil predicate on the "negative_prompt" field.
func NegativePromptIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldNegativePrompt))
}

// NegativePromptNotNil applies the NotNil predicate on the "negative_prompt" field.
func NegativePromptNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldNegativePrompt))
}

// NegativePromptEqualFold applies the EqualFold predicate on the "negative_prompt" field.
func NegativePromptEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldNegativePrompt, v))
}

// NegativePromptContainsFold applies the ContainsFold predicate on the "negative_prompt" field.
func NegativePromptContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldNegativePrompt, v))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryIsNil applies the IsNil predicate on the "category" field.
func CategoryIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldCategory))
}

// CategoryNotNil applies the NotNil predicate on the "category" field.
func CategoryNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldCategory))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldCategory, v))
}

// WeightEQ applies the EQ predicate on the "weight" field.
func WeightEQ(v float32) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldWeight, v))
}

// WeightNEQ applies the NEQ predicate on the "weight" field.
func WeightNEQ(v float32) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldWeight, v))
}

// WeightIn applies the In predicate on the "weight" field.
func WeightIn(vs ...float32) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldWeight, vs...))
}

// WeightNotIn applies the NotIn predicate on the "weight" field.
func WeightNotIn(vs ...float32) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldWeight, vs...))
}

// WeightGT applies the GT predicate on the "weight" field.
func WeightGT(v float32) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldWeight, v))
}

// WeightGTE applies the GTE predicate on the "weight" field.
func WeightGTE(v float32) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldWeight, v))
}

// WeightLT applies the LT predicate on the "weight" field.
func WeightLT(v float32) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldWeight, v))
}

// WeightLTE applies the LTE predicate on the "weight" field.
func WeightLTE(v float32) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldWeight, v))
}

// WeightIsNil applies the IsNil predicate on the "weight" field.
func WeightIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldWeight))
}

// WeightNotNil applies the NotNil predicate on the "weight" field.
func WeightNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldWeight))
}

// HeightEQ applies the EQ predicate on the "height" field.
func HeightEQ(v float32) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldHeight, v))
}

// HeightNEQ applies the NEQ predicate on the "height" field.
func HeightNEQ(v float32) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldHeight, v))
}

// HeightIn applies the In predicate on the "height" field.
func HeightIn(vs ...float32) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldHeight, vs...))
}

// HeightNotIn applies the NotIn predicate on the "height" field.
func HeightNotIn(vs ...float32) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldHeight, vs...))
}

// HeightGT applies the GT predicate on the "height" field.
func HeightGT(v float32) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldHeight, v))
}

// HeightGTE applies the GTE predicate on the "height" field.
func HeightGTE(v float32) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldHeight, v))
}

// HeightLT applies the LT predicate on the "height" field.
func HeightLT(v float32) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldHeight, v))
}

// HeightLTE applies the LTE predicate on the "height" field.
func HeightLTE(v float32) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldHeight, v))
}

// HeightIsNil applies the IsNil predicate on the "height" field.
func HeightIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldHeight))
}

// HeightNotNil applies the NotNil predicate on the "height" field.
func HeightNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldHeight))
}

// ImgSizeEQ applies the EQ predicate on the "img_size" field.
func ImgSizeEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldImgSize, v))
}

// ImgSizeNEQ applies the NEQ predicate on the "img_size" field.
func ImgSizeNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldImgSize, v))
}

// ImgSizeIn applies the In predicate on the "img_size" field.
func ImgSizeIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldImgSize, vs...))
}

// ImgSizeNotIn applies the NotIn predicate on the "img_size" field.
func ImgSizeNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldImgSize, vs...))
}

// ImgSizeGT applies the GT predicate on the "img_size" field.
func ImgSizeGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldImgSize, v))
}

// ImgSizeGTE applies the GTE predicate on the "img_size" field.
func ImgSizeGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldImgSize, v))
}

// ImgSizeLT applies the LT predicate on the "img_size" field.
func ImgSizeLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldImgSize, v))
}

// ImgSizeLTE applies the LTE predicate on the "img_size" field.
func ImgSizeLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldImgSize, v))
}

// ImgSizeContains applies the Contains predicate on the "img_size" field.
func ImgSizeContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldImgSize, v))
}

// ImgSizeHasPrefix applies the HasPrefix predicate on the "img_size" field.
func ImgSizeHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldImgSize, v))
}

// ImgSizeHasSuffix applies the HasSuffix predicate on the "img_size" field.
func ImgSizeHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldImgSize, v))
}

// ImgSizeIsNil applies the IsNil predicate on the "img_size" field.
func ImgSizeIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldImgSize))
}

// ImgSizeNotNil applies the NotNil predicate on the "img_size" field.
func ImgSizeNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldImgSize))
}

// ImgSizeEqualFold applies the EqualFold predicate on the "img_size" field.
func ImgSizeEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldImgSize, v))
}

// ImgSizeContainsFold applies the ContainsFold predicate on the "img_size" field.
func ImgSizeContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldImgSize, v))
}

// SeedEQ applies the EQ predicate on the "seed" field.
func SeedEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldSeed, v))
}

// SeedNEQ applies the NEQ predicate on the "seed" field.
func SeedNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldSeed, v))
}

// SeedIn applies the In predicate on the "seed" field.
func SeedIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldSeed, vs...))
}

// SeedNotIn applies the NotIn predicate on the "seed" field.
func SeedNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldSeed, vs...))
}

// SeedGT applies the GT predicate on the "seed" field.
func SeedGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldSeed, v))
}

// SeedGTE applies the GTE predicate on the "seed" field.
func SeedGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldSeed, v))
}

// SeedLT applies the LT predicate on the "seed" field.
func SeedLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldSeed, v))
}

// SeedLTE applies the LTE predicate on the "seed" field.
func SeedLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldSeed, v))
}

// SeedContains applies the Contains predicate on the "seed" field.
func SeedContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldSeed, v))
}

// SeedHasPrefix applies the HasPrefix predicate on the "seed" field.
func SeedHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldSeed, v))
}

// SeedHasSuffix applies the HasSuffix predicate on the "seed" field.
func SeedHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldSeed, v))
}

// SeedIsNil applies the IsNil predicate on the "seed" field.
func SeedIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldSeed))
}

// SeedNotNil applies the NotNil predicate on the "seed" field.
func SeedNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldSeed))
}

// SeedEqualFold applies the EqualFold predicate on the "seed" field.
func SeedEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldSeed, v))
}

// SeedContainsFold applies the ContainsFold predicate on the "seed" field.
func SeedContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldSeed, v))
}

// SamplerNameEQ applies the EQ predicate on the "sampler_name" field.
func SamplerNameEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldSamplerName, v))
}

// SamplerNameNEQ applies the NEQ predicate on the "sampler_name" field.
func SamplerNameNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldSamplerName, v))
}

// SamplerNameIn applies the In predicate on the "sampler_name" field.
func SamplerNameIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldSamplerName, vs...))
}

// SamplerNameNotIn applies the NotIn predicate on the "sampler_name" field.
func SamplerNameNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldSamplerName, vs...))
}

// SamplerNameGT applies the GT predicate on the "sampler_name" field.
func SamplerNameGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldSamplerName, v))
}

// SamplerNameGTE applies the GTE predicate on the "sampler_name" field.
func SamplerNameGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldSamplerName, v))
}

// SamplerNameLT applies the LT predicate on the "sampler_name" field.
func SamplerNameLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldSamplerName, v))
}

// SamplerNameLTE applies the LTE predicate on the "sampler_name" field.
func SamplerNameLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldSamplerName, v))
}

// SamplerNameContains applies the Contains predicate on the "sampler_name" field.
func SamplerNameContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldSamplerName, v))
}

// SamplerNameHasPrefix applies the HasPrefix predicate on the "sampler_name" field.
func SamplerNameHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldSamplerName, v))
}

// SamplerNameHasSuffix applies the HasSuffix predicate on the "sampler_name" field.
func SamplerNameHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldSamplerName, v))
}

// SamplerNameIsNil applies the IsNil predicate on the "sampler_name" field.
func SamplerNameIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldSamplerName))
}

// SamplerNameNotNil applies the NotNil predicate on the "sampler_name" field.
func SamplerNameNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldSamplerName))
}

// SamplerNameEqualFold applies the EqualFold predicate on the "sampler_name" field.
func SamplerNameEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldSamplerName, v))
}

// SamplerNameContainsFold applies the ContainsFold predicate on the "sampler_name" field.
func SamplerNameContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldSamplerName, v))
}

// StepsEQ applies the EQ predicate on the "steps" field.
func StepsEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldSteps, v))
}

// StepsNEQ applies the NEQ predicate on the "steps" field.
func StepsNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldSteps, v))
}

// StepsIn applies the In predicate on the "steps" field.
func StepsIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldSteps, vs...))
}

// StepsNotIn applies the NotIn predicate on the "steps" field.
func StepsNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldSteps, vs...))
}

// StepsGT applies the GT predicate on the "steps" field.
func StepsGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldSteps, v))
}

// StepsGTE applies the GTE predicate on the "steps" field.
func StepsGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldSteps, v))
}

// StepsLT applies the LT predicate on the "steps" field.
func StepsLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldSteps, v))
}

// StepsLTE applies the LTE predicate on the "steps" field.
func StepsLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldSteps, v))
}

// StepsIsNil applies the IsNil predicate on the "steps" field.
func StepsIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldSteps))
}

// StepsNotNil applies the NotNil predicate on the "steps" field.
func StepsNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldSteps))
}

// CfgScaleEQ applies the EQ predicate on the "cfg_scale" field.
func CfgScaleEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCfgScale, v))
}

// CfgScaleNEQ applies the NEQ predicate on the "cfg_scale" field.
func CfgScaleNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCfgScale, v))
}

// CfgScaleIn applies the In predicate on the "cfg_scale" field.
func CfgScaleIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCfgScale, vs...))
}

// CfgScaleNotIn applies the NotIn predicate on the "cfg_scale" field.
func CfgScaleNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCfgScale, vs...))
}

// CfgScaleGT applies the GT predicate on the "cfg_scale" field.
func CfgScaleGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCfgScale, v))
}

// CfgScaleGTE applies the GTE predicate on the "cfg_scale" field.
func CfgScaleGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCfgScale, v))
}

// CfgScaleLT applies the LT predicate on the "cfg_scale" field.
func CfgScaleLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCfgScale, v))
}

// CfgScaleLTE applies the LTE predicate on the "cfg_scale" field.
func CfgScaleLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCfgScale, v))
}

// CfgScaleIsNil applies the IsNil predicate on the "cfg_scale" field.
func CfgScaleIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldCfgScale))
}

// CfgScaleNotNil applies the NotNil predicate on the "cfg_scale" field.
func CfgScaleNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldCfgScale))
}

// BatchSizeEQ applies the EQ predicate on the "batch_size" field.
func BatchSizeEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldBatchSize, v))
}

// BatchSizeNEQ applies the NEQ predicate on the "batch_size" field.
func BatchSizeNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldBatchSize, v))
}

// BatchSizeIn applies the In predicate on the "batch_size" field.
func BatchSizeIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldBatchSize, vs...))
}

// BatchSizeNotIn applies the NotIn predicate on the "batch_size" field.
func BatchSizeNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldBatchSize, vs...))
}

// BatchSizeGT applies the GT predicate on the "batch_size" field.
func BatchSizeGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldBatchSize, v))
}

// BatchSizeGTE applies the GTE predicate on the "batch_size" field.
func BatchSizeGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldBatchSize, v))
}

// BatchSizeLT applies the LT predicate on the "batch_size" field.
func BatchSizeLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldBatchSize, v))
}

// BatchSizeLTE applies the LTE predicate on the "batch_size" field.
func BatchSizeLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldBatchSize, v))
}

// BatchSizeIsNil applies the IsNil predicate on the "batch_size" field.
func BatchSizeIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldBatchSize))
}

// BatchSizeNotNil applies the NotNil predicate on the "batch_size" field.
func BatchSizeNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldBatchSize))
}

// TotalEQ applies the EQ predicate on the "total" field.
func TotalEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTotal, v))
}

// TotalNEQ applies the NEQ predicate on the "total" field.
func TotalNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldTotal, v))
}

// TotalIn applies the In predicate on the "total" field.
func TotalIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldTotal, vs...))
}

// TotalNotIn applies the NotIn predicate on the "total" field.
func TotalNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldTotal, vs...))
}

// TotalGT applies the GT predicate on the "total" field.
func TotalGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldTotal, v))
}

// TotalGTE applies the GTE predicate on the "total" field.
func TotalGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldTotal, v))
}

// TotalLT applies the LT predicate on the "total" field.
func TotalLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldTotal, v))
}

// TotalLTE applies the LTE predicate on the "total" field.
func TotalLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldTotal, v))
}

// TotalIsNil applies the IsNil predicate on the "total" field.
func TotalIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldTotal))
}

// TotalNotNil applies the NotNil predicate on the "total" field.
func TotalNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldTotal))
}

// SdModelNameEQ applies the EQ predicate on the "sd_model_name" field.
func SdModelNameEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldSdModelName, v))
}

// SdModelNameNEQ applies the NEQ predicate on the "sd_model_name" field.
func SdModelNameNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldSdModelName, v))
}

// SdModelNameIn applies the In predicate on the "sd_model_name" field.
func SdModelNameIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldSdModelName, vs...))
}

// SdModelNameNotIn applies the NotIn predicate on the "sd_model_name" field.
func SdModelNameNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldSdModelName, vs...))
}

// SdModelNameGT applies the GT predicate on the "sd_model_name" field.
func SdModelNameGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldSdModelName, v))
}

// SdModelNameGTE applies the GTE predicate on the "sd_model_name" field.
func SdModelNameGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldSdModelName, v))
}

// SdModelNameLT applies the LT predicate on the "sd_model_name" field.
func SdModelNameLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldSdModelName, v))
}

// SdModelNameLTE applies the LTE predicate on the "sd_model_name" field.
func SdModelNameLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldSdModelName, v))
}

// SdModelNameContains applies the Contains predicate on the "sd_model_name" field.
func SdModelNameContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldSdModelName, v))
}

// SdModelNameHasPrefix applies the HasPrefix predicate on the "sd_model_name" field.
func SdModelNameHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldSdModelName, v))
}

// SdModelNameHasSuffix applies the HasSuffix predicate on the "sd_model_name" field.
func SdModelNameHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldSdModelName, v))
}

// SdModelNameIsNil applies the IsNil predicate on the "sd_model_name" field.
func SdModelNameIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldSdModelName))
}

// SdModelNameNotNil applies the NotNil predicate on the "sd_model_name" field.
func SdModelNameNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldSdModelName))
}

// SdModelNameEqualFold applies the EqualFold predicate on the "sd_model_name" field.
func SdModelNameEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldSdModelName, v))
}

// SdModelNameContainsFold applies the ContainsFold predicate on the "sd_model_name" field.
func SdModelNameContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldSdModelName, v))
}

// SdModelHashEQ applies the EQ predicate on the "sd_model_hash" field.
func SdModelHashEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldSdModelHash, v))
}

// SdModelHashNEQ applies the NEQ predicate on the "sd_model_hash" field.
func SdModelHashNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldSdModelHash, v))
}

// SdModelHashIn applies the In predicate on the "sd_model_hash" field.
func SdModelHashIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldSdModelHash, vs...))
}

// SdModelHashNotIn applies the NotIn predicate on the "sd_model_hash" field.
func SdModelHashNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldSdModelHash, vs...))
}

// SdModelHashGT applies the GT predicate on the "sd_model_hash" field.
func SdModelHashGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldSdModelHash, v))
}

// SdModelHashGTE applies the GTE predicate on the "sd_model_hash" field.
func SdModelHashGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldSdModelHash, v))
}

// SdModelHashLT applies the LT predicate on the "sd_model_hash" field.
func SdModelHashLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldSdModelHash, v))
}

// SdModelHashLTE applies the LTE predicate on the "sd_model_hash" field.
func SdModelHashLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldSdModelHash, v))
}

// SdModelHashContains applies the Contains predicate on the "sd_model_hash" field.
func SdModelHashContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldSdModelHash, v))
}

// SdModelHashHasPrefix applies the HasPrefix predicate on the "sd_model_hash" field.
func SdModelHashHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldSdModelHash, v))
}

// SdModelHashHasSuffix applies the HasSuffix predicate on the "sd_model_hash" field.
func SdModelHashHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldSdModelHash, v))
}

// SdModelHashIsNil applies the IsNil predicate on the "sd_model_hash" field.
func SdModelHashIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldSdModelHash))
}

// SdModelHashNotNil applies the NotNil predicate on the "sd_model_hash" field.
func SdModelHashNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldSdModelHash))
}

// SdModelHashEqualFold applies the EqualFold predicate on the "sd_model_hash" field.
func SdModelHashEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldSdModelHash, v))
}

// SdModelHashContainsFold applies the ContainsFold predicate on the "sd_model_hash" field.
func SdModelHashContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldSdModelHash, v))
}

// SdVaeNameEQ applies the EQ predicate on the "sd_vae_name" field.
func SdVaeNameEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldSdVaeName, v))
}

// SdVaeNameNEQ applies the NEQ predicate on the "sd_vae_name" field.
func SdVaeNameNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldSdVaeName, v))
}

// SdVaeNameIn applies the In predicate on the "sd_vae_name" field.
func SdVaeNameIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldSdVaeName, vs...))
}

// SdVaeNameNotIn applies the NotIn predicate on the "sd_vae_name" field.
func SdVaeNameNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldSdVaeName, vs...))
}

// SdVaeNameGT applies the GT predicate on the "sd_vae_name" field.
func SdVaeNameGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldSdVaeName, v))
}

// SdVaeNameGTE applies the GTE predicate on the "sd_vae_name" field.
func SdVaeNameGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldSdVaeName, v))
}

// SdVaeNameLT applies the LT predicate on the "sd_vae_name" field.
func SdVaeNameLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldSdVaeName, v))
}

// SdVaeNameLTE applies the LTE predicate on the "sd_vae_name" field.
func SdVaeNameLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldSdVaeName, v))
}

// SdVaeNameContains applies the Contains predicate on the "sd_vae_name" field.
func SdVaeNameContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldSdVaeName, v))
}

// SdVaeNameHasPrefix applies the HasPrefix predicate on the "sd_vae_name" field.
func SdVaeNameHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldSdVaeName, v))
}

// SdVaeNameHasSuffix applies the HasSuffix predicate on the "sd_vae_name" field.
func SdVaeNameHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldSdVaeName, v))
}

// SdVaeNameIsNil applies the IsNil predicate on the "sd_vae_name" field.
func SdVaeNameIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldSdVaeName))
}

// SdVaeNameNotNil applies the NotNil predicate on the "sd_vae_name" field.
func SdVaeNameNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldSdVaeName))
}

// SdVaeNameEqualFold applies the EqualFold predicate on the "sd_vae_name" field.
func SdVaeNameEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldSdVaeName, v))
}

// SdVaeNameContainsFold applies the ContainsFold predicate on the "sd_vae_name" field.
func SdVaeNameContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldSdVaeName, v))
}

// SdVaeHashEQ applies the EQ predicate on the "sd_vae_hash" field.
func SdVaeHashEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldSdVaeHash, v))
}

// SdVaeHashNEQ applies the NEQ predicate on the "sd_vae_hash" field.
func SdVaeHashNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldSdVaeHash, v))
}

// SdVaeHashIn applies the In predicate on the "sd_vae_hash" field.
func SdVaeHashIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldSdVaeHash, vs...))
}

// SdVaeHashNotIn applies the NotIn predicate on the "sd_vae_hash" field.
func SdVaeHashNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldSdVaeHash, vs...))
}

// SdVaeHashGT applies the GT predicate on the "sd_vae_hash" field.
func SdVaeHashGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldSdVaeHash, v))
}

// SdVaeHashGTE applies the GTE predicate on the "sd_vae_hash" field.
func SdVaeHashGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldSdVaeHash, v))
}

// SdVaeHashLT applies the LT predicate on the "sd_vae_hash" field.
func SdVaeHashLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldSdVaeHash, v))
}

// SdVaeHashLTE applies the LTE predicate on the "sd_vae_hash" field.
func SdVaeHashLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldSdVaeHash, v))
}

// SdVaeHashContains applies the Contains predicate on the "sd_vae_hash" field.
func SdVaeHashContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldSdVaeHash, v))
}

// SdVaeHashHasPrefix applies the HasPrefix predicate on the "sd_vae_hash" field.
func SdVaeHashHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldSdVaeHash, v))
}

// SdVaeHashHasSuffix applies the HasSuffix predicate on the "sd_vae_hash" field.
func SdVaeHashHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldSdVaeHash, v))
}

// SdVaeHashIsNil applies the IsNil predicate on the "sd_vae_hash" field.
func SdVaeHashIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldSdVaeHash))
}

// SdVaeHashNotNil applies the NotNil predicate on the "sd_vae_hash" field.
func SdVaeHashNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldSdVaeHash))
}

// SdVaeHashEqualFold applies the EqualFold predicate on the "sd_vae_hash" field.
func SdVaeHashEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldSdVaeHash, v))
}

// SdVaeHashContainsFold applies the ContainsFold predicate on the "sd_vae_hash" field.
func SdVaeHashContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldSdVaeHash, v))
}

// JobTimestampEQ applies the EQ predicate on the "job_timestamp" field.
func JobTimestampEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldJobTimestamp, v))
}

// JobTimestampNEQ applies the NEQ predicate on the "job_timestamp" field.
func JobTimestampNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldJobTimestamp, v))
}

// JobTimestampIn applies the In predicate on the "job_timestamp" field.
func JobTimestampIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldJobTimestamp, vs...))
}

// JobTimestampNotIn applies the NotIn predicate on the "job_timestamp" field.
func JobTimestampNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldJobTimestamp, vs...))
}

// JobTimestampGT applies the GT predicate on the "job_timestamp" field.
func JobTimestampGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldJobTimestamp, v))
}

// JobTimestampGTE applies the GTE predicate on the "job_timestamp" field.
func JobTimestampGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldJobTimestamp, v))
}

// JobTimestampLT applies the LT predicate on the "job_timestamp" field.
func JobTimestampLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldJobTimestamp, v))
}

// JobTimestampLTE applies the LTE predicate on the "job_timestamp" field.
func JobTimestampLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldJobTimestamp, v))
}

// JobTimestampIsNil applies the IsNil predicate on the "job_timestamp" field.
func JobTimestampIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldJobTimestamp))
}

// JobTimestampNotNil applies the NotNil predicate on the "job_timestamp" field.
func JobTimestampNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldJobTimestamp))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionIsNil applies the IsNil predicate on the "version" field.
func VersionIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldVersion))
}

// VersionNotNil applies the NotNil predicate on the "version" field.
func VersionNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldVersion))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldVersion, v))
}

// GridImageURLEQ applies the EQ predicate on the "grid_image_url" field.
func GridImageURLEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldGridImageURL, v))
}

// GridImageURLNEQ applies the NEQ predicate on the "grid_image_url" field.
func GridImageURLNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldGridImageURL, v))
}

// GridImageURLIn applies the In predicate on the "grid_image_url" field.
func GridImageURLIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldGridImageURL, vs...))
}

// GridImageURLNotIn applies the NotIn predicate on the "grid_image_url" field.
func GridImageURLNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldGridImageURL, vs...))
}

// GridImageURLGT applies the GT predicate on the "grid_image_url" field.
func GridImageURLGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldGridImageURL, v))
}

// GridImageURLGTE applies the GTE predicate on the "grid_image_url" field.
func GridImageURLGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldGridImageURL, v))
}

// GridImageURLLT applies the LT predicate on the "grid_image_url" field.
func GridImageURLLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldGridImageURL, v))
}

// GridImageURLLTE applies the LTE predicate on the "grid_image_url" field.
func GridImageURLLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldGridImageURL, v))
}

// GridImageURLContains applies the Contains predicate on the "grid_image_url" field.
func GridImageURLContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldGridImageURL, v))
}

// GridImageURLHasPrefix applies the HasPrefix predicate on the "grid_image_url" field.
func GridImageURLHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldGridImageURL, v))
}

// GridImageURLHasSuffix applies the HasSuffix predicate on the "grid_image_url" field.
func GridImageURLHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldGridImageURL, v))
}

// GridImageURLIsNil applies the IsNil predicate on the "grid_image_url" field.
func GridImageURLIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldGridImageURL))
}

// GridImageURLNotNil applies the NotNil predicate on the "grid_image_url" field.
func GridImageURLNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldGridImageURL))
}

// GridImageURLEqualFold applies the EqualFold predicate on the "grid_image_url" field.
func GridImageURLEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldGridImageURL, v))
}

// GridImageURLContainsFold applies the ContainsFold predicate on the "grid_image_url" field.
func GridImageURLContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldGridImageURL, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldStatus, v))
}

// AuthorIDEQ applies the EQ predicate on the "author_id" field.
func AuthorIDEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAuthorID, v))
}

// AuthorIDNEQ applies the NEQ predicate on the "author_id" field.
func AuthorIDNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAuthorID, v))
}

// AuthorIDIn applies the In predicate on the "author_id" field.
func AuthorIDIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldAuthorID, vs...))
}

// AuthorIDNotIn applies the NotIn predicate on the "author_id" field.
func AuthorIDNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldAuthorID, vs...))
}

// AuthorIDGT applies the GT predicate on the "author_id" field.
func AuthorIDGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldAuthorID, v))
}

// AuthorIDGTE applies the GTE predicate on the "author_id" field.
func AuthorIDGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldAuthorID, v))
}

// AuthorIDLT applies the LT predicate on the "author_id" field.
func AuthorIDLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldAuthorID, v))
}

// AuthorIDLTE applies the LTE predicate on the "author_id" field.
func AuthorIDLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldAuthorID, v))
}

// AuthorIDIsNil applies the IsNil predicate on the "author_id" field.
func AuthorIDIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldAuthorID))
}

// AuthorIDNotNil applies the NotNil predicate on the "author_id" field.
func AuthorIDNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldAuthorID))
}

// AuthorNameEQ applies the EQ predicate on the "author_name" field.
func AuthorNameEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAuthorName, v))
}

// AuthorNameNEQ applies the NEQ predicate on the "author_name" field.
func AuthorNameNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAuthorName, v))
}

// AuthorNameIn applies the In predicate on the "author_name" field.
func AuthorNameIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldAuthorName, vs...))
}

// AuthorNameNotIn applies the NotIn predicate on the "author_name" field.
func AuthorNameNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldAuthorName, vs...))
}

// AuthorNameGT applies the GT predicate on the "author_name" field.
func AuthorNameGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldAuthorName, v))
}

// AuthorNameGTE applies the GTE predicate on the "author_name" field.
func AuthorNameGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldAuthorName, v))
}

// AuthorNameLT applies the LT predicate on the "author_name" field.
func AuthorNameLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldAuthorName, v))
}

// AuthorNameLTE applies the LTE predicate on the "author_name" field.
func AuthorNameLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldAuthorName, v))
}

// AuthorNameContains applies the Contains predicate on the "author_name" field.
func AuthorNameContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldAuthorName, v))
}

// AuthorNameHasPrefix applies the HasPrefix predicate on the "author_name" field.
func AuthorNameHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldAuthorName, v))
}

// AuthorNameHasSuffix applies the HasSuffix predicate on the "author_name" field.
func AuthorNameHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldAuthorName, v))
}

// AuthorNameIsNil applies the IsNil predicate on the "author_name" field.
func AuthorNameIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldAuthorName))
}

// AuthorNameNotNil applies the NotNil predicate on the "author_name" field.
func AuthorNameNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldAuthorName))
}

// AuthorNameEqualFold applies the EqualFold predicate on the "author_name" field.
func AuthorNameEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldAuthorName, v))
}

// AuthorNameContainsFold applies the ContainsFold predicate on the "author_name" field.
func AuthorNameContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldAuthorName, v))
}

// RefImagesIsNil applies the IsNil predicate on the "ref_images" field.
func RefImagesIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldRefImages))
}

// RefImagesNotNil applies the NotNil predicate on the "ref_images" field.
func RefImagesNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldRefImages))
}

// StoreEQ applies the EQ predicate on the "store" field.
func StoreEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldStore, v))
}

// StoreNEQ applies the NEQ predicate on the "store" field.
func StoreNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldStore, v))
}

// StoreIn applies the In predicate on the "store" field.
func StoreIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldStore, vs...))
}

// StoreNotIn applies the NotIn predicate on the "store" field.
func StoreNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldStore, vs...))
}

// StoreGT applies the GT predicate on the "store" field.
func StoreGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldStore, v))
}

// StoreGTE applies the GTE predicate on the "store" field.
func StoreGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldStore, v))
}

// StoreLT applies the LT predicate on the "store" field.
func StoreLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldStore, v))
}

// StoreLTE applies the LTE predicate on the "store" field.
func StoreLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldStore, v))
}

// StoreContains applies the Contains predicate on the "store" field.
func StoreContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldStore, v))
}

// StoreHasPrefix applies the HasPrefix predicate on the "store" field.
func StoreHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldStore, v))
}

// StoreHasSuffix applies the HasSuffix predicate on the "store" field.
func StoreHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldStore, v))
}

// StoreIsNil applies the IsNil predicate on the "store" field.
func StoreIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldStore))
}

// StoreNotNil applies the NotNil predicate on the "store" field.
func StoreNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldStore))
}

// StoreEqualFold applies the EqualFold predicate on the "store" field.
func StoreEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldStore, v))
}

// StoreContainsFold applies the ContainsFold predicate on the "store" field.
func StoreContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldStore, v))
}

// CountEQ applies the EQ predicate on the "count" field.
func CountEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCount, v))
}

// CountNEQ applies the NEQ predicate on the "count" field.
func CountNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCount, v))
}

// CountIn applies the In predicate on the "count" field.
func CountIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCount, vs...))
}

// CountNotIn applies the NotIn predicate on the "count" field.
func CountNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCount, vs...))
}

// CountGT applies the GT predicate on the "count" field.
func CountGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCount, v))
}

// CountGTE applies the GTE predicate on the "count" field.
func CountGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCount, v))
}

// CountLT applies the LT predicate on the "count" field.
func CountLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCount, v))
}

// CountLTE applies the LTE predicate on the "count" field.
func CountLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCount, v))
}

// CountIsNil applies the IsNil predicate on the "count" field.
func CountIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldCount))
}

// CountNotNil applies the NotNil predicate on the "count" field.
func CountNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldCount))
}

// HasExcellentEQ applies the EQ predicate on the "has_excellent" field.
func HasExcellentEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldHasExcellent, v))
}

// HasExcellentNEQ applies the NEQ predicate on the "has_excellent" field.
func HasExcellentNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldHasExcellent, v))
}

// HasExcellentIsNil applies the IsNil predicate on the "has_excellent" field.
func HasExcellentIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldHasExcellent))
}

// HasExcellentNotNil applies the NotNil predicate on the "has_excellent" field.
func HasExcellentNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldHasExcellent))
}

// ExtraEQ applies the EQ predicate on the "extra" field.
func ExtraEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldExtra, v))
}

// ExtraNEQ applies the NEQ predicate on the "extra" field.
func ExtraNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldExtra, v))
}

// ExtraIn applies the In predicate on the "extra" field.
func ExtraIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldExtra, vs...))
}

// ExtraNotIn applies the NotIn predicate on the "extra" field.
func ExtraNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldExtra, vs...))
}

// ExtraGT applies the GT predicate on the "extra" field.
func ExtraGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldExtra, v))
}

// ExtraGTE applies the GTE predicate on the "extra" field.
func ExtraGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldExtra, v))
}

// ExtraLT applies the LT predicate on the "extra" field.
func ExtraLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldExtra, v))
}

// ExtraLTE applies the LTE predicate on the "extra" field.
func ExtraLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldExtra, v))
}

// ExtraContains applies the Contains predicate on the "extra" field.
func ExtraContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldExtra, v))
}

// ExtraHasPrefix applies the HasPrefix predicate on the "extra" field.
func ExtraHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldExtra, v))
}

// ExtraHasSuffix applies the HasSuffix predicate on the "extra" field.
func ExtraHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldExtra, v))
}

// ExtraIsNil applies the IsNil predicate on the "extra" field.
func ExtraIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldExtra))
}

// ExtraNotNil applies the NotNil predicate on the "extra" field.
func ExtraNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldExtra))
}

// ExtraEqualFold applies the EqualFold predicate on the "extra" field.
func ExtraEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldExtra, v))
}

// ExtraContainsFold applies the ContainsFold predicate on the "extra" field.
func ExtraContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldExtra, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Task) predicate.Task {
	return predicate.Task(sql.NotPredicates(p))
}
