// Code generated by ent, DO NOT EDIT.

package task

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the task type in the database.
	Label = "task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldDeleteTime holds the string denoting the delete_time field in the database.
	FieldDeleteTime = "delete_time"
	// FieldPrompt holds the string denoting the prompt field in the database.
	FieldPrompt = "prompt"
	// FieldNegativePrompt holds the string denoting the negative_prompt field in the database.
	FieldNegativePrompt = "negative_prompt"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldWeight holds the string denoting the weight field in the database.
	FieldWeight = "weight"
	// FieldHeight holds the string denoting the height field in the database.
	FieldHeight = "height"
	// FieldImgSize holds the string denoting the img_size field in the database.
	FieldImgSize = "img_size"
	// FieldSeed holds the string denoting the seed field in the database.
	FieldSeed = "seed"
	// FieldSamplerName holds the string denoting the sampler_name field in the database.
	FieldSamplerName = "sampler_name"
	// FieldSteps holds the string denoting the steps field in the database.
	FieldSteps = "steps"
	// FieldCfgScale holds the string denoting the cfg_scale field in the database.
	FieldCfgScale = "cfg_scale"
	// FieldBatchSize holds the string denoting the batch_size field in the database.
	FieldBatchSize = "batch_size"
	// FieldTotal holds the string denoting the total field in the database.
	FieldTotal = "total"
	// FieldSdModelName holds the string denoting the sd_model_name field in the database.
	FieldSdModelName = "sd_model_name"
	// FieldSdModelHash holds the string denoting the sd_model_hash field in the database.
	FieldSdModelHash = "sd_model_hash"
	// FieldSdVaeName holds the string denoting the sd_vae_name field in the database.
	FieldSdVaeName = "sd_vae_name"
	// FieldSdVaeHash holds the string denoting the sd_vae_hash field in the database.
	FieldSdVaeHash = "sd_vae_hash"
	// FieldJobTimestamp holds the string denoting the job_timestamp field in the database.
	FieldJobTimestamp = "job_timestamp"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldGridImageURL holds the string denoting the grid_image_url field in the database.
	FieldGridImageURL = "grid_image_url"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldAuthorID holds the string denoting the author_id field in the database.
	FieldAuthorID = "author_id"
	// FieldAuthorName holds the string denoting the author_name field in the database.
	FieldAuthorName = "author_name"
	// FieldRefImages holds the string denoting the ref_images field in the database.
	FieldRefImages = "ref_images"
	// FieldStore holds the string denoting the store field in the database.
	FieldStore = "store"
	// FieldCount holds the string denoting the count field in the database.
	FieldCount = "count"
	// FieldHasExcellent holds the string denoting the has_excellent field in the database.
	FieldHasExcellent = "has_excellent"
	// FieldExtra holds the string denoting the extra field in the database.
	FieldExtra = "extra"
	// Table holds the table name of the task in the database.
	Table = "core_task"
)

// Columns holds all SQL columns for task fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldDeleteTime,
	FieldPrompt,
	FieldNegativePrompt,
	FieldCategory,
	FieldWeight,
	FieldHeight,
	FieldImgSize,
	FieldSeed,
	FieldSamplerName,
	FieldSteps,
	FieldCfgScale,
	FieldBatchSize,
	FieldTotal,
	FieldSdModelName,
	FieldSdModelHash,
	FieldSdVaeName,
	FieldSdVaeHash,
	FieldJobTimestamp,
	FieldVersion,
	FieldGridImageURL,
	FieldStatus,
	FieldAuthorID,
	FieldAuthorName,
	FieldRefImages,
	FieldStore,
	FieldCount,
	FieldHasExcellent,
	FieldExtra,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// CategoryValidator is a validator for the "category" field. It is called by the builders before save.
	CategoryValidator func(string) error
	// ImgSizeValidator is a validator for the "img_size" field. It is called by the builders before save.
	ImgSizeValidator func(string) error
	// SeedValidator is a validator for the "seed" field. It is called by the builders before save.
	SeedValidator func(string) error
	// SamplerNameValidator is a validator for the "sampler_name" field. It is called by the builders before save.
	SamplerNameValidator func(string) error
	// SdModelNameValidator is a validator for the "sd_model_name" field. It is called by the builders before save.
	SdModelNameValidator func(string) error
	// SdModelHashValidator is a validator for the "sd_model_hash" field. It is called by the builders before save.
	SdModelHashValidator func(string) error
	// SdVaeNameValidator is a validator for the "sd_vae_name" field. It is called by the builders before save.
	SdVaeNameValidator func(string) error
	// SdVaeHashValidator is a validator for the "sd_vae_hash" field. It is called by the builders before save.
	SdVaeHashValidator func(string) error
	// VersionValidator is a validator for the "version" field. It is called by the builders before save.
	VersionValidator func(string) error
	// GridImageURLValidator is a validator for the "grid_image_url" field. It is called by the builders before save.
	GridImageURLValidator func(string) error
	// StatusValidator is a validator for the "status" field. It is called by the builders before save.
	StatusValidator func(string) error
	// AuthorNameValidator is a validator for the "author_name" field. It is called by the builders before save.
	AuthorNameValidator func(string) error
)

// OrderOption defines the ordering options for the Task queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByDeleteTime orders the results by the delete_time field.
func ByDeleteTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeleteTime, opts...).ToFunc()
}

// ByPrompt orders the results by the prompt field.
func ByPrompt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrompt, opts...).ToFunc()
}

// ByNegativePrompt orders the results by the negative_prompt field.
func ByNegativePrompt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNegativePrompt, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByWeight orders the results by the weight field.
func ByWeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWeight, opts...).ToFunc()
}

// ByHeight orders the results by the height field.
func ByHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHeight, opts...).ToFunc()
}

// ByImgSize orders the results by the img_size field.
func ByImgSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImgSize, opts...).ToFunc()
}

// BySeed orders the results by the seed field.
func BySeed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeed, opts...).ToFunc()
}

// BySamplerName orders the results by the sampler_name field.
func BySamplerName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSamplerName, opts...).ToFunc()
}

// BySteps orders the results by the steps field.
func BySteps(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSteps, opts...).ToFunc()
}

// ByCfgScale orders the results by the cfg_scale field.
func ByCfgScale(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCfgScale, opts...).ToFunc()
}

// ByBatchSize orders the results by the batch_size field.
func ByBatchSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBatchSize, opts...).ToFunc()
}

// ByTotal orders the results by the total field.
func ByTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotal, opts...).ToFunc()
}

// BySdModelName orders the results by the sd_model_name field.
func BySdModelName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSdModelName, opts...).ToFunc()
}

// BySdModelHash orders the results by the sd_model_hash field.
func BySdModelHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSdModelHash, opts...).ToFunc()
}

// BySdVaeName orders the results by the sd_vae_name field.
func BySdVaeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSdVaeName, opts...).ToFunc()
}

// BySdVaeHash orders the results by the sd_vae_hash field.
func BySdVaeHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSdVaeHash, opts...).ToFunc()
}

// ByJobTimestamp orders the results by the job_timestamp field.
func ByJobTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobTimestamp, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByGridImageURL orders the results by the grid_image_url field.
func ByGridImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGridImageURL, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByAuthorID orders the results by the author_id field.
func ByAuthorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthorID, opts...).ToFunc()
}

// ByAuthorName orders the results by the author_name field.
func ByAuthorName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthorName, opts...).ToFunc()
}

// ByStore orders the results by the store field.
func ByStore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStore, opts...).ToFunc()
}

// ByCount orders the results by the count field.
func ByCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCount, opts...).ToFunc()
}

// ByHasExcellent orders the results by the has_excellent field.
func ByHasExcellent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHasExcellent, opts...).ToFunc()
}

// ByExtra orders the results by the extra field.
func ByExtra(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExtra, opts...).ToFunc()
}
